#
# Author: HelightXu <Helight@qq.com>
import os
import subprocess
import string
import shutil

def generate_resource_header(target, source):
    res_header_path = str(target[0])
    if os.path.dirname(res_header_path) != "":
        if not os.path.exists(os.path.dirname(res_header_path)):
            os.mkdir(os.path.dirname(res_header_path))
    f = open(res_header_path, 'w')

    print >>f, '// This file was automatically generated by blade'
    print >>f, '#ifdef __cplusplus\nextern "C" {\n#endif\n'
    for s in source:
        var_name = str(s)
        for i in [',', '-', '/', '.', '+']:
            var_name = var_name.replace(i, '_')
        print >>f, 'extern const char RESOURCE_%s[%d];' % (var_name, os.path.getsize(s))
        print >>f, 'const uint64_t RESOURCE_%s_len = %d;' % (var_name, os.path.getsize(s))
    print >>f, '\n#ifdef __cplusplus\n}\n#endif\n'
    f.close()

def generate_resource_file(target, source):
    src_path = str(source)
    new_src_path = str(target)
    cmd = 'xxd -i %s | sed "s/unsigned char /const char RESOURCE_/g" > %s' % (
        src_path, new_src_path)
    p = subprocess.Popen(
        cmd,
        env={},
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        shell=True,
        universal_newlines=True)
    std_out, std_err = p.communicate()
    if p.returncode:
        print 'failed to generate resource file'
    return p.returncode

def make_file_name(var):
    return var.translate(string.maketrans(',-/.+*', '______'))

def generate_resource_head_file(resource_library):
    res_name = make_file_name(resource_library["name"])
    res_file_name = os.path.join('./', res_name)
    res_file_header = res_file_name + '.h'
    res_header_path = []
    #res_header_path.append(os.path.join('./', res_file_header))
    res_header_path.append(res_file_header)

    src_list = []
    for src in resource_library["srcs"]:
        src_path = src
        src_list.append(src_path)
    generate_resource_header(res_header_path, src_list)

    for src in resource_library["srcs"]:
        src_path = src
        src_base = os.path.basename(src_path)
        src_base_name = '%s.c' % make_file_name(src_base)
        new_src_path = os.path.join('./', src_base_name)
        generate_resource_file(new_src_path, src_path)
#    obj_base_name = './%s.o'% make_file_name(src_base)
#        obj_list.append(obj_base_name)
#        os.system("gcc -c " + new_src_path + " -o " +obj_base_name)
#    os.system('ar rcs ./lib' + res_name + ".a " + " ".join(obj_list))

resource_library = {
    'name' : 'static_resource',
    'srcs' : [
        'status.html',
        'flags.html',
        'test.html',
        'ServerStatus_types.js',
        'ServerStatus.js',
        'jquery-1.4.2.min.js',
        'thrift.js',
    ]
}

generate_resource_head_file(resource_library)

StaticLibrary(
    target = "static_resource",
    source = Glob('*.c') 
    )
#os.system("rm *.c")
