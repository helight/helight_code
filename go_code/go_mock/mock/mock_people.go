// Code generated by MockGen. DO NOT EDIT.
// Source: gomockdemo (interfaces: Ipeople)

// Package mock_gomockdemo is a generated GoMock package.
package mock_gomockdemo

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIpeople is a mock of Ipeople interface
type MockIpeople struct {
	ctrl     *gomock.Controller
	recorder *MockIpeopleMockRecorder
}

// MockIpeopleMockRecorder is the mock recorder for MockIpeople
type MockIpeopleMockRecorder struct {
	mock *MockIpeople
}

// NewMockIpeople creates a new mock instance
func NewMockIpeople(ctrl *gomock.Controller) *MockIpeople {
	mock := &MockIpeople{ctrl: ctrl}
	mock.recorder = &MockIpeopleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIpeople) EXPECT() *MockIpeopleMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockIpeople) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockIpeopleMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIpeople)(nil).GetName))
}

// SetName mocks base method
func (m *MockIpeople) SetName(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetName", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// SetName indicates an expected call of SetName
func (mr *MockIpeopleMockRecorder) SetName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockIpeople)(nil).SetName), arg0)
}
