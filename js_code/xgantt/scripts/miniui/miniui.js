mini = {
    components: {},
    uids: {},
    ux: {},
    isReady: false,
    byId: function ($) {
        if (typeof $ == "string") {
            if ($.charAt(0) == "#") $ = $.substr(1);
            return document.getElementById($)
        } else return $
    },
    byClass: function (_, $) {
        if (typeof $ == "string") $ = mini.byId($);
        return jQuery("." + _, $)[0]
    },
    getComponents: function () {
        var _ = [];
        for (var A in mini.components) {
            var $ = mini.components[A];
            _.push($)
        }
        return _
    },
    get: function (_) {
        if (!_) return null;
        if (typeof _ == "string") 
          if (_.charAt(0) == "#") 
            _ = _.substr(1);
        if (typeof _ == "string") 
          return mini.components[_];
        else 
        {
            var $ = mini.uids[_.uid];
            if ($ && $.el == _) 
              return $
        }
        return null
    },
    getbyUID: function ($) {
        return mini.uids[$]
    },
    findControls: function (E, B) {
        if (!E) return [];
        B = B || mini;
        var $ = [],
            D = mini.uids;
        for (var A in D) {
                var _ = D[A],
                    C = E.call(B, _);
                if (C !== false) {
                        $.push(_);
                        if (C === 1) break
                    }
            }
        return $
    },
    emptyFn: function () {},
    createNameControls: function (A, F) {
        if (!A || !A.el) return;
        if (!F) F = "_";
        var C = A.el,
            $ = mini.findControls(function ($) {
                if (!$.el || !$.name) return false;
                if (mini.isAncestor(C, $.el)) return true;
                return false
            });
        for (var _ = 0, D = $.length; _ < D; _++) {
                var B = $[_],
                    E = F + B.name;
                if (F === true) E = B.name[0].toUpperCase() + B.name.substring(1, B.name.length);
                A[E] = B
            }
    },
    getbyName: function (C, _) {
        var B = mini.isControl(_),
            A = _;
        if (_ && B) _ = _.el;
        _ = mini.byId(_);
        _ = _ || document.body;
        var $ = this.findControls(function ($) {
                if (!$.el) return false;
                if ($.name == C && mini.isAncestor(_, $.el)) return 1;
                return false
            }, this);
        if (B && $.length == 0 && A && A.getbyName) return A.getbyName(C);
        return $[0]
    },
    getParams: function (C) {
        if (!C) C = location.href;
        C = C.split("?")[1];
        var B = {};
        if (C) {
            var A = C.split("&");
            for (var _ = 0, D = A.length; _ < D; _++) {
                var $ = A[_].split("=");
                B[$[0]] = decodeURIComponent($[1])
            }
        }
        return B
    },
    reg: function ($) {
        this.components[$.id] = $;
        this.uids[$.uid] = $
    },
    unreg: function ($) {
        delete mini.components[$.id];
        delete mini.uids[$.uid]
    },
    classes: {},
    uiClasses: {},
    getClass: function ($) {
        if (!$) return null;
        return this.classes[$.toLowerCase()]
    },
    getClassByUICls: function ($) {
        return this.uiClasses[$.toLowerCase()]
    },
    regClass: function (A, _) {
        _ = _.toLowerCase();
        if (!mini.classes[_]) {
            mini.classes[_] = A;
            A.prototype.type = _
        }
        var $ = A.prototype.uiCls;
        if (!mini.isNull($) && !mini.uiClasses[$]) mini.uiClasses[$] = A
    },
    idPre: "mini-",
    idIndex: 1,
    newId: function ($) {
        return ($ || this.idPre) + this.idIndex++
    },
    copyTo: function ($, A) {
        if ($ && A) for (var _ in A) $[_] = A[_];
        return $
    },
    copyIf: function ($, A) {
        if ($ && A) for (var _ in A) if (mini.isNull($[_])) $[_] = A[_];
        return $
    },
    createDelegate: function (_, $) {
        if (!_) return function () {};
        return function () {
            return _.apply($, arguments)
        }
    },
    extend: function (E, A, $) {
        if (typeof A != "function") return this;
        var D = E,
            C = D.prototype,
            _ = A.prototype;
        if (D.superclass == _) return;
        D.superclass = _;
        D.superclass.constructor = A;
        for (var B in _) C[B] = _[B];
        if ($) for (B in $) C[B] = $[B];
        return D
    },
    isControl: function ($) {
        return !!($ && $.isControl)
    },
    isElement: function ($) {
        return $ && $.appendChild
    },
    isDate: function ($) {
        return $ && $.getFullYear
    },
    isArray: function ($) {
        return $ && !! $.unshift
    },
    isNull: function ($) {
        return $ === null || $ === undefined
    },
    isNumber: function ($) {
        return typeof $ == "number"
    },
    isEquals: function ($, _) {
        if ($ !== 0 && _ !== 0) if ((mini.isNull($) || $ == "") && (mini.isNull(_) || _ == "")) return true;
        if ($ && _ && $.getFullYear && _.getFullYear) return $.getTime() === _.getTime();
        if (typeof $ == "object" && typeof _ == "object" && $ === _) return true;
        return String($) === String(_)
    },
    forEach: function (E, D, B) {
        var _ = E.clone();
        for (var A = 0, C = _.length; A < C; A++) {
            var $ = _[A];
            if (D.call(B, $, A, E) === false) break
        }
    },
    sort: function (A, _, $) {
        $ = $ || A;
        A.sort(_)
    },
    removeNode: function ($) {
        jQuery($).remove()
    },
    elWarp: document.createElement("div")
};

mini._BindCallbacks = [];
mini._BindEvents = function (_, $) {
    mini._BindCallbacks.push([_, $]);
    if (!mini._EventTimer) mini._EventTimer = setTimeout(function () {
        mini._FireBindEvents()
    }, 1)
};

mini._FireBindEvents = function () {
    for (var $ = 0, _ = mini._BindCallbacks.length; $ < _; $++) {
        var A = mini._BindCallbacks[$];
        A[0].call(A[1])
    }
    mini._BindCallbacks = [];
    mini._EventTimer = null
};

mini.getAndCreate = function ($) {
    if (!$) return null;
    if (typeof $ == "string") return mini.components[$];
    if (typeof $ == "object") if (mini.isControl($)) return $;
    else if (mini.isElement($)) return mini.uids[$.uid];
    else return mini.create($);
    return null
};

mini.create = function ($) {
    if (!$) return null;
    if (mini.get($.id) === $) return $;
    var _ = this.getClass($.type);
    if (!_) return null;
    var A = new _();
    A.set($);
    return A
};

mini.append = function (_, A) {
    _ = mini.byId(_);
    if (!A || !_) return;
    if (typeof A == "string") {
        if (A.charAt(0) == "#") {
            A = mini.byId(A);
            if (!A) return;
            _.appendChild(A);
            return A
        } else {
            if (A.indexOf("<tr") == 0) {
                return jQuery(_).append(A)[0].lastChild;
                return
            }
            var $ = document.createElement("div");
            $.innerHTML = A;
            A = $.firstChild;
            while ($.firstChild) _.appendChild($.firstChild);
            return A
        }
    } else {
        _.appendChild(A);
        return A
    }
};

mini.prepend = function (_, A) {
    if (typeof A == "string") if (A.charAt(0) == "#") A = mini.byId(A);
    else {
        var $ = document.createElement("div");
        $.innerHTML = A;
        A = $.firstChild
    }
    return jQuery(_).prepend(A)[0].firstChild
};

mini.Component = function () {
    this._events = {};
    this.uid = mini.newId(this.idPre);
    if (!this.id) this.id = this.uid;
    mini.reg(this);
    this._doInit()
};

mini.Component.prototype = {
    isControl: true,
    id: null,
    _idPre: "mini-",
    _idSet: false,
    canFire: true,
    inited: false,
    _doInit: function () {
        if (this.inited == false) {
            this.inited = true;
            this.fire("init")
        }
    },
    set: function (B) {
        if (typeof B == "string") return this;
        var A = this.allowLayout;
        this.allowLayout = false;
        var C = B.renderTo || B.render;
        delete B.renderTo;
        delete B.render;
        for (var $ in B) if ($.toLowerCase().indexOf("on") == 0) {
            var F = B[$];
            this.on($.substring(2, $.length).toLowerCase(), F);
            delete B[$]
        }
        for ($ in B) {
            var E = B[$],
                D = "set" + $.charAt(0).toUpperCase() + $.substring(1, $.length),
                _ = this[D];
            if (_) _.call(this, E);
            else this[$] = E
        }
        if (C && this.render) this.render(C);
        this.allowLayout = A;
        if (this.doLayout) this.doLayout();
        return this
    },
    fire: function (A, B) {
        if (this.canFire == false) return;
        A = A.toLowerCase();
        var _ = this._events[A];
        if (_) {
            if (!B) B = {};
            if (B && B != this) {
                B.source = B.sender = this;
                if (!B.type) B.type = A
            }
            for (var $ = 0, D = _.length; $ < D; $++) {
                var C = _[$];
                if (C) C[0].apply(C[1], [B])
            }
        }
    },
    on: function (type, fn, scope) {
        if (typeof fn == "string") {
            var f = window[fn];
            if (!f) eval("fn = function(e){" + fn + ".call(this,e)}");
            else fn = f
        }
        if (typeof fn != "function" || !type) return false;
        type = type.toLowerCase();
        var event = this._events[type];
        if (!event) event = this._events[type] = [];
        scope = scope || this;
        if (!this.findListener(type, fn, scope)) event.push([fn, scope]);
        return this
    },
    un: function ($, C, _) {
        if (typeof C != "function") return false;
        $ = $.toLowerCase();
        var A = this._events[$];
        if (A) {
            _ = _ || this;
            var B = this.findListener($, C, _);
            if (B) A.remove(B)
        }
        return this
    },
    findListener: function (A, E, B) {
        A = A.toLowerCase();
        B = B || this;
        var _ = this._events[A];
        if (_) for (var $ = 0, D = _.length; $ < D; $++) {
            var C = _[$];
            if (C[0] === E && C[1] === B) return C
        }
    },
    setId: function ($) {
        if (!$) throw new Error("id not null");
        if (this._idSet) throw new Error("id just set only one");
        mini.unreg(this);
        this.id = $;
        if (this.el) this.el.id = $;
        if (this.textEl) this.textEl.id = $ + "$text";
        if (this.valueEl) this.valueEl.id = $ + "$value";
        this._idSet = true;
        mini.reg(this)
    },
    destroy: function () {
        mini.unreg(this);
        this.fire("destroy")
    }
};

mini.Control = function () {
    this._inited = true;
    mini.Control.superclass.constructor.call(this);
    this._create();
    this.el.uid = this.uid;
    this._initEvents();
    this._doInit();
    if (this._clearBorder) this.el.style.borderWidth = "0";
    this.addCls(this.uiCls);
    this.setWidth(this.width);
    this.setHeight(this.height)
};

mini.extend(mini.Control, mini.Component, {
    jsName: null,
    width: "",
    height: "",
    visible: true,
    readOnly: false,
    enabled: true,
    readOnlyCls: "mini-readonly",
    disabledCls: "mini-disabled",
    _create: function () {
        this.el = document.createElement("div")
    },
    _initEvents: function () {},
    within: function ($) {
        if (mini.isAncestor(this.el, $.target)) return true;
        return false
    },
    name: "",
    setName: function ($) {
        this.name = $
    },
    isAutoHeight: function () {
        var $ = this.el.style.height;
        return $ == "auto" || $ == ""
    },
    isAutoWidth: function () {
        var $ = this.el.style.width;
        return $ == "auto" || $ == ""
    },
    isRender: function ($) {
        return !!(this.el && this.el.parentNode && this.el.parentNode.tagName)
    },
    render: function (_, $) {
        if (typeof _ === "string") if (_ == "#body") _ = document.body;
        else _ = mini.byId(_);
        if (!_) return;
        if (!$) $ = "append";
        $ = $.toLowerCase();
        if ($ == "before") jQuery(_).before(this.el);
        else if ($ == "preend") jQuery(_).preend(this.el);
        else if ($ == "after") jQuery(_).after(this.el);
        else _.appendChild(this.el);
        this.el.id = this.id;
        this.doLayout();
        this.fire("render")
    },
    getEl: function () {
        return this.el
    },
    setJsName: function ($) {
        this.jsName = $;
        window[$] = this
    },
    setWidth: function ($) {
        if (parseInt($) == $) $ += "px";
        this.width = $;
        this.el.style.width = $;
        this.doLayout()
    },
    getWidth: function (_) {
        var $ = _ ? jQuery(this.el).width() : jQuery(this.el).outerWidth();
        if (_ && this.borderEl) {
            var A = mini.getBorders(this.borderEl);
            $ = $ - A.left - A.right
        }
        return $
    },
    setHeight: function ($) {
        if (parseInt($) == $) $ += "px";
        this.height = $;
        this.el.style.height = $;
        this.doLayout()
    },
    getHeight: function (_) {
        var $ = _ ? jQuery(this.el).height() : jQuery(this.el).outerHeight();
        if (_ && this.borderEl) {
            var A = mini.getBorders(this.borderEl);
            $ = $ - A.top - A.bottom
        }
        return $
    },
    getBox: function () {
        return mini.getBox(this.el)
    },
    setBorderStyle: function ($) {
        var _ = this.borderEl || this.el;
        mini.setStyle(_, $);
        this.doLayout()
    },
    _clearBorder: true,
    setStyle: function ($) {
        mini.setStyle(this.el, $);
        if (this._clearBorder) this.el.style.borderWidth = "0";
        this.doLayout()
    },
    setCls: function ($) {
        mini.removeClass(this.el, this.cls);
        mini.addClass(this.el, $);
        this.cls = $
    },
    addCls: function ($) {
        mini.addClass(this.el, $)
    },
    removeCls: function ($) {
        mini.removeClass(this.el, $)
    },
    setReadOnly: function ($) {
        this.readOnly = $;
        if ($) this.addCls(this.readOnlyCls);
        else this.removeCls(this.readOnlyCls)
    },
    getParent: function (A) {
        var $ = document,
            B = this.el.parentNode;
        while (B != $ && B != null) {
                var _ = mini.get(B);
                if (_) {
                    if (!mini.isControl(_)) return null;
                    if (!A || _.uiCls == A) return _
                }
                B = B.parentNode
            }
        return null
    },
    isReadOnly: function () {
        if (this.readOnly || !this.enabled) return true;
        var $ = this.getParent();
        if ($) return $.isReadOnly();
        return false
    },
    setEnabled: function ($) {
        this.enabled = $;
        if ($) this.removeCls(this.disabledCls);
        else this.addCls(this.disabledCls)
    },
    getEnabled: function () {
        return this.enabled
    },
    enable: function () {
        this.setEnabled(true)
    },
    disable: function () {
        this.setEnabled(false)
    },
    displayStyle: "",
    setVisible: function ($) {
        this.visible = $;
        if (this.el) {
            this.el.style.display = $ ? this.displayStyle : "none";
            this.doLayout()
        }
    },
    getVisible: function () {
        return this.visible
    },
    show: function () {
        this.setVisible(true)
    },
    hide: function () {
        this.setVisible(false)
    },
    isDisplay: function () {
        if (mini.WindowVisible == false) return false;
        var $ = document.body,
            _ = this.el;
        while (1) {
                if (_ == null || !_.style) return false;
                if (_ && _.style && _.style.display == "none") return false;
                if (_ == $) return true;
                _ = _.parentNode
            }
        return true
    },
    allowUpdate: true,
    beginUpdate: function () {
        this.allowUpdate = false
    },
    endUpdate: function () {
        this.allowUpdate = true;
        this.doUpdate()
    },
    doUpdate: function () {},
    canLayout: function () {
        if (this.allowLayout == false) return false;
        return this.isDisplay()
    },
    doLayout: function () {},
    layoutChanged: function () {
        if (this.canLayout() == false) return;
        this.doLayout()
    },
    destroy: function (_) {
        if (this.el) {
            mini.clearEvent(this.el);
            if (_ !== false) {
                var $ = this.el.parentNode;
                if ($) $.removeChild(this.el)
            }
        }
        this.borderEl = null;
        this.el = null;
        mini.unreg(this);
        this.fire("destroy")
    },
    focus: function () {
        try {
            this.el.focus()
        } catch ($) {}
    },
    blur: function () {
        try {
            this.el.blur()
        } catch ($) {}
    },
    allowAnim: true,
    setAllowAnim: function ($) {
        this.allowAnim = $
    },
    _getMaskWrapEl: function () {
        return this.el
    },
    mask: function ($) {
        if (typeof $ == "string") $ = {
            html: $
        };
        $ = $ || {};
        $.el = this._getMaskWrapEl();
        if (!$.cls) $.cls = this.maskCls;
        mini.mask($)
    },
    unmask: function () {
        mini.unmask(this._getMaskWrapEl());
        this.isLoading = false
    },
    maskCls: "mini-mask-loading",
    loadingMsg: "Loading...",
    loading: function () {
        this.isLoading = true;
        this.mask(this.loadingMsg)
    },
    contextMenu: null,
    setContextMenu: function ($) {
        var _ = $;
        if (typeof $ == "string") {
            _ = mini.get($);
            if (!_) {
                mini.parse($);
                _ = mini.get($)
            }
        } else if (mini.isArray($)) _ = {
            type: "menu",
            items: $
        };
        else if (!mini.isControl($)) _ = mini.create($);
        if (this.contextMenu !== _) {
            this.contextMenu = _;
            this.contextMenu.owner = this;
            mini.on(this.el, "contextmenu", function (_) {
                var $ = {
                    popupEl: this.el,
                    htmlEvent: _,
                    cancel: false
                };
                this.contextMenu.fire("BeforeOpen", $);
                if ($.cancel == true) return;
                this.contextMenu.fire("opening", $);
                if ($.cancel == true) return;
                this.contextMenu.showAtPos(_.pageX, _.pageY);
                this.contextMenu.fire("Open", $);
                return false
            }, this)
        }
    },
    _afterApply: function ($) {},
    getAttrs: function (C) {
        var I = {},
            F = C.className;
        if (F) I.cls = F;
        mini._ParseString(C, I, ["id", "name", "width", "height", "menu", "borderStyle", "value", "defaultValue", "contextMenu"]);
        mini._ParseBool(C, I, ["visible", "enabled", "readOnly"]);
        if (C.readOnly) I.readOnly = true;
        var E = C.style.cssText;
        if (E) I.style = E;
        if (mini.isIE9) {
                var _ = C.style.background;
                if (_) {
                    if (!I.style) I.style = "";
                    I.style += ";background:" + _
                }
            }
        if (this.style) if (I.style) I.style = this.style + ";" + I.style;
        else I.style = this.style;
        if (this.borderStyle) if (I.borderStyle) I.borderStyle = this.borderStyle + ";" + I.borderStyle;
        else I.borderStyle = this.borderStyle;
        var B = mini._attrs;
        if (B) for (var $ = 0, G = B.length; $ < G; $++) {
                var D = B[$],
                    H = D[0],
                    A = D[1];
                if (!A) A = "string";
                if (A == "string") mini._ParseString(C, I, [H]);
                else if (A == "bool") mini._ParseBool(C, I, [H]);
                else if (A == "int") mini._ParseInt(C, I, [H])
            }
        return I
    }
});

mini._attrs = null;
mini.regHtmlAttr = function (_, $) {
    if (!_) return;
    if (!$) $ = "string";
    if (!mini._attrs) mini._attrs = [];
    mini._attrs.push([_, $])
};
mini.ValidatorBase = function () {
    mini.ValidatorBase.superclass.constructor.call(this)
};
mini.extend(mini.ValidatorBase, mini.Control, {
    required: false,
    requiredErrorText: "not empty",
    requiredCls: "mini-required",
    errorText: "",
    errorCls: "mini-error",
    invalidCls: "mini-invalid",
    errorMode: "icon",
    validateOnChanged: true,
    _IsValid: true,
    validate: function () {
        var $ = {
            value: this.getValue(),
            errorText: "",
            isValid: true
        };
        if (this.required) if (mini.isNull($.value) || $.value === "") {
            $.isValid = false;
            $.errorText = this.requiredErrorText
        }
        this.fire("validation", $);
        this.errorText = $.errorText;
        this.setIsValid($.isValid);
        return this.isValid()
    },
    isValid: function () {
        return this._IsValid
    },
    setIsValid: function ($) {
        this._IsValid = $;
        this.doUpdateValid()
    },
    setErrorMode: function ($) {
        if (!$) $ = "none";
        this.errorMode = $.toLowerCase();
        if (this._IsValid == false) this.doUpdateValid()
    },
    setErrorText: function ($) {
        this.errorText = $;
        if (this._IsValid == false) this.doUpdateValid()
    },
    setRequired: function ($) {
        this.required = $;
        this.doUpdate()
    },
    setRquiredErrorText: function ($) {
        this.requiredErrorText = $
    },
    errorIconEl: null,
    getErrorIconEl: function () {
        return this.errorIconEl
    },
    _RemoveErrorIcon: function () {},
    doUpdateValid: function () {
        this.removeCls(this.errorCls);
        this.removeCls(this.invalidCls);
        this.el.title = "";
        if (this._IsValid == false) switch (this.errorMode) {
        case "icon":
            this.addCls(this.errorCls);
            var $ = this.getErrorIconEl();
            if ($) $.title = this.errorText;
            break;
        case "border":
            this.addCls(this.invalidCls);
            this.el.title = this.errorText;
        default:
            this._RemoveErrorIcon();
            break
        } else this._RemoveErrorIcon()
    },
    _OnValueChanged: function () {
        if (this.validateOnChanged) this.validate();
        this.fire("valuechanged", {
            value: this.getValue()
        })
    },
    onValueChanged: function (_, $) {
        this.on("valuechanged", _, $)
    },
    onValidation: function (_, $) {
        this.on("validation", _, $)
    },
    getAttrs: function (_) {
        var A = mini.ValidatorBase.superclass.getAttrs.call(this, _);
        mini._ParseString(_, A, ["onvaluechanged", "onvalidation", "requiredErrorText", "errorMode"]);
        mini._ParseBool(_, A, ["validateOnChanged"]);
        var $ = _.getAttribute("required");
        if (!$) $ = _.required;
        if ($) A.required = $ != "false" ? true : false;
        return A
    }
});
mini.ListControl = function () {
    this.data = [];
    this.selecteds = [];
    mini.ListControl.superclass.constructor.call(this);
    this.doUpdate()
};
mini.extend(mini.ListControl, mini.ValidatorBase, {
    defaultValue: "",
    value: "",
    valueField: "id",
    textField: "text",
    delimiter: ",",
    data: null,
    url: "",
    itemCls: "mini-list-item",
    itemHoverCls: "mini-list-item-hover",
    itemSelectedCls: "mini-list-item-selected",
    set: function (A) {
        if (typeof A == "string") return this;
        var $ = A.value;
        delete A.value;
        var B = A.url;
        delete A.url;
        var _ = A.data;
        delete A.data;
        mini.ListControl.superclass.set.call(this, A);
        if (!mini.isNull(_)) this.setData(_);
        if (!mini.isNull(B)) this.setUrl(B);
        if (!mini.isNull($)) this.setValue($);
        return this
    },
    uiCls: "mini-list",
    _create: function () {},
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "dblclick", this.__OnDblClick, this);
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            mini.on(this.el, "mouseup", this.__OnMouseUp, this);
            mini.on(this.el, "mousemove", this.__OnMouseMove, this);
            mini.on(this.el, "mouseover", this.__OnMouseOver, this);
            mini.on(this.el, "mouseout", this.__OnMouseOut, this);
            mini.on(this.el, "keydown", this.__OnKeyDown, this);
            mini.on(this.el, "keyup", this.__OnKeyUp, this);
            mini.on(this.el, "contextmenu", this.__OnContextMenu, this)
        }, this)
    },
    name: "",
    setName: function ($) {
        this.name = $;
        if (this.valueEl) mini.setAttr(this.valueEl, "name", this.name)
    },
    getItemByEvent: function (_) {
        var A = mini.findParent(_.target, this.itemCls);
        if (A) {
            var $ = parseInt(mini.getAttr(A, "index"));
            return this.data[$]
        }
    },
    addItemCls: function (_, A) {
        var $ = this.getItemEl(_);
        if ($) mini.addClass($, A)
    },
    removeItemCls: function (_, A) {
        var $ = this.getItemEl(_);
        if ($) mini.removeClass($, A)
    },
    getItemEl: function (_) {
        _ = this.getItem(_);
        var $ = this.data.indexOf(_),
            A = this._createItemId($);
        return document.getElementById(A)
    },
    focusItem: function (_, $) {
        _ = this.getItem(_);
        if (!_) return;
        var A = this.getItemEl(_);
        if ($ && A) this.scrollIntoView(_);
        if (this.focusedItem == _) return;
        this.blurItem();
        this.focusedItem = _;
        mini.addClass(A, this.itemHoverCls)
    },
    blurItem: function () {
        if (!this.focusedItem) return;
        var $ = this.getItemEl(this.focusedItem);
        if ($) mini.removeClass($, this.itemHoverCls);
        this.focusedItem = null
    },
    getFocusedItem: function () {
        return this.focusedItem
    },
    getFocusedIndex: function () {
        return this.data.indexOf(this.focusedItem)
    },
    scrollIntoView: function (_) {
        var $ = this.getItemEl(_);
        mini.scrollIntoView($, this.el, false)
    },
    getItem: function ($) {
        if (typeof $ == "object") return $;
        if (typeof $ == "number") return this.data[$];
        return this.findItems($)[0]
    },
    getCount: function () {
        return this.data.length
    },
    indexOf: function ($) {
        return this.data.indexOf($)
    },
    getAt: function ($) {
        return this.data[$]
    },
    updateItem: function ($, _) {
        $ = this.getItem($);
        if (!$) return;
        mini.copyTo($, _);
        this.doUpdate()
    },
    load: function ($) {
        if (typeof $ == "string") this.setUrl($);
        else this.setData($)
    },
    loadData: function ($) {
        this.setData($)
    },
    setData: function (data) {
        if (typeof data == "string") data = eval(data);
        if (!mini.isArray(data)) data = [];
        this.data = data;
        this._checkSelecteds();
        this.doUpdate()
    },
    getData: function () {
        return this.data.clone()
    },
    setUrl: function ($) {
        if (this.url != $) {
            this.url = $;
            this._doLoad({})
        }
    },
    _doLoad: function (params) {
        try {
            this.url = eval(this.url)
        } catch (e) {}
        var e = {
            url: this.url,
            async: false,
            type: "get",
            params: params,
            cancel: false
        };
        this.fire("beforeload", e);
        if (e.cancel == true) return;
        var sf = this;
        this._ajaxer = jQuery.ajax({
            url: e.url,
            async: e.async,
            data: e.params,
            type: e.type,
            cache: false,
            dataType: "text",
            success: function ($) {
                var _ = null;
                try {
                    _ = mini.decode($)
                } catch (A) {}
                var A = {
                    data: _,
                    cancel: false
                };
                sf.fire("preload", A);
                if (A.cancel == true) return;
                sf.setData(A.data);
                sf.fire("load");
                setTimeout(function () {
                    sf.doLayout()
                }, 100)
            },
            error: function ($, A, _) {
                var B = {
                    xmlHttp: $,
                    errorCode: A
                };
                sf.fire("loaderror", B)
            }
        })
    },
    setValue: function ($) {
        if (mini.isNull($)) $ = "";
        if (this.value !== $) {
            var _ = this.findItems(this.value);
            this.deselects(_);
            this.value = $;
            if (this.valueEl) this.valueEl.value = $;
            _ = this.findItems(this.value);
            this.selects(_)
        }
    },
    getValue: function () {
        return this.value
    },
    getFormValue: function () {
        return this.value
    },
    setValueField: function ($) {
        this.valueField = $
    },
    setTextField: function ($) {
        this.textField = $
    },
    getItemValue: function ($) {
        return String($[this.valueField])
    },
    getItemText: function ($) {
        var _ = $[this.textField];
        return mini.isNull(_) ? "" : String(_)
    },
    getValueAndText: function (A) {
        if (mini.isNull(A)) A = [];
        if (!mini.isArray(A)) A = this.findItems(A);
        var B = [],
            C = [];
        for (var _ = 0, D = A.length; _ < D; _++) {
                var $ = A[_];
                if ($) {
                    B.push(this.getItemValue($));
                    C.push(this.getItemText($))
                }
            }
        return [B.join(this.delimiter), C.join(this.delimiter)]
    },
    findItems: function (B) {
        if (mini.isNull(B) || B === "") return [];
        var E = String(B).split(this.delimiter),
            D = this.data,
            H = {};
        for (var F = 0, A = D.length; F < A; F++) {
                var _ = D[F],
                    I = _[this.valueField];
                H[I] = _
            }
        var C = [];
        for (var $ = 0, G = E.length; $ < G; $++) {
                I = E[$],
                _ = H[I];
                if (_) C.push(_)
            }
        return C
    },
    selected: null,
    selecteds: [],
    multiSelect: false,
    _checkSelecteds: function () {
        for (var _ = this.selecteds.length - 1; _ >= 0; _--) {
            var $ = this.selecteds[_];
            if (this.data.indexOf($) == -1) this.selecteds.removeAt(_)
        }
        var A = this.getValueAndText(this.selecteds);
        this.value = A[0];
        if (this.valueEl) this.valueEl.value = this.value
    },
    setMultiSelect: function ($) {
        this.multiSelect = $
    },
    isSelected: function ($) {
        if (!$) return false;
        return this.selecteds.indexOf($) != -1
    },
    getSelecteds: function () {
        return this.selecteds.clone()
    },
    setSelected: function ($) {
        if ($) {
            this.selected = $;
            this.select($)
        }
    },
    getSelected: function () {
        return this.selected
    },
    select: function ($) {
        $ = this.getItem($);
        if (!$) return;
        if (this.isSelected($)) return;
        this.selects([$])
    },
    deselect: function ($) {
        $ = this.getItem($);
        if (!$) return;
        if (!this.isSelected($)) return;
        this.deselects([$])
    },
    selectAll: function () {
        var $ = this.data.clone();
        this.selects($)
    },
    deselectAll: function () {
        this.deselects(this.selecteds)
    },
    clearSelect: function () {
        this.deselectAll()
    },
    selects: function (A) {
        if (!A || A.length == 0) return;
        A = A.clone();
        for (var _ = 0, B = A.length; _ < B; _++) {
            var $ = A[_];
            if (!this.isSelected($)) this.selecteds.push($)
        }
        this._doSelects()
    },
    deselects: function (A) {
        if (!A || A.length == 0) return;
        A = A.clone();
        for (var _ = A.length - 1; _ >= 0; _--) {
            var $ = A[_];
            if (this.isSelected($)) this.selecteds.remove($)
        }
        this._doSelects()
    },
    _doSelects: function () {
        var C = this.getValueAndText(this.selecteds);
        this.value = C[0];
        if (this.valueEl) this.valueEl.value = this.value;
        for (var A = 0, D = this.data.length; A < D; A++) {
            var _ = this.data[A],
                F = this.isSelected(_);
            if (F) this.addItemCls(_, this.itemSelectedCls);
            else this.removeItemCls(_, this.itemSelectedCls);
            var $ = this.data.indexOf(_),
                E = this._createCheckId($),
                B = document.getElementById(E);
            if (B) B.checked = !! F
        }
    },
    _OnSelectionChanged: function (_, B) {
        var $ = this.getValueAndText(this.selecteds);
        this.value = $[0];
        if (this.valueEl) this.valueEl.value = this.value;
        var A = {
            selecteds: this.getSelecteds(),
            selected: this.getSelected(),
            value: this.getValue()
        };
        this.fire("SelectionChanged", A)
    },
    _createCheckId: function ($) {
        return this.uid + "$ck$" + $
    },
    _createItemId: function ($) {
        return this.uid + "$" + $
    },
    __OnClick: function ($) {
        this._fireEvent($, "Click")
    },
    __OnDblClick: function ($) {
        this._fireEvent($, "Dblclick")
    },
    __OnMouseDown: function ($) {
        this._fireEvent($, "MouseDown")
    },
    __OnMouseUp: function ($) {
        this._fireEvent($, "MouseUp")
    },
    __OnMouseMove: function ($) {
        this._fireEvent($, "MouseMove")
    },
    __OnMouseOver: function ($) {
        this._fireEvent($, "MouseOver")
    },
    __OnMouseOut: function ($) {
        this._fireEvent($, "MouseOut")
    },
    __OnKeyDown: function ($) {
        this._fireEvent($, "KeyDown")
    },
    __OnKeyUp: function ($) {
        this._fireEvent($, "KeyUp")
    },
    __OnContextMenu: function ($) {
        this._fireEvent($, "ContextMenu")
    },
    _fireEvent: function (C, A) {
        if (!this.enabled) return;
        var $ = this.getItemByEvent(C);
        if (!$) return;
        var B = this["_OnItem" + A];
        if (B) B.call(this, $, C);
        else {
            var _ = {
                item: $,
                htmlEvent: C
            };
            this.fire("item" + A, _)
        }
    },
    _OnItemClick: function ($, A) {
        if ($.enabled === false) return;
        var _ = this.getValue();
        if (this.multiSelect) {
            if (this.isSelected($)) {
                this.deselect($);
                if (this.selected == $) this.selected = null
            } else {
                this.select($);
                this.selected = $
            }
            this._OnSelectionChanged()
        } else if (!this.isSelected($)) {
            this.deselectAll();
            this.select($);
            this.selected = $;
            this._OnSelectionChanged()
        }
        if (_ != this.getValue()) this._OnValueChanged();
        var A = {
            item: $,
            htmlEvent: A
        };
        this.fire("itemclick", A)
    },
    blurOnOut: true,
    _OnItemMouseOut: function ($, _) {
        if (!this.enabled) return;
        if (this.blurOnOut) this.blurItem();
        var _ = {
            item: $,
            htmlEvent: _
        };
        this.fire("itemmousedown", _)
    },
    _OnItemMouseMove: function ($, _) {
        if (!this.enabled || $.enabled === false) return;
        this.focusItem($);
        var _ = {
            item: $,
            htmlEvent: _
        };
        this.fire("itemmousemove", _)
    },
    onItemClick: function (_, $) {
        this.on("itemclick", _, $)
    },
    onItemMouseDown: function (_, $) {
        this.on("itemmousedown", _, $)
    },
    onBeforeLoad: function (_, $) {
        this.on("beforeload", _, $)
    },
    onLoad: function (_, $) {
        this.on("load", _, $)
    },
    onLoadError: function (_, $) {
        this.on("loaderror", _, $)
    },
    onPreLoad: function (_, $) {
        this.on("preload", _, $)
    },
    getAttrs: function (C) {
        var G = mini.ListControl.superclass.getAttrs.call(this, C);
        mini._ParseString(C, G, ["url", "data", "value", "textField", "valueField", "onitemclick", "onitemmousemove", "onselectionchanged", "onbeforeload", "onload", "onloaderror", "ondataload"]);
        mini._ParseBool(C, G, ["multiSelect"]);
        var E = G.valueField || this.valueField,
            B = G.textField || this.textField;
        if (C.nodeName.toLowerCase() == "select") {
                var D = [];
                for (var A = 0, F = C.length; A < F; A++) {
                    var _ = C.options[A],
                        $ = {};
                    $[B] = _.text;
                    $[E] = _.value;
                    D.push($)
                }
                if (D.length > 0) G.data = D
            }
        return G
    }
});
mini._Layouts = {};
mini.layout = function ($) {
    function _(B) {
        var C = mini.get(B);
        if (C) {
            if (C.doLayout) if (!mini._Layouts[C.uid]) {
                mini._Layouts[C.uid] = C;
                C.doLayout(false);
                delete mini._Layouts[C.uid]
            }
        } else {
            var D = B.childNodes;
            if (D) for (var $ = 0, E = D.length; $ < E; $++) {
                var A = D[$];
                _(A)
            }
        }
    }
    if (!$) $ = document.body;
    _($)
};
mini.applyTo = function (_) {
    _ = mini.byId(_);
    if (!_) return this;
    if (mini.get(_)) throw new Error("not applyTo a mini control");
    var $ = this.getAttrs(_);
    delete $._applyTo;
    if (mini.isNull($.defaultValue) && !mini.isNull($.value)) $.defaultValue = $.value;
    var A = _.parentNode;
    if (A) A.replaceChild(this.el, _);
    this.set($);
    this._afterApply(_);
    return this
};
mini._doParse = function (G) {
    var F = G.nodeName.toLowerCase();
    if (!F) return;
    var B = G.className;
    if (B) {
        var $ = mini.get(G);
        if (!$) {
            var H = B.split(" ");
            for (var E = 0, C = H.length; E < C; E++) {
                var A = H[E],
                    I = mini.getClassByUICls(A);
                if (I) {
                        var D = new I();
                        mini.applyTo.call(D, G);
                        G = D.el;
                        break
                    }
            }
        }
    }
    if (F == "select" || mini.hasClass(G, "mini-menu") || mini.hasClass(G, "mini-datagrid") || mini.hasClass(G, "mini-treegrid") || mini.hasClass(G, "mini-tree") || mini.hasClass(G, "mini-button") || mini.hasClass(G, "mini-textbox") || mini.hasClass(G, "mini-buttonedit")) return;
    var J = mini.getChildNodes(G, true);
    for (E = 0, C = J.length; E < C; E++) {
        var _ = J[E];
        if (_.nodeType == 1) if (_.parentNode == G) mini._doParse(_)
    }
};
mini._Removes = [];
mini.parse = function ($) {
    if (typeof $ == "string") {
        var _ = $;
        $ = mini.byId(_);
        if (!$) $ = document.body
    }
    if ($ && !mini.isElement($)) $ = $.el;
    if (!$) $ = document.body;
    mini._doParse($);
    mini.layout()
};
mini._ParseString = function (B, A, F) {
    var E = jQuery(B);
    for (var $ = 0, D = F.length; $ < D; $++) {
        var C = F[$],
            _ = E.attr(C);
        if (_) A[C] = _
    }
};
mini._ParseBool = function (B, A, F) {
    var E = jQuery(B);
    for (var $ = 0, D = F.length; $ < D; $++) {
        var C = F[$],
            _ = E.attr(C);
        if (_) A[C] = _ == "true" ? true : false
    }
};
mini._ParseInt = function (B, A, F) {
    var E = jQuery(B);
    for (var $ = 0, D = F.length; $ < D; $++) {
        var C = F[$],
            _ = parseInt(E.attr(C));
        if (!isNaN(_)) A[C] = _
    }
};
mini._ParseColumns = function (N) {
    var G = [],
        O = mini.getChildNodes(N);
    for (var M = 0, H = O.length; M < H; M++) {
            var C = O[M],
                T = jQuery(C),
                D = {},
                J = null,
                K = null,
                _ = mini.getChildNodes(C);
            if (_) for (var $ = 0, P = _.length; $ < P; $++) {
                    var B = _[$],
                        A = jQuery(B).attr("property");
                    if (!A) continue;
                    A = A.toLowerCase();
                    if (A == "columns") {
                            D.columns = mini._ParseColumns(B);
                            jQuery(B).remove()
                        }
                    if (A == "editor" || A == "filter") {
                            var F = B.className,
                                R = F.split(" ");
                            for (var L = 0, S = R.length; L < S; L++) {
                                    var E = R[L],
                                        Q = mini.getClassByUICls(E);
                                    if (Q) {
                                            var I = new Q();
                                            if (A == "filter") {
                                                K = I.getAttrs(B);
                                                K.type = I.type
                                            } else {
                                                J = I.getAttrs(B);
                                                J.type = I.type
                                            }
                                            break
                                        }
                                }
                            jQuery(B).remove()
                        }
                }
            D.header = C.innerHTML;
            mini._ParseString(C, D, ["name", "header", "field", "editor", "filter", "renderer", "width", "type", "renderer", "headerAlign", "align", "headerCls", "cellCls", "headerStyle", "cellStyle", "displayField", "dateFormat", "listFormat", "mapFormat", "trueValue", "falseValue"]);
            mini._ParseBool(C, D, ["visible", "readOnly", "allowSort", "allowReisze", "allowMove", "allowDrag"]);
            if (J) D.editor = J;
            if (K) D.filter = K;
            G.push(D)
        }
    return G
};
mini._Columns = {};
mini.getColumn = function ($) {
    var _ = mini._Columns[$.toLowerCase()];
    if (!_) return {};
    return _()
};
mini.IndexColumn = function ($) {
    return mini.copyTo({
        width: 30,
        cellCls: "",
        align: "center",
        draggable: false,
        renderer: function (_) {
            var $ = _.sender;
            if (this.draggable) {
                if (!_.cellStyle) _.cellStyle = "";
                _.cellStyle += ";cursor:move;"
            }
            return ($.pageIndex * $.pageSize) + _.rowIndex + 1
        }
    }, $)
};
mini._Columns["indexcolumn"] = mini.IndexColumn;
mini.CheckColumn = function ($) {
    return mini.copyTo({
        width: 30,
        cellCls: "mini-checkcolumn",
        headerCls: "mini-checkcolumn",
        multiSelect: true,
        header: function ($) {
            var _ = this.uid + "checkall";
            return "<input type=\"checkbox\" id=\"" + _ + "\" />"
        },
        getCheckId: function ($) {
            return this._gridUID + "$checkcolumn$" + $[this._rowIdField]
        },
        renderer: function (C) {
            var B = this.getCheckId(C.record),
                _ = C.sender.isSelected(C.record),
                A = "checkbox",
                $ = C.sender;
            if ($.multiSelect == false) A = "radio";
            return "<input type=\"" + A + "\" id=\"" + B + "\" " + (_ ? "checked" : "") + " hidefocus style=\"outline:none;\" onclick=\"return false\"/>"
        },
        onHeaderCellClick: function (B) {
            var $ = B.sender,
                A = $.uid + "checkall",
                _ = document.getElementById(A);
            if (_) if ($.multiSelect) {
                    if (_.checked) $.selectAll();
                    else $.deselectAll()
                } else {
                    $.deselectAll();
                    if (_.checked) $.select(0)
                }
        },
        onSelectionChanged: function (G) {
            var $ = G.sender,
                C = $.toArray();
            for (var A = 0, D = C.length; A < D; A++) {
                    var _ = C[A],
                        F = $.isSelected(_),
                        E = $.uid + "$checkcolumn$" + _[$._rowIdField],
                        B = document.getElementById(E);
                    if (B) B.checked = F
                }
        }
    }, $)
};
mini._Columns["checkcolumn"] = mini.CheckColumn;
mini.ExpandColumn = function ($) {
    return mini.copyTo({
        width: 30,
        cellCls: "",
        align: "center",
        draggable: false,
        cellStyle: "padding:0",
        renderer: function ($) {
            return "<a class=\"mini-grid-ecIcon\" href=\"javascript:#\" onclick=\"return false\"></a>"
        },
        onCellClick: function (A) {
            var $ = A.sender;
            if (A.column == this) if (mini.findParent(A.htmlEvent.target, "mini-grid-ecIcon")) {
                var _ = $.isShowRowDetail(A.record);
                $.hideAllRowDetail();
                if (_);
                else $.showRowDetail(A.record)
            }
        }
    }, $)
};
mini._Columns["expandcolumn"] = mini.ExpandColumn;
mini.CheckBoxColumn = function ($) {
    return mini.copyTo({
        header: "#",
        headerAlign: "center",
        cellCls: "mini-checkcolumn",
        trueValue: true,
        falseValue: false,
        readOnly: false,
        getCheckId: function ($) {
            return this._gridUID + "$checkbox$" + $._id
        },
        renderer: function (B) {
            var A = this.getCheckId(B.record),
                _ = B.record[B.field] == this.trueValue ? true : false,
                $ = "checkbox";
            return "<input type=\"" + $ + "\" id=\"" + A + "\" " + (_ ? "checked" : "") + " hidefocus style=\"outline:none;\" onclick=\"return false;\"/>"
        },
        init: function ($) {
            this.grid = $;
            $.on("cellclick", function (C) {
                if (C.column == this) {
                    if (this.readOnly) return;
                    var B = this.getCheckId(C.record),
                        A = C.htmlEvent.target;
                    if (A.id == B) {
                            C.cancel = false;
                            C.value = C.record[C.field];
                            $.fire("cellbeginedit", C);
                            if (C.cancel !== true) {
                                var _ = C.record[C.field] == this.trueValue ? this.falseValue : this.trueValue;
                                if ($._OnCellCommitEdit) $._OnCellCommitEdit(C.record, C.column, _)
                            }
                        }
                }
            }, this);
            var _ = parseInt(this.trueValue),
                A = parseInt(this.falseValue);
            if (!isNaN(_)) this.trueValue = _;
            if (!isNaN(A)) this.falseValue = A
        }
    }, $)
};
mini._Columns["checkboxcolumn"] = mini.CheckBoxColumn;
mini._GridResizer = function ($) {
    this.owner = $;
    mini.on(this.owner.el, "mousedown", this.__OnMouseDown, this)
};
mini._GridResizer.prototype = {
    __OnMouseDown: function (_) {
        if (mini.hasClass(_.target, "mini-grid-resizeGrid") && this.owner.allowResize) {
            var $ = this._getResizeDrag();
            $.start(_)
        }
    },
    _getResizeDrag: function () {
        if (!this._resizeDragger) this._resizeDragger = new mini.Drag({
            capture: true,
            onStart: mini.createDelegate(this._OnDragStart, this),
            onMove: mini.createDelegate(this._OnDragMove, this),
            onStop: mini.createDelegate(this._OnDragStop, this)
        });
        return this._resizeDragger
    },
    _OnDragStart: function ($) {
        this.proxy = mini.append(document.body, "<div class=\"mini-grid-resizeProxy\"></div>");
        this.proxy.style.cursor = "se-resize";
        this.elBox = mini.getBox(this.owner.el);
        mini.setBox(this.proxy, this.elBox)
    },
    _OnDragMove: function (B) {
        var $ = this.owner,
            D = B.now[0] - B.init[0],
            _ = B.now[1] - B.init[1],
            A = this.elBox.width + D,
            C = this.elBox.height + _;
        if (A < $.minWidth) A = $.minWidth;
        if (C < $.minHeight) C = $.minHeight;
        if (A > $.maxWidth) A = $.maxWidth;
        if (C > $.maxHeight) C = $.maxHeight;
        mini.setSize(this.proxy, A, C)
    },
    _OnDragStop: function ($) {
        var _ = mini.getBox(this.proxy);
        jQuery(this.proxy).remove();
        this.proxy = null;
        this.elBox = null;
        this.owner.setWidth(_.width);
        this.owner.setHeight(_.height)
    }
};
mini.__IFrameCreateCount = 1;
mini.createIFrame = function (D, C, G) {
    var F = "__iframe_onload" + mini.__IFrameCreateCount++;
    window[F] = _;
    var E = "<iframe src=\"" + D + "\" style=\"width:100%;height:100%;\" onload=\"" + F + "()\" frameborder=\"0\"></iframe>",
        $ = document.createElement("div"),
        B = mini.append($, E),
        A = true;

    function _() {
            setTimeout(function () {
                if (C) C(B, A);
                A = false
            }, 1)
        }
    B._ondestroy = function () {
            if (G) G(B);
            window[F] = mini.emptyFn;
            B.src = "";
            B._ondestroy = null;
            B = null
        };
    return B
};
mini._doOpen = function (C) {
    if (typeof C == "string") C = {
        url: C
    };
    C = mini.copyTo({
        width: 700,
        height: 400,
        allowResize: true,
        allowModal: true,
        title: "",
        titleIcon: "",
        iconCls: "",
        iconStyle: "",
        bodyStyle: "padding: 0",
        url: "",
        showCloseButton: true,
        showFooter: false
    }, C);
    C.closeAction = "destroy";
    var $ = C.onload;
    delete C.onload;
    var A = C.ondestory;
    delete C.ondestory;
    var _ = C.url;
    delete C.url;
    var B = new mini.Window();
    B.set(C);
    B.load(_, $, A);
    B.show();
    return B
};
mini.open = function ($) {
    return mini._doOpen($)
};
mini.openTop = function ($) {
    if (top && top != window) return top.mini.open($);
    else return mini._doOpen($)
};
mini.getData = function (C, A, E, D, _) {
    var $ = mini.getText(C, A, E, D, _),
        B = mini.decode($);
    return B
};
mini.getText = function (B, A, D, C, _) {
    var $ = null;
    jQuery.ajax({
        url: B,
        data: A,
        async: false,
        type: _ ? _ : "get",
        cache: false,
        dataType: "text",
        success: function (A, _) {
            $ = A
        },
        error: C
    });
    return $
};
if (!window.mini_RootPath) mini_RootPath = "/";
mini_CreateJSPath = function () {
    var _ = document.getElementsByTagName("script"),
        C = "";
    for (var $ = 0, D = _.length; $ < D; $++) {
            var A = _[$];
            try {
                var B = A.src;
                if (B.indexOf("miniui.js") != -1) {
                    var E = B.split("miniui.js");
                    C = E[0];
                    break
                }
            } catch (F) {}
        }
    return C
};
if (!window.mini_JSPath) mini_JSPath = mini_CreateJSPath();
mini.update = function (A, _) {
    if (typeof A == "string") A = {
        url: A
    };
    if (_) A.el = _;
    A = mini.copyTo({
        el: null,
        url: "",
        async: false,
        type: "get",
        cache: false,
        dataType: "text",
        success: function (_) {
            var B = A.el;
            if (B) {
                $(B).html(_);
                mini.parse(B)
            }
        },
        error: function ($, A, _) {}
    }, A);
    jQuery.ajax(A)
};
mini.createSingle = function ($) {
    if (typeof $ == "string") $ = mini.getClass($);
    if (typeof $ != "function") return;
    var _ = $.single;
    if (!_) _ = $.single = new $();
    return _
};
mini.createTopSingle = function ($) {
    if (typeof $ != "function") return;
    var _ = $.prototype.type;
    if (top && top != window && top.mini && top.mini.getClass(_)) return top.mini.createSingle(_);
    else return mini.createSingle($)
};
mini.emptyFn = function () {};
mini.Drag = function ($) {
    mini.copyTo(this, $)
};
mini.Drag.prototype = {
    onStart: mini.emptyFn,
    onMove: mini.emptyFn,
    onStop: mini.emptyFn,
    capture: false,
    fps: 20,
    event: null,
    delay: 80,
    start: function (_) {
        _.preventDefault();
        if (_) this.event = _;
        this.now = this.init = [this.event.pageX, this.event.pageY];
        var $ = document;
        mini.on($, "mousemove", this.move, this);
        mini.on($, "mouseup", this.stop, this);
        mini.on($, "contextmenu", this.contextmenu, this);
        if (this.context) mini.on(this.context, "contextmenu", this.contextmenu, this);
        this.trigger = _.target;
        mini.selectable(this.trigger, false);
        mini.selectable($.body, false);
        if (this.capture) if (mini.isIE) this.trigger.setCapture(true);
        else if (document.captureEvents) document.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP | Event.MOUSEDOWN);
        this.started = false;
        this.startTime = new Date()
    },
    contextmenu: function ($) {
        if (this.context) mini.un(this.context, "contextmenu", this.contextmenu, this);
        mini.un(document, "contextmenu", this.contextmenu, this);
        $.preventDefault();
        $.stopPropagation()
    },
    move: function (_) {
        if (this.delay) if (new Date() - this.startTime < this.delay) return;
        if (!this.started) {
            this.started = true;
            this.onStart(this)
        }
        var $ = this;
        if (!this.timer) {
            $.now = [_.pageX, _.pageY];
            $.event = _;
            $.onMove($);
            $.timer = null
        }
    },
    stop: function (B) {
        this.now = [B.pageX, B.pageY];
        this.event = B;
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null
        }
        var A = document;
        mini.selectable(this.trigger, true);
        mini.selectable(A.body, true);
        if (this.capture) if (mini.isIE) this.trigger.releaseCapture();
        else if (document.captureEvents) document.releaseEvents(Event.MOUSEMOVE | Event.MOUSEUP | Event.MOUSEDOWN);
        var _ = mini.MouseButton.Right != B.button;
        if (_ == false) B.preventDefault();
        mini.un(A, "mousemove", this.move, this);
        mini.un(A, "mouseup", this.stop, this);
        var $ = this;
        setTimeout(function () {
            mini.un(document, "contextmenu", $.contextmenu, $);
            if ($.context) mini.un($.context, "contextmenu", $.contextmenu, $)
        }, 1);
        if (this.started) this.onStop(this, _)
    }
};
mini.JSON = new(function () {
    var sb = [],
        useHasOwn = !! {}.hasOwnProperty,
        replaceString = function ($, A) {
            var _ = m[A];
            if (_) return _;
            _ = A.charCodeAt();
            return "\\u00" + Math.floor(_ / 16).toString(16) + (_ % 16).toString(16)
        },
        doEncode = function ($) {
            if ($ === null) {
                sb[sb.length] = "null";
                return
            }
            var A = typeof $;
            if (A == "undefined") {
                sb[sb.length] = "null";
                return
            } else if ($.push) {
                sb[sb.length] = "[";
                var D, _, C = $.length,
                    E;
                for (_ = 0; _ < C; _ += 1) {
                        E = $[_];
                        A = typeof E;
                        if (A == "undefined" || A == "function" || A == "unknown");
                        else {
                            if (D) sb[sb.length] = ",";
                            doEncode(E);
                            D = true
                        }
                    }
                sb[sb.length] = "]";
                return
            } else if ($.getFullYear) {
                var B;
                sb[sb.length] = "\"";
                sb[sb.length] = $.getFullYear();
                sb[sb.length] = "-";
                B = $.getMonth() + 1;
                sb[sb.length] = B < 10 ? "0" + B : B;
                sb[sb.length] = "-";
                B = $.getDate();
                sb[sb.length] = B < 10 ? "0" + B : B;
                sb[sb.length] = "T";
                B = $.getHours();
                sb[sb.length] = B < 10 ? "0" + B : B;
                sb[sb.length] = ":";
                B = $.getMinutes();
                sb[sb.length] = B < 10 ? "0" + B : B;
                sb[sb.length] = ":";
                B = $.getSeconds();
                sb[sb.length] = B < 10 ? "0" + B : B;
                sb[sb.length] = "\"";
                return
            } else if (A == "string") {
                if (strReg1.test($)) {
                    sb[sb.length] = "\"";
                    sb[sb.length] = $.replace(strReg2, replaceString);
                    sb[sb.length] = "\"";
                    return
                }
                sb[sb.length] = "\"" + $ + "\"";
                return
            } else if (A == "number") {
                sb[sb.length] = $;
                return
            } else if (A == "boolean") {
                sb[sb.length] = String($);
                return
            } else {
                sb[sb.length] = "{";
                D,
                _,
                E;
                for (_ in $) if (!useHasOwn || $.hasOwnProperty(_)) {
                    E = $[_];
                    A = typeof E;
                    if (A == "undefined" || A == "function" || A == "unknown");
                    else {
                        if (D) sb[sb.length] = ",";
                        doEncode(_);
                        sb[sb.length] = ":";
                        doEncode(E);
                        D = true
                    }
                }
                sb[sb.length] = "}";
                return
            }
        },
        m = {
            "\b": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            "\"": "\\\"",
            "\\": "\\\\"
        },
        strReg1 = /["\\\x00-\x1f]/,
        strReg2 = /([\x00-\x1f\\"])/g;
    this.encode = function () {
            var $;
            return function ($, _) {
                sb = [];
                doEncode($);
                return sb.join("")
            }
        }();
    this.decode = function () {
            var re = /[\"\'](\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})[\"\']/g;
            return function (json) {
                if (json === "" || json === null || json === undefined) return json;
                json = json.replace(re, "new Date($1,$2-1,$3,$4,$5,$6)");
                var s = eval("(" + json + ")");
                return s
            }
        }()
})();
mini.encode = mini.JSON.encode;
mini.decode = mini.JSON.decode;
mini.clone = function ($) {
    if ($ === null || $ === undefined) return $;
    var B = mini.encode($),
        _ = mini.decode(B);

    function A(B) {
            for (var _ = 0, D = B.length; _ < D; _++) {
                var $ = B[_];
                delete $._state;
                delete $._id;
                delete $._pid;
                for (var C in $) {
                    var E = $[C];
                    if (E instanceof Array) A(E)
                }
            }
        }
    A(_ instanceof Array ? _ : [_]);
    return _
};
var DAY_MS = 86400000,
    HOUR_MS = 3600000,
    MINUTE_MS = 60000;
mini.copyTo(mini, {
        clearTime: function ($) {
            if (!$) return null;
            return new Date($.getFullYear(), $.getMonth(), $.getDate())
        },
        maxTime: function ($) {
            if (!$) return null;
            return new Date($.getFullYear(), $.getMonth(), $.getDate(), 23, 59, 59)
        },
        cloneDate: function ($) {
            if (!$) return null;
            return new Date($.getTime())
        },
        addDate: function (A, $, _) {
            if (!_) _ = "D";
            A = new Date(A.getTime());
            switch (_.toUpperCase()) {
            case "Y":
                A.setFullYear(A.getFullYear() + $);
                break;
            case "MO":
                A.setMonth(A.getMonth() + $);
                break;
            case "D":
                A.setDate(A.getDate() + $);
                break;
            case "H":
                A.setHours(A.getHours() + $);
                break;
            case "M":
                A.setMinutes(A.getMinutes() + $);
                break;
            case "S":
                A.setSeconds(A.getSeconds() + $);
                break;
            case "MS":
                A.setMilliseconds(A.getMilliseconds() + $);
                break
            }
            return A
        },
        getWeek: function (D, $, _) {
            $ += 1;
            var E = Math.floor((14 - ($)) / 12),
                G = D + 4800 - E,
                A = ($) + (12 * E) - 3,
                C = _ + Math.floor(((153 * A) + 2) / 5) + (365 * G) + Math.floor(G / 4) - Math.floor(G / 100) + Math.floor(G / 400) - 32045,
                F = (C + 31741 - (C % 7)) % 146097 % 36524 % 1461,
                H = Math.floor(F / 1460),
                B = ((F - H) % 365) + H;
            NumberOfWeek = Math.floor(B / 7) + 1;
            return NumberOfWeek
        },
        getWeekStartDate: function (C, B) {
            if (!B) B = 0;
            if (B > 6 || B < 0) throw new Error("out of weekday");
            var A = C.getDay(),
                _ = B - A;
            if (A < B) _ -= 7;
            var $ = new Date(C.getFullYear(), C.getMonth(), C.getDate() + _);
            return $
        },
        getShortWeek: function (_) {
            var $ = this.dateInfo.daysShort;
            return $[_]
        },
        getLongWeek: function (_) {
            var $ = this.dateInfo.daysLong;
            return $[_]
        },
        getShortMonth: function ($) {
            var _ = this.dateInfo.monthsShort;
            return _[$]
        },
        getLongMonth: function ($) {
            var _ = this.dateInfo.monthsLong;
            return _[$]
        },
        dateInfo: {
            monthsLong: ["January", "Febraury", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            daysLong: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            daysShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            quarterLong: ["Q1", "Q2", "Q3", "Q4"],
            quarterShort: ["Q1", "Q2", "Q3", "Q4"],
            halfYearLong: ["first half", "second half"],
            patterns: {
                "d": "M/d/yyyy",
                "D": "dddd, MMMM dd, yyyy",
                "f": "dddd, MMMM dd, yyyy H:mm tt",
                "F": "dddd, MMMM dd, yyyy H:mm:ss tt",
                "g": "M/d/yyyy H:mm tt",
                "G": "M/d/yyyy H:mm:ss tt",
                "m": "MMMM dd",
                "o": "yyyy-MM-ddTHH:mm:ss.fff",
                "s": "yyyy-MM-ddTHH:mm:ss",
                "t": "H:mm tt",
                "T": "H:mm:ss tt",
                "U": "dddd, MMMM dd, yyyy HH:mm:ss tt",
                "y": "MMM, yyyy"
            },
            tt: {
                "AM": "AM",
                "PM": "PM"
            },
            ten: {
                "Early": "Early",
                "Mid": "Mid",
                "Late": "Late"
            },
            today: "Today",
            clockType: 24
        }
    });
Date.prototype.getHalfYear = function () {
        if (!this.getMonth) return null;
        var $ = this.getMonth();
        if ($ < 6) return 0;
        return 1
    };
Date.prototype.getQuarter = function () {
        if (!this.getMonth) return null;
        var $ = this.getMonth();
        if ($ < 3) return 0;
        if ($ < 6) return 1;
        if ($ < 9) return 2;
        return 3
    };
mini.formatDate = function (C, O, F) {
        if (!C || !C.getFullYear || isNaN(C)) return "";
        var G = C.toString(),
            B = mini.dateInfo;
        if (!B) B = mini.dateInfo;
        if (typeof(B) !== "undefined") {
                var M = typeof(B.patterns[O]) !== "undefined" ? B.patterns[O] : O,
                    J = C.getFullYear();
                G = M.replace(/yyyy/g, J);
                G = G.replace(/yy/g, (J + "").substring(2));
                var L = C.getHalfYear();
                G = G.replace(/hy/g, B.halfYearLong[L]);
                var I = C.getQuarter();
                G = G.replace(/Q/g, B.quarterLong[I]);
                G = G.replace(/q/g, B.quarterShort[I]);
                var $ = C.getMonth();
                G = G.replace(/MMMM/g, B.monthsLong[$].escapeDateTimeTokens());
                G = G.replace(/MMM/g, B.monthsShort[$].escapeDateTimeTokens());
                G = G.replace(/MM/g, $ + 1 < 10 ? "0" + ($ + 1) : $ + 1);
                G = G.replace(/(\\)?M/g, function (A, _) {
                        return _ ? A : $ + 1
                    });
                var N = C.getDay();
                G = G.replace(/dddd/g, B.daysLong[N].escapeDateTimeTokens());
                G = G.replace(/ddd/g, B.daysShort[N].escapeDateTimeTokens());
                var _ = C.getDate();
                G = G.replace(/dd/g, _ < 10 ? "0" + _ : _);
                G = G.replace(/(\\)?d/g, function (A, $) {
                        return $ ? A : _
                    });
                var H = C.getHours(),
                    A = H > 12 ? H - 12 : H;
                if (B.clockType == 12) if (H > 12) H -= 12;
                G = G.replace(/HH/g, H < 10 ? "0" + H : H);
                G = G.replace(/(\\)?H/g, function (_, $) {
                        return $ ? _ : H
                    });
                G = G.replace(/hh/g, A < 10 ? "0" + A : A);
                G = G.replace(/(\\)?h/g, function (_, $) {
                        return $ ? _ : A
                    });
                var D = C.getMinutes();
                G = G.replace(/mm/g, D < 10 ? "0" + D : D);
                G = G.replace(/(\\)?m/g, function (_, $) {
                        return $ ? _ : D
                    });
                var K = C.getSeconds();
                G = G.replace(/ss/g, K < 10 ? "0" + K : K);
                G = G.replace(/(\\)?s/g, function (_, $) {
                        return $ ? _ : K
                    });
                G = G.replace(/fff/g, C.getMilliseconds());
                G = G.replace(/tt/g, C.getHours() > 12 || C.getHours() == 0 ? B.tt["PM"] : B.tt["AM"]);
                var C = C.getDate(),
                    E = "";
                if (C <= 10) E = B.ten["Early"];
                else if (C <= 20) E = B.ten["Mid"];
                else E = B.ten["Late"];
                G = G.replace(/ten/g, E)
            }
        return G.replace(/\\/g, "")
    };
String.prototype.escapeDateTimeTokens = function () {
        return this.replace(/([dMyHmsft])/g, "\\$1")
    };
mini.fixDate = function ($, _) {
        if (+$) while ($.getDate() != _.getDate()) $.setTime(+$ + ($ < _ ? 1 : -1) * HOUR_MS)
    };
mini.parseDate = function (A, _) {
        if (typeof A == "object") return isNaN(A) ? null : A;
        if (typeof A == "number") {
            var $ = new Date(A * 1000);
            return isNaN($) ? null : $
        }
        if (typeof A == "string") {
            if (A.match(/^\d+(\.\d+)?$/)) return new Date(parseFloat(A) * 1000);
            if (_ === undefined) _ = true;
            $ = mini.parseISO8601(A, _) || (A ? new Date(A) : null);
            return isNaN($) ? null : $
        }
        return null
    };
mini.parseISO8601 = function (D, $) {
        var _ = D.match(/^([0-9]{4})([-\/]([0-9]{1,2})([-\/]([0-9]{1,2})([T ]([0-9]{1,2}):([0-9]{1,2})(:([0-9]{1,2})(\.([0-9]+))?)?(Z|(([-+])([0-9]{2})(:?([0-9]{2}))?))?)?)?)?$/);
        if (!_) {
            _ = D.match(/^([0-9]{4})[-\/]([0-9]{2})[-\/]([0-9]{2})[T ]([0-9]{1,2})/);
            if (_) {
                var A = new Date(_[1], _[2] - 1, _[3], _[4]);
                return A
            }
            _ = D.match(/^([0-9]{2})-([0-9]{2})-([0-9]{4})$/);
            if (!_) return null;
            else {
                A = new Date(_[3], _[1] - 1, _[2]);
                return A
            }
        }
        A = new Date(_[1], 0, 1);
        if ($ || !_[14]) {
            var C = new Date(_[1], 0, 1, 9, 0);
            if (_[3]) {
                A.setMonth(_[3] - 1);
                C.setMonth(_[3] - 1)
            }
            if (_[5]) {
                A.setDate(_[5]);
                C.setDate(_[5])
            }
            mini.fixDate(A, C);
            if (_[7]) A.setHours(_[7]);
            if (_[8]) A.setMinutes(_[8]);
            if (_[10]) A.setSeconds(_[10]);
            if (_[12]) A.setMilliseconds(Number("0." + _[12]) * 1000);
            mini.fixDate(A, C)
        } else {
            A.setUTCFullYear(_[1], _[3] ? _[3] - 1 : 0, _[5] || 1);
            A.setUTCHours(_[7] || 0, _[8] || 0, _[10] || 0, _[12] ? Number("0." + _[12]) * 1000 : 0);
            var B = Number(_[16]) * 60 + (_[18] ? Number(_[18]) : 0);
            B *= _[15] == "-" ? 1 : -1;
            A = new Date(+A + (B * 60 * 1000))
        }
        return A
    };
mini.parseTime = function (E, F) {
        if (!E) return null;
        var B = parseInt(E);
        if (B == E && F) {
            $ = new Date(0);
            if (F[0] == "H") $.setHours(B);
            else if (F[0] == "m") $.setMinutes(B);
            else if (F[0] == "s") $.setSeconds(B);
            return $
        }
        var $ = mini.parseDate(E);
        if (!$) {
            var D = E.split(":"),
                _ = parseInt(D[0]),
                C = parseInt(D[1]),
                A = parseInt(D[2]);
            if (!isNaN(_) && !isNaN(C) && !isNaN(A)) {
                    $ = new Date(0);
                    $.setHours(_);
                    $.setMinutes(C);
                    $.setSeconds(A)
                }
            if (!isNaN(_) && (F == "H" || F == "HH")) {
                    $ = new Date(0);
                    $.setHours(_)
                } else if (!isNaN(_) && !isNaN(C) && (F == "H:mm" || F == "HH:mm")) {
                    $ = new Date(0);
                    $.setHours(_);
                    $.setMinutes(C)
                } else if (!isNaN(_) && !isNaN(C) && F == "mm:ss") {
                    $ = new Date(0);
                    $.setMinutes(_);
                    $.setSeconds(C)
                }
        }
        return $
    };
mini.dateInfo = {
        monthsLong: ["\u4e00\u6708", "\u4e8c\u6708", "\u4e09\u6708", "\u56db\u6708", "\u4e94\u6708", "\u516d\u6708", "\u4e03\u6708", "\u516b\u6708", "\u4e5d\u6708", "\u5341\u6708", "\u5341\u4e00\u6708", "\u5341\u4e8c\u6708"],
        monthsShort: ["1\u6708", "2\u6708", "3\u6708", "4\u6708", "5\u6708", "6\u6708", "7\u6708", "8\u6708", "9\u6708", "10\u6708", "11\u6708", "12\u6708"],
        daysLong: ["\u661f\u671f\u65e5", "\u661f\u671f\u4e00", "\u661f\u671f\u4e8c", "\u661f\u671f\u4e09", "\u661f\u671f\u56db", "\u661f\u671f\u4e94", "\u661f\u671f\u516d"],
        daysShort: ["\u65e5", "\u4e00", "\u4e8c", "\u4e09", "\u56db", "\u4e94", "\u516d"],
        quarterLong: ["\u4e00\u5b63\u5ea6", "\u4e8c\u5b63\u5ea6", "\u4e09\u5b63\u5ea6", "\u56db\u5b63\u5ea6"],
        quarterShort: ["Q1", "Q2", "Q2", "Q4"],
        halfYearLong: ["\u4e0a\u534a\u5e74", "\u4e0b\u534a\u5e74"],
        patterns: {
            "d": "yyyy-M-d",
            "D": "yyyy\u5e74M\u6708d\u65e5",
            "f": "yyyy\u5e74M\u6708d\u65e5 H:mm",
            "F": "yyyy\u5e74M\u6708d\u65e5 H:mm:ss",
            "g": "yyyy-M-d H:mm",
            "G": "yyyy-M-d H:mm:ss",
            "m": "MMMd\u65e5",
            "o": "yyyy-MM-ddTHH:mm:ss.fff",
            "s": "yyyy-MM-ddTHH:mm:ss",
            "t": "H:mm",
            "T": "H:mm:ss",
            "U": "yyyy\u5e74M\u6708d\u65e5 HH:mm:ss",
            "y": "yyyy\u5e74MM\u6708"
        },
        tt: {
            "AM": "\u4e0a\u5348",
            "PM": "\u4e0b\u5348"
        },
        ten: {
            "Early": "\u4e0a\u65ec",
            "Mid": "\u4e2d\u65ec",
            "Late": "\u4e0b\u65ec"
        },
        today: "\u4eca\u5929",
        clockType: 24
    };
mini.copyTo(mini, {
        getChildNodes: function (A, C) {
            A = mini.byId(A);
            if (!A) return;
            var E = A.childNodes,
                B = [];
            for (var $ = 0, D = E.length; $ < D; $++) {
                    var _ = E[$];
                    if (_.nodeType == 1 || C === true) B.push(_)
                }
            return B
        },
        removeChilds: function (B, _) {
            B = mini.byId(B);
            if (!B) return;
            var C = mini.getChildNodes(B, true);
            for (var $ = 0, D = C.length; $ < D; $++) {
                var A = C[$];
                if (_ && A == _);
                else B.removeChild(C[$])
            }
        },
        isAncestor: function (A, $) {
            var _ = false;
            A = mini.byId(A);
            $ = mini.byId($);
            if (A === $) return true;
            if (A && $) if (A.contains) return A.contains($);
            else if (A.compareDocumentPosition) return !!(A.compareDocumentPosition($) & 16);
            else while ($ = $.parentNode) _ = $ == A || _;
            return _
        },
        findParent: function (B, A, $) {
            B = mini.byId(B);
            var C = document.body,
                _ = 0,
                D;
            $ = $ || 50;
            if (typeof $ != "number") {
                    D = mini.byId($);
                    $ = 10
                }
            while (B && B.nodeType == 1 && _ < $ && B != C && B != D) {
                    if (this.hasClass(B, A)) return B;
                    _++;
                    B = B.parentNode
                }
            return null
        },
        findChild: function (_, A) {
            _ = mini.byId(_);
            var B = _.getElementsByTagName("*");
            for (var $ = 0, C = B.length; $ < C; $++) {
                var _ = B[$];
                if (this.hasClass(_, A)) return _
            }
        },
        isAncestor: function (A, $) {
            var _ = false;
            A = mini.byId(A);
            $ = mini.byId($);
            if (A === $) return true;
            if (A && $) if (A.contains) {
                try {
                    return A.contains($)
                } catch (B) {
                    return false
                }
            } else if (A.compareDocumentPosition) return !!(A.compareDocumentPosition($) & 16);
            else while ($ = $.parentNode) _ = $ == A || _;
            return _
        },
        getOffsetsTo: function (_, A) {
            var $ = this.getXY(_),
                B = this.getXY(A);
            return [$[0] - B[0], $[1] - B[1]]
        },
        scrollIntoView: function (I, H, F) {
            var B = mini.byId(H) || document.body,
                $ = this.getOffsetsTo(I, B),
                C = $[0] + B.scrollLeft,
                J = $[1] + B.scrollTop,
                D = J + I.offsetHeight,
                A = C + I.offsetWidth,
                G = B.clientHeight,
                K = parseInt(B.scrollTop, 10),
                _ = parseInt(B.scrollLeft, 10),
                L = K + G,
                E = _ + B.clientWidth;
            if (I.offsetHeight > G || J < K) B.scrollTop = J;
            else if (D > L) B.scrollTop = D - G;
            B.scrollTop = B.scrollTop;
            if (F !== false) {
                    if (I.offsetWidth > B.clientWidth || C < _) B.scrollLeft = C;
                    else if (A > E) B.scrollLeft = A - B.clientWidth;
                    B.scrollLeft = B.scrollLeft
                }
            return this
        },
        hasClass: function ($, _) {
            $ = mini.byId($);
            if (!$) return;
            var A = $.className.split(" ");
            return A.indexOf(_) != -1
        },
        addClass: function ($, _) {
            if (!_) return;
            if (mini.hasClass($, _) == false) jQuery($).addClass(_)
        },
        removeClass: function ($, _) {
            if (!_) return;
            jQuery($).removeClass(_)
        },
        setOpacity: function (_, $) {
            jQuery(_).css({
                "opacity": $
            })
        },
        repaint: function ($) {
            if (!$) $ = document.body;
            this.addClass($, "mini-repaint");
            setTimeout(function () {
                mini.removeClass($, "mini-repaint")
            }, 1)
        },
        getMargins: function ($) {
            $ = mini.byId($);
            var _ = jQuery($);
            return {
                top: parseInt(_.css("margin-top"), 10) || 0,
                left: parseInt(_.css("margin-left"), 10) || 0,
                bottom: parseInt(_.css("margin-bottom"), 10) || 0,
                right: parseInt(_.css("margin-right"), 10) || 0
            }
        },
        getBorders: function ($) {
            $ = mini.byId($);
            var _ = jQuery($);
            return {
                top: parseInt(_.css("border-top-width"), 10) || 0,
                left: parseInt(_.css("border-left-width"), 10) || 0,
                bottom: parseInt(_.css("border-bottom-width"), 10) || 0,
                right: parseInt(_.css("border-right-width"), 10) || 0
            }
        },
        getPaddings: function ($) {
            $ = mini.byId($);
            var _ = jQuery($);
            return {
                top: parseInt(_.css("padding-top"), 10) || 0,
                left: parseInt(_.css("padding-left"), 10) || 0,
                bottom: parseInt(_.css("padding-bottom"), 10) || 0,
                right: parseInt(_.css("padding-right"), 10) || 0
            }
        },
        setWidth: function (A, _) {
            A = mini.byId(A);
            _ = parseInt(_);
            if (isNaN(_) || !A) return;
            if (jQuery.boxModel) {
                var B = mini.getPaddings(A),
                    C = mini.getBorders(A);
                _ = _ - B.left - B.right - C.left - C.right
            }
            var $ = mini.getMargins(A);
            _ = _ - $.left - $.right;
            if (_ < 0) _ = 0;
            A.style.width = _ + "px"
        },
        setHeight: function (A, _) {
            A = mini.byId(A);
            _ = parseInt(_);
            if (isNaN(_) || !A) return;
            if (jQuery.boxModel) {
                var B = mini.getPaddings(A),
                    C = mini.getBorders(A);
                _ = _ - B.top - B.bottom - C.top - C.bottom
            }
            var $ = mini.getMargins(A);
            _ = _ - $.top - $.bottom;
            if (_ < 0) _ = 0;
            A.style.height = _ + "px"
        },
        getHeight: function ($, _) {
            $ = mini.byId($);
            if ($.style.display == "none") return 0;
            return _ ? jQuery($).height() : jQuery($).outerHeight()
        },
        getWidth: function ($, _) {
            $ = mini.byId($);
            if ($.style.display == "none") return 0;
            return _ ? jQuery($).width() : jQuery($).outerWidth()
        },
        getSize: function ($, _) {
            return {
                width: this.getWidth($, _),
                height: this.getHeight($, _)
            }
        },
        setSize: function (A, $, _) {
            this.setWidth(A, $);
            this.setHeight(A, _)
        },
        setX: function (_, B) {
            var $ = jQuery(_).offset(),
                A = $.top;
            if (A === undefined) A = $[1];
            this.setXY(_, B, A)
        },
        setY: function (_, A) {
            var $ = jQuery(_).offset(),
                B = $.left;
            if (B === undefined) B = $[0];
            this.setXY(_, B, A)
        },
        setXY: function (_, B, A) {
            var $ = {
                left: B,
                top: A
            };
            jQuery(_).offset($);
            jQuery(_).offset($)
        },
        getXY: function (_) {
            var $ = jQuery(_).offset();
            return [$.left, $.top]
        },
        getBox: function (A) {
            var $ = this.getXY(A),
                _ = {
                    x: $[0],
                    y: $[1],
                    width: this.getWidth(A),
                    height: this.getHeight(A)
                };
            _.left = _.x;
            _.top = _.y;
            _.right = _.x + _.width;
            _.bottom = _.y + _.height;
            return _
        },
        setBox: function (A, C, B, $, _) {
            if (B === undefined) {
                B = C.y;
                $ = C.width;
                _ = C.height;
                C = C.x
            }
            this.setXY(A, C, B);
            this.setWidth(A, $);
            this.setHeight(A, _)
        },
        getViewportBox: function () {
            var $ = jQuery(window).width(),
                _ = jQuery(window).height(),
                B = jQuery(document).scrollLeft(),
                A = jQuery(document.body).scrollTop();
            if (document.documentElement) A = document.documentElement.scrollTop;
            return {
                    x: B,
                    y: A,
                    width: $,
                    height: _,
                    right: B + $,
                    bottom: A + _
                }
        },
        selectable: function (_, $) {
            _ = mini.byId(_);
            if ( !! $) {
                jQuery(_).removeClass("mini-unselectable");
                if (mini.isIE) _.unselectable = "off";
                else {
                    _.style.MozUserSelect = "";
                    _.style.KhtmlUserSelect = "";
                    _.style.UserSelect = ""
                }
            } else {
                jQuery(_).addClass("mini-unselectable");
                if (mini.isIE) _.unselectable = "on";
                else {
                    _.style.MozUserSelect = "none";
                    _.style.UserSelect = "none";
                    _.style.KhtmlUserSelect = "none"
                }
            }
        },
        selectRange: function (B, A, _) {
            if (B.createTextRange) {
                var $ = B.createTextRange();
                $.moveStart("character", A);
                $.moveEnd("character", _ - B.value.length);
                $.select()
            } else if (B.setSelectionRange) B.setSelectionRange(A, _);
            try {
                B.focus()
            } catch (C) {}
        },
        getSelectRange: function (A) {
            A = mini.byId(A);
            if (!A) return;
            try {
                A.focus()
            } catch (C) {}
            var $ = 0,
                B = 0;
            if (A.createTextRange) {
                    var _ = document.selection.createRange().duplicate();
                    _.moveEnd("character", A.value.length);
                    if (_.text === "") $ = A.value.length;
                    else $ = A.value.lastIndexOf(_.text);
                    _ = document.selection.createRange().duplicate();
                    _.moveStart("character", -A.value.length);
                    B = _.text.length
                } else {
                    $ = A.selectionStart;
                    B = A.selectionEnd
                }
            return [$, B]
        },
        setAttr: function (_, A, $) {
            jQuery(_).attr(A, $)
        },
        getAttr: function ($, _) {
            return jQuery($).attr(_)
        },
        removeAttr: function ($, _) {
            jQuery($).removeAttr(_, value)
        }
    });
mini.setStyle = function (A, B) {
        A = mini.byId(A);
        if (!A || typeof B != "string") return;
        var F = jQuery(A),
            _ = B.toLowerCase().split(";");
        for (var $ = 0, C = _.length; $ < C; $++) {
                var E = _[$],
                    D = E.split(":");
                if (D.length == 2) F.css(D[0].trim(), D[1].trim())
            }
    };
mini.getStyle = function () {
        var $ = document.defaultView;
        return new Function("el", "style", ["style.indexOf('-')>-1 && (style=style.replace(/-(\\w)/g,function(m,a){return a.toUpperCase()}));", "style=='float' && (style='", $ ? "cssFloat" : "styleFloat", "');return el.style[style] || ", $ ? "window.getComputedStyle(el, null)[style]" : "el.currentStyle[style]", " || null;"].join(""))
    }();
mini.copyTo(mini, {
        listeners: [],
        on: function (_, $, D, A) {
            _ = mini.byId(_);
            A = A || _;
            if (!_ || !$ || !D || !A) return false;
            var B = this.findListener(_, $, D, A);
            if (B) return false;
            var C = mini.createDelegate(D, A);
            this.listeners.push([_, $, D, A, C]);
            if (jQuery.browser.mozilla && $ == "mousewheel") $ = "DOMMouseScroll";
            jQuery(_).bind($, C)
        },
        un: function (_, $, C, A) {
            _ = mini.byId(_);
            A = A || _;
            if (!_ || !$ || !C || !A) return false;
            var B = this.findListener(_, $, C, A);
            if (!B) return false;
            this.listeners.remove(B);
            if (jQuery.browser.mozilla && $ == "mousewheel") $ = "DOMMouseScroll";
            jQuery(_).unbind($, B[4])
        },
        findListener: function (A, _, F, B) {
            A = mini.byId(A);
            B = B || A;
            if (!A || !_ || !F || !B) return false;
            var D = this.listeners;
            for (var $ = 0, E = D.length; $ < E; $++) {
                var C = D[$];
                if (C[0] == A && C[1] == _ && C[2] == F && C[3] == B) return C
            }
        },
        clearEvent: function (A, _) {
            A = mini.byId(A);
            if (!A) return false;
            var C = this.listeners;
            for (var $ = C.length - 1; $ >= 0; $--) {
                var B = C[$];
                if (B[0] == A) if (!_ || _ == B[1]) this.un(A, B[1], B[2], B[3])
            }
        }
    });
mini.copyTo(Array.prototype, {
        add: Array.prototype.enqueue = function ($) {
            this[this.length] = $;
            return this
        },
        getRange: function (_, A) {
            var B = [];
            for (var $ = _; $ <= A; $++) B[B.length] = this[$];
            return B
        },
        addRange: function (A) {
            for (var $ = 0, _ = A.length; $ < _; $++) this[this.length] = A[$];
            return this
        },
        clear: function () {
            this.length = 0;
            return this
        },
        clone: function () {
            if (this.length === 1) return [this[0]];
            else return Array.apply(null, this)
        },
        contains: function ($) {
            return (this.indexOf($) >= 0)
        },
        indexOf: function (_, B) {
            var $ = this.length;
            for (var A = (B < 0) ? Math.max(0, $ + B) : B || 0; A < $; A++) if (this[A] === _) return A;
            return -1
        },
        dequeue: function () {
            return this.shift()
        },
        insert: function (_, $) {
            this.splice(_, 0, $);
            return this
        },
        insertRange: function (_, B) {
            for (var A = B.length - 1; A >= 0; A--) {
                var $ = B[A];
                this.splice(_, 0, $)
            }
            return this
        },
        remove: function (_) {
            var $ = this.indexOf(_);
            if ($ >= 0) this.splice($, 1);
            return ($ >= 0)
        },
        removeAt: function ($) {
            var _ = this[$];
            this.splice($, 1);
            return _
        },
        removeRange: function (_) {
            _ = _.clone();
            for (var $ = 0, A = _.length; $ < A; $++) this.remove(_[$])
        }
    });
mini.Keyboard = {
        Left: 37,
        Top: 38,
        Right: 39,
        Bottom: 40,
        PageUp: 33,
        PageDown: 34,
        End: 35,
        Home: 36,
        Enter: 13,
        ESC: 27,
        Space: 32,
        Tab: 9,
        Del: 46,
        F1: 112,
        F2: 113,
        F3: 114,
        F4: 115,
        F5: 116,
        F6: 117,
        F7: 118,
        F8: 119,
        F9: 120,
        F10: 121,
        F11: 122,
        F12: 123
    };
var ua = navigator.userAgent.toLowerCase(),
    check = function ($) {
        return $.test(ua)
    },
    DOC = document,
    isStrict = DOC.compatMode == "CSS1Compat",
    isOpera = Object.prototype.toString.call(window.opera) == "[object Opera]",
    isChrome = check(/chrome/),
    isWebKit = check(/webkit/),
    isSafari = !isChrome && check(/safari/),
    isSafari2 = isSafari && check(/applewebkit\/4/),
    isSafari3 = isSafari && check(/version\/3/),
    isSafari4 = isSafari && check(/version\/4/),
    isIE = !! window.attachEvent && !isOpera,
    isIE7 = isIE && check(/msie 7/),
    isIE8 = isIE && check(/msie 8/),
    isIE6 = isIE && !isIE7 && !isIE8,
    isIE9 = isIE && !! +"\v1",
    isFirefox = navigator.userAgent.indexOf("Firefox") > 0,
    isGecko = !isWebKit && check(/gecko/),
    isGecko2 = isGecko && check(/rv:1\.8/),
    isGecko3 = isGecko && check(/rv:1\.9/),
    isBorderBox = isIE && !isStrict,
    isWindows = check(/windows|win32/),
    isMac = check(/macintosh|mac os x/),
    isAir = check(/adobeair/),
    isLinux = check(/linux/),
    isSecure = /^https/i.test(window.location.protocol);
if (isIE6) {
        try {
            DOC.execCommand("BackgroundImageCache", false, true)
        } catch (e) {}
    }
mini.isIE = isIE;
mini.isIE7 = isIE7;
mini.isIE8 = isIE8;
mini.isIE9 = isIE9;
mini.isFireFox = jQuery.browser.mozilla;
mini.isOpera = jQuery.browser.opera;
mini.isSafari = jQuery.browser.safari;
mini.noBorderBox = false;
if (jQuery.boxModel == false && mini.isIE && mini.isIE9 == false) mini.noBorderBox = true;
mini.MouseButton = {
        Left: 0,
        Middle: 1,
        Right: 2
    };
if (mini.isIE && !mini.isIE9) mini.MouseButton = {
        Left: 1,
        Middle: 4,
        Right: 2
    };
mini._MaskID = 1;
mini._MaskObjects = {};
mini.mask = function (C) {
        var _ = mini.byId(C);
        if (mini.isElement(_)) C = {
            el: _
        };
        else if (typeof C == "string") C = {
            html: C
        };
        C = mini.copyTo({
            html: "",
            cls: "",
            style: "",
            backStyle: "background:#ccc"
        }, C);
        C.el = mini.byId(C.el);
        if (!C.el) C.el = document.body;
        _ = C.el;
        this.unmask(C.el);
        _._maskid = mini._MaskID++;
        mini._MaskObjects[_._maskid] = C;
        var $ = mini.append(_, "<div class=\"mini-mask\">" + "<div class=\"mini-mask-background\" style=\"" + C.backStyle + "\"></div>" + "<div class=\"mini-mask-msg " + C.cls + "\" style=\"" + C.style + "\">" + C.html + "</div>" + "</div>");
        C.maskEl = $;
        if (!mini.isNull(C.opacity)) mini.setOpacity($.firstChild, C.opacity);

        function A() {
            var $ = mini.getSize(B);
            B.style.marginLeft = -$.width / 2 + "px";
            B.style.marginTop = -$.height / 2 + "px"
        }
        var B = $.lastChild;
        A();
        setTimeout(function () {
            A()
        }, 1)
    };
mini.unmask = function (_) {
        _ = mini.byId(_);
        if (!_) _ = document.body;
        var A = mini._MaskObjects[_._maskid];
        if (!A) return;
        delete mini._MaskObjects[_._maskid];
        var $ = A.maskEl;
        A.maskEl = null;
        if ($ && $.parentNode) $.parentNode.removeChild($)
    };
mini.copyTo(mini, {
        treeToArray: function (C, I, J, A, $) {
            if (!I) I = "children";
            var F = [];
            for (var H = 0, D = C.length; H < D; H++) {
                var B = C[H];
                F[F.length] = B;
                if (A) B[A] = $;
                var _ = B[I];
                if (_ && _.length > 0) {
                    var E = B[J],
                        G = this.treeToArray(_, I, J, A, E);
                    F.addRange(G)
                }
            }
            return F
        },
        arrayToTree: function (C, A, H, B) {
            if (!A) A = "children";
            H = H || "_id";
            B = B || "_pid";
            var G = [],
                F = {};
            for (var _ = 0, E = C.length; _ < E; _++) {
                    var $ = C[_];
                    F[$[H]] = $;
                    delete $[A]
                }
            for (_ = 0, E = C.length; _ < E; _++) {
                    var $ = C[_],
                        D = F[$[B]];
                    if (!D) {
                            G.push($);
                            continue
                        }
                    if (!D[A]) D[A] = [];
                    D[A].push($)
                }
            return G
        }
    });

function UUID() {
        var A = [],
            _ = "0123456789ABCDEF".split("");
        for (var $ = 0; $ < 36; $++) A[$] = Math.floor(Math.random() * 16);
        A[14] = 4;
        A[19] = (A[19] & 3) | 8;
        for ($ = 0; $ < 36; $++) A[$] = _[A[$]];
        A[8] = A[13] = A[18] = A[23] = "-";
        return A.join("")
    }
String.format = function (_) {
        var $ = Array.prototype.slice.call(arguments, 1);
        _ = _ || "";
        return _.replace(/\{(\d+)\}/g, function (A, _) {
            return $[_]
        })
    };
String.prototype.trim = function () {
        var $ = /^\s+|\s+$/g;
        return function () {
            return this.replace($, "")
        }
    }();
mini._window = mini.w = window;
mini.copyTo(mini, {
        measureText: function (B, _, C) {
            if (!this.measureEl) this.measureEl = mini.append(document.body, "<div></div>");
            this.measureEl.style.cssText = "position:absolute;left:-1000px;top:-1000px;visibility:hidden;";
            if (typeof B == "string") this.measureEl.className = B;
            else {
                this.measureEl.className = "";
                var G = jQuery(B),
                    A = jQuery(this.measureEl),
                    F = ["font-size", "font-style", "font-weight", "font-family", "line-height", "text-transform", "letter-spacing"];
                for (var $ = 0, E = F.length; $ < E; $++) {
                        var D = F[$];
                        A.css(D, G.css(D))
                    }
            }
            if (C) mini.setStyle(this.measureEl, C);
            this.measureEl.innerHTML = _;
            return mini.getSize(this.measureEl)
        }
    });
jQuery(function () {
        mini.isReady = true;
        mini.parse();
        mini._FireBindEvents()
    });
mini_onload = function ($) {
        mini.layout();
        mini.repaint(document.body)
    };
mini.on(window, "load", mini_onload);
mini.__LastWindowWidth = 0;
mini.__LastWindowHeight = 0;
mini.doWindowResizeTimer = null;
mini_onresize = function ($) {
        if (mini.doWindowResizeTimer) clearTimeout(mini.doWindowResizeTimer);
        if (mini.isWindowDisplay() == false) return;
        if (typeof Ext != "undefined") mini.doWindowResizeTimer = setTimeout(function () {
            var _ = jQuery(window).width(),
                $ = jQuery(window).height();
            if (mini.__LastWindowWidth == _ && mini.__LastWindowHeight == $);
            else mini.layout();
            mini.doWindowResizeTimer = null
        }, 300);
        else mini.doWindowResizeTimer = setTimeout(function () {
            var _ = jQuery(window).width(),
                $ = jQuery(window).height();
            if (mini.__LastWindowWidth == _ && mini.__LastWindowHeight == $);
            else mini.layout();
            mini.doWindowResizeTimer = null
        }, 45)
    };
mini.on(window, "resize", mini_onresize);
mini.isDisplay = function (_, A) {
        var $ = A || document.body;
        while (1) {
            if (_ == null || !_.style) return false;
            if (_ && _.style && _.style.display == "none") return false;
            if (_ == $) return true;
            _ = _.parentNode
        }
        return true
    };
mini.isWindowDisplay = function () {
        var _ = window.parent,
            D = _ != window;
        if (D) {
                var E = _.document.getElementsByTagName("iframe"),
                    B = null;
                for (var $ = 0, C = E.length; $ < C; $++) {
                        var A = E[$];
                        if (A.contentWindow == window) {
                            B = A;
                            break
                        }
                    }
                if (!B) return false;
                return mini.isDisplay(B, _.document.body)
            } else return true
    };
mini.WindowVisible = mini.isWindowDisplay();
var __MiniWindowTimer = setInterval(function () {
        var $ = mini.isWindowDisplay();
        if ($ != mini.WindowVisible && $ == true) {
            mini.WindowVisible = true;
            mini.layout();
            clearInterval(__MiniWindowTimer)
        }
    }, 150);
mini.layoutIFrames = function (_) {
        if (!_) _ = document.body;
        var D = document.getElementsByTagName("iframe");
        for (var $ = 0, B = D.length; $ < B; $++) {
            var A = D[$];
            if (mini.isDisplay(A) && mini.isAncestor(_, A)) {
                try {
                    A.contentWindow.mini.layout();
                    A.contentWindow.mini.layoutIFrames()
                } catch (C) {}
            }
        }
    };
$.ajaxSetup({
        cache: false
    });
if (mini.isIE) setInterval(function () {
        CollectGarbage()
    }, 1000);
mini_unload = function (C) {
        var A = mini.getComponents();
        for (var $ = 0, B = A.length; $ < B; $++) {
            var _ = A[$];
            _.destroy(false)
        }
        A.length = 0;
        A = null;
        mini.un(window, "unload", mini_unload);
        mini.un(window, "load", mini_onload);
        mini.un(window, "resize", mini_onresize);
        mini.components = {};
        mini.classes = {};
        mini.uiClasses = {};
        try {
            CollectGarbage()
        } catch (C) {}
    };
mini.on(window, "unload", mini_unload);

function __OnIFrameMouseDown() {
        jQuery(document).trigger("mousedown")
    }
function __BindIFrames() {
        var C = document.getElementsByTagName("iframe");
        for (var $ = 0, A = C.length; $ < A; $++) {
            var _ = C[$];
            if (_.contentWindow) {
                try {
                    _.contentWindow.document.onmousedown = __OnIFrameMouseDown
                } catch (B) {}
            }
        }
    }
setInterval(function () {
        __BindIFrames()
    }, 500);
mini.zIndex = 1000;
mini.getMaxZIndex = function () {
        return mini.zIndex++
    };
mini.Hidden = function () {
        mini.Hidden.superclass.constructor.call(this)
    };
mini.extend(mini.Hidden, mini.Control, {
        formField: true,
        value: "",
        uiCls: "mini-hidden",
        _create: function () {
            this.el = document.createElement("input");
            this.el.type = "hidden";
            this.el.className = "mini-hidden"
        },
        setName: function ($) {
            this.name = $;
            this.el.name = $
        },
        setValue: function ($) {
            this.el.value = $
        },
        getValue: function () {
            return this.el.value
        },
        getFormValue: function () {
            return this.getValue()
        }
    });
mini.regClass(mini.Hidden, "hidden");
mini.Popup = function () {
        mini.Popup.superclass.constructor.call(this);
        this.setVisible(false);
        this.setAllowDrag(this.allowDrag);
        this.setAllowResize(this.allowResize)
    };
mini.extend(mini.Popup, mini.Control, {
        _clearBorder: false,
        uiCls: "mini-popup",
        _create: function () {
            var $ = this.el = document.createElement("div");
            this.el.className = "mini-popup";
            this.contentEl = this.el
        },
        _initEvents: function () {
            mini._BindEvents(function () {
                mini.on(document, "mousedown", this.__OnBodyMouseDown, this);
                mini.on(this.el, "mouseover", this.__OnMouseOver, this);
                mini.on(window, "resize", this.__OnWindowResize, this)
            }, this)
        },
        doLayout: function () {
            if (!this.canLayout()) return;
            mini.Popup.superclass.doLayout.call(this);
            this._doShadow();
            var A = this.el.childNodes;
            if (A) for (var $ = 0, B = A.length; $ < B; $++) {
                var _ = A[$];
                mini.layout(_)
            }
        },
        destroy: function ($) {
            mini.removeChilds(this.contentEl);
            mini.un(document, "mousedown", this.__OnBodyMouseDown, this);
            mini.un(window, "resize", this.__OnWindowResize, this);
            if (this.modalEl) {
                jQuery(this.modalEl).remove();
                this.modalEl = null
            }
            if (this.shadowEl) {
                jQuery(this.shadowEl).remove();
                this.shadowEl = null
            }
            mini.Popup.superclass.destroy.call(this, $)
        },
        setBody: function (_) {
            if (!_) return;
            if (!mini.isArray(_)) _ = [_];
            for (var $ = 0, A = _.length; $ < A; $++) mini.append(this.contentEl, _[$])
        },
        getAttrs: function ($) {
            var A = mini.Popup.superclass.getAttrs.call(this, $);
            mini._ParseString($, A, ["popupEl", "popupCls", "showAction", "hideAction", "hAlign", "vAlign", "modalStyle", "onbeforeopen", "open", "onbeforeclose", "onclose"]);
            mini._ParseBool($, A, ["showModal", "showShadow", "allowDrag", "allowResize"]);
            mini._ParseInt($, A, ["showDelay", "hideDelay", "hOffset", "vOffset", "minWidth", "minHeight", "maxWidth", "maxHeight"]);
            var _ = mini.getChildNodes($, true);
            A.body = _;
            return A
        }
    });
mini.regClass(mini.Popup, "popup");
mini.Popup_prototype = {
        isPopup: false,
        popupEl: null,
        popupCls: "",
        showAction: "mouseover",
        hideAction: "outerclick",
        showDelay: 300,
        hideDelay: 500,
        hAlign: "left",
        vAlign: "below",
        hOffset: 0,
        vOffset: 0,
        minWidth: 50,
        minHeight: 25,
        maxWidth: 2000,
        maxHeight: 2000,
        showModal: false,
        showShadow: true,
        modalStyle: "opacity:0.2",
        dragCls: "mini-popup-drag",
        resizeCls: "mini-popup-resize",
        allowDrag: false,
        allowResize: false,
        _unbindPopupEl: function () {
            if (!this.popupEl) return;
            mini.un(this.popupEl, "click", this.__OnLeftClick, this);
            mini.un(this.popupEl, "contextmenu", this.__OnRightClick, this);
            mini.un(this.popupEl, "mouseover", this.__OnMouseOver, this)
        },
        _bindPopupEl: function () {
            if (!this.popupEl) return;
            mini.on(this.popupEl, "click", this.__OnLeftClick, this);
            mini.on(this.popupEl, "contextmenu", this.__OnRightClick, this);
            mini.on(this.popupEl, "mouseover", this.__OnMouseOver, this)
        },
        doShow: function (A) {
            var $ = {
                popupEl: this.popupEl,
                htmlEvent: A,
                cancel: false
            };
            this.fire("BeforeOpen", $);
            if ($.cancel == true) return;
            this.fire("opening", $);
            if ($.cancel == true) return;
            if (!this.popupEl) this.show();
            else {
                var _ = {};
                if (A) _.xy = [A.pageX, A.pageY];
                this.showAtEl(this.popupEl, _)
            }
        },
        doHide: function (_) {
            var $ = {
                popupEl: this.popupEl,
                htmlEvent: _,
                cancel: false
            };
            this.fire("BeforeClose", $);
            if ($.cancel == true) return;
            this.close()
        },
        show: function (_, $) {
            this.showAtPos(_, $)
        },
        showAtPos: function (B, A) {
            this.render(document.body);
            if (!B) B = "center";
            if (!A) A = "middle";
            this.el.style.position = "absolute";
            this.el.style.left = "-2000px";
            this.el.style.top = "-2000px";
            this.el.style.display = "";
            this._measureSize();
            var _ = mini.getViewportBox(),
                $ = mini.getBox(this.el);
            if (B == "left") B = 0;
            if (B == "center") B = _.width / 2 - $.width / 2;
            if (B == "right") B = _.width - $.width;
            if (A == "top") A = 0;
            if (A == "middle") A = _.y + _.height / 2 - $.height / 2;
            if (A == "bottom") A = _.height - $.height;
            if (B + $.width > _.right) B = _.right - $.width;
            if (A + $.height > _.bottom) A = _.bottom - $.height;
            this._Show(B, A)
        },
        _doModal: function () {
            jQuery(this.modalEl).remove();
            if (!this.showModal) return;
            if (this.visible == false) return;
            var $ = mini.getViewportBox();
            this.modalEl = mini.append(document.body, "<div class=\"mini-modal\"></div>");
            this.modalEl.style.height = $.height + "px";
            this.modalEl.style.width = $.width + "px";
            this.modalEl.style.zIndex = mini.getStyle(this.el, "zIndex") - 1;
            mini.setStyle(this.modalEl, this.modalStyle)
        },
        _doShadow: function () {
            if (!this.shadowEl) this.shadowEl = mini.append(document.body, "<div class=\"mini-shadow\"></div>");
            this.shadowEl.style.display = this.showShadow ? "" : "none";
            if (this.showShadow) {
                var $ = mini.getBox(this.el),
                    A = this.shadowEl.style;
                A.width = $.width + "px";
                A.height = $.height + "px";
                A.left = $.x + "px";
                A.top = $.y + "px";
                var _ = mini.getStyle(this.el, "zIndex");
                if (!isNaN(_)) this.shadowEl.style.zIndex = _ - 2
            }
        },
        _measureSize: function () {
            this.el.style.display = "";
            var $ = mini.getBox(this.el);
            if ($.width > this.maxWidth) {
                mini.setWidth(this.el, this.maxWidth);
                $ = mini.getBox(this.el)
            }
            if ($.height > this.maxHeight) {
                mini.setHeight(this.el, this.maxHeight);
                $ = mini.getBox(this.el)
            }
            if ($.width < this.minWidth) {
                mini.setWidth(this.el, this.minWidth);
                $ = mini.getBox(this.el)
            }
            if ($.height < this.minHeight) {
                mini.setHeight(this.el, this.minHeight);
                $ = mini.getBox(this.el)
            }
        },
        showAtEl: function (H, D) {
            H = mini.byId(H);
            if (!H) return;
            if (!this.isRender() || this.el.parentNode != document.body) this.render(document.body);
            var A = {
                hAlign: this.hAlign,
                vAlign: this.vAlign,
                hOffset: this.hOffset,
                vOffset: this.vOffset,
                popupCls: this.popupCls
            };
            mini.copyTo(A, D);
            mini.addClass(H, A.popupCls);
            H.popupCls = A.popupCls;
            this._popupEl = H;
            this.el.style.position = "absolute";
            this.el.style.left = "-2000px";
            this.el.style.top = "-2000px";
            this.el.style.display = "";
            this.doLayout();
            this._measureSize();
            var J = mini.getViewportBox(),
                B = mini.getBox(this.el),
                L = mini.getBox(H),
                F = A.xy,
                C = A.hAlign,
                E = A.vAlign,
                M = J.width / 2 - B.width / 2,
                K = 0;
            if (F) {
                    M = F[0];
                    K = F[1]
                }
            switch (A.hAlign) {
                case "outleft":
                    M = L.x - B.width;
                    break;
                case "left":
                    M = L.x;
                    break;
                case "center":
                    M = L.x + L.width / 2 - B.width / 2;
                    break;
                case "right":
                    M = L.right - B.width;
                    break;
                case "outright":
                    M = L.right;
                    break;
                default:
                    break
                }
            switch (A.vAlign) {
                case "above":
                    K = L.y - B.height;
                    break;
                case "top":
                    K = L.y;
                    break;
                case "middle":
                    K = L.y + L.height / 2 - B.height / 2;
                    break;
                case "bottom":
                    K = L.bottom - B.height;
                    break;
                case "below":
                    K = L.bottom;
                    break;
                default:
                    break
                }
            M = parseInt(M);
            K = parseInt(K);
            if (A.outVAlign || A.outHAlign) {
                    if (A.outVAlign == "above") {
                        if (K + B.height > J.bottom) {
                            var _ = L.y - J.y,
                                I = J.bottom - L.bottom;
                            if (_ > I) K = L.y - B.height
                        }
                    } else if (A.outHAlign == "outleft") if (M + B.width > J.right) {
                        var G = L.x - J.x,
                            $ = J.right - L.right;
                        if (G > $) M = L.x - B.width
                    }
                    this._Show(M, K)
                } else this.showAtPos(M + A.hOffset, K + A.vOffset)
        },
        _Show: function (A, _) {
            this.el.style.display = "";
            this.el.style.zIndex = mini.getMaxZIndex();
            mini.setX(this.el, A);
            mini.setY(this.el, _);
            this.setVisible(true);
            if (this.hideAction == "mouseout") mini.on(document, "mousemove", this.__OnBodyMouseMove, this);
            var $ = this;
            this._doShadow();
            this._doModal();
            mini.layoutIFrames(this.el);
            mini.repaint(this.el);
            this.isPopup = true;
            this.fire("Open")
        },
        open: function () {
            this.show()
        },
        close: function () {
            this.hide()
        },
        hide: function () {
            if (!this.el) return;
            if (this.popupEl) mini.removeClass(this.popupEl, this.popupEl.popupCls);
            if (this._popupEl) mini.removeClass(this._popupEl, this._popupEl.popupCls);
            this._popupEl = null;
            jQuery(this.modalEl).remove();
            if (this.shadowEl) this.shadowEl.style.display = "none";
            mini.un(document, "mousemove", this.__OnBodyMouseMove, this);
            this.setVisible(false);
            this.isPopup = false;
            this.fire("Close")
        },
        setPopupEl: function ($) {
            $ = mini.byId($);
            if (!$) return;
            this._unbindPopupEl();
            this.popupEl = $;
            this._bindPopupEl()
        },
        setPopupCls: function ($) {
            this.popupCls = $
        },
        setShowAction: function ($) {
            this.showAction = $
        },
        setHideAction: function ($) {
            this.hideAction = $
        },
        setShowDelay: function ($) {
            this.showDelay = $
        },
        setHideDelay: function ($) {
            this.hideDelay = $
        },
        setHAlign: function ($) {
            this.hAlign = $
        },
        setVAlign: function ($) {
            this.vAlign = $
        },
        setHOffset: function ($) {
            $ = parseInt($);
            if (isNaN($)) $ = 0;
            this.hOffset = $
        },
        setVOffset: function ($) {
            $ = parseInt($);
            if (isNaN($)) $ = 0;
            this.vOffset = $
        },
        setShowModal: function ($) {
            this.showModal = $
        },
        setShowShadow: function ($) {
            this.showShadow = $
        },
        setMinWidth: function ($) {
            if (isNaN($)) return;
            this.minWidth = $
        },
        setMinHeight: function ($) {
            if (isNaN($)) return;
            this.minHeight = $
        },
        setMaxWidth: function ($) {
            if (isNaN($)) return;
            this.maxWidth = $
        },
        setMaxHeight: function ($) {
            if (isNaN($)) return;
            this.maxHeight = $
        },
        setAllowDrag: function ($) {
            this.allowDrag = $;
            mini.removeClass(this.el, this.dragCls);
            if ($) mini.addClass(this.el, this.dragCls)
        },
        setAllowResize: function ($) {
            this.allowResize = $;
            mini.removeClass(this.el, this.resizeCls);
            if ($) mini.addClass(this.el, this.resizeCls)
        },
        __OnLeftClick: function (_) {
            if (this.inAniming) return;
            if (this.showAction != "leftclick") return;
            var $ = jQuery(this.popupEl).attr("allowPopup");
            if (String($) == "false") return;
            this.doShow(_)
        },
        __OnRightClick: function (_) {
            if (this.inAniming) return;
            if (this.showAction != "rightclick") return;
            var $ = jQuery(this.popupEl).attr("allowPopup");
            if (String($) == "false") return;
            _.preventDefault();
            this.doShow(_)
        },
        __OnMouseOver: function (A) {
            if (this.inAniming) return;
            if (this.showAction != "mouseover") return;
            var _ = jQuery(this.popupEl).attr("allowPopup");
            if (String(_) == "false") return;
            clearTimeout(this._hideTimer);
            this._hideTimer = null;
            if (this.isPopup) return;
            var $ = this;
            this._showTimer = setTimeout(function () {
                $.doShow(A)
            }, this.showDelay)
        },
        __OnBodyMouseMove: function ($) {
            if (this.hideAction != "mouseout") return;
            this._tryHide($)
        },
        __OnBodyMouseDown: function ($) {
            if (this.hideAction != "outerclick") return;
            if (!this.isPopup) return;
            if (this.within($) || (this.popupEl && mini.isAncestor(this.popupEl, $.target)));
            else this.doHide($)
        },
        _tryHide: function (_) {
            if (mini.isAncestor(this.el, _.target) || (this.popupEl && mini.isAncestor(this.popupEl, _.target)));
            else {
                clearTimeout(this._showTimer);
                this._showTimer = null;
                if (this._hideTimer) return;
                var $ = this;
                this._hideTimer = setTimeout(function () {
                    $.doHide(_)
                }, this.hideDelay)
            }
        },
        __OnWindowResize: function ($) {
            if (this.isDisplay()) this._doModal()
        }
    };
mini.copyTo(mini.Popup.prototype, mini.Popup_prototype);
mini.Button = function () {
        mini.Button.superclass.constructor.call(this)
    };
mini.extend(mini.Button, mini.Control, {
        text: "",
        iconCls: "",
        iconStyle: "",
        plain: false,
        checkOnClick: false,
        checked: false,
        groupName: "",
        plainCls: "mini-button-plain",
        hoverCls: "mini-button-hover",
        pressedCls: "mini-button-pressed",
        checkedCls: "mini-button-checked",
        disabledCls: "mini-button-disabled",
        allowCls: "",
        _clearBorder: false,
        set: function ($) {
            if (typeof $ == "string") return this;
            this.allowUpdate = $.text || $.iconStyle || $.iconCls || $.iconPosition;
            mini.Button.superclass.set.call(this, $);
            if (this.allowUpdate === false) {
                this.allowUpdate = true;
                this.doUpdate()
            }
            return this
        },
        uiCls: "mini-button",
        _create: function () {
            this.el = document.createElement("a");
            this.el.className = "mini-button";
            this.el.hideFocus = true;
            this.el.href = "javascript:void(0)";
            this.el.onclick = function () {
                return false
            };
            this.doUpdate()
        },
        _initEvents: function () {
            mini._BindEvents(function () {
                mini.on(this.el, "mousedown", this.__OnMouseDown, this);
                mini.on(this.el, "click", this.__OnClick, this)
            }, this)
        },
        destroy: function ($) {
            this.el.onclick = null;
            if (this.menu) this.menu.owner = null;
            this.menu = null;
            mini.Button.superclass.destroy.call(this, $)
        },
        doUpdate: function () {
            if (this.allowUpdate === false) return;
            var _ = "",
                $ = this.text;
            if (this.iconCls && $) _ = " mini-button-icon " + this.iconCls;
            else if (this.iconCls && $ === "") {
                    _ = " mini-button-iconOnly " + this.iconCls;
                    $ = "&nbsp;"
                }
            var A = "<span class=\"mini-button-text " + _ + "\">" + $ + "</span>";
            if (this.allowCls) A = A + "<span class=\"mini-button-allow " + this.allowCls + "\"></span>";
            this.el.innerHTML = A
        },
        href: "",
        setHref: function ($) {
            this.el.href = $;
            this.el.onclick = null
        },
        setText: function ($) {
            if (this.text != $) {
                this.text = $;
                this.doUpdate()
            }
        },
        setIconCls: function ($) {
            this.iconCls = $;
            this.doUpdate()
        },
        setIconStyle: function ($) {
            this.iconStyle = $;
            this.doUpdate()
        },
        setIconPosition: function ($) {
            this.iconPosition = "left";
            this.doUpdate()
        },
        setPlain: function ($) {
            this.plain = $;
            if ($) this.addCls(this.plainCls);
            else this.removeCls(this.plainCls)
        },
        setGroupName: function ($) {
            this.groupName = $
        },
        setCheckOnClick: function ($) {
            this.checkOnClick = $
        },
        getCheckOnClick: function () {
            return this.checkOnClick
        },
        setChecked: function ($) {
            var _ = this.checked != $;
            this.checked = $;
            if ($) this.addCls(this.checkedCls);
            else this.removeCls(this.checkedCls);
            if (_) this.fire("CheckedChanged")
        },
        doClick: function () {
            this.__OnClick(null)
        },
        __OnClick: function (D) {
            if (this.isReadOnly()) return;
            this.focus();
            if (this.checkOnClick) if (this.groupName) {
                var _ = this.groupName,
                    C = mini.findControls(function ($) {
                        if ($.type == "button" && $.groupName == _) return true
                    });
                if (C.length > 0) {
                        for (var $ = 0, A = C.length; $ < A; $++) {
                            var B = C[$];
                            if (B != this) B.setChecked(false)
                        }
                        this.setChecked(true)
                    } else this.setChecked(!this.checked)
            } else this.setChecked(!this.checked);
            this.fire("click", {
                htmlEvent: D
            })
        },
        __OnMouseDown: function ($) {
            if (this.isReadOnly()) return;
            this.addCls(this.pressedCls);
            mini.on(document, "mouseup", this.__OnDocMouseup, this)
        },
        __OnDocMouseup: function ($) {
            this.removeCls(this.pressedCls);
            mini.un(document, "mouseup", this.__OnDocMouseup, this)
        },
        onClick: function (_, $) {
            this.on("click", _, $)
        },
        getAttrs: function ($) {
            var _ = mini.Button.superclass.getAttrs.call(this, $);
            _.text = $.innerHTML;
            mini._ParseString($, _, ["text", "href", "iconCls", "iconStyle", "iconPosition", "groupName", "menu", "onclick", "oncheckedchanged"]);
            mini._ParseBool($, _, ["plain", "checkOnClick"]);
            return _
        }
    });
mini.regClass(mini.Button, "button");
mini.MenuButton = function () {
        mini.MenuButton.superclass.constructor.call(this)
    };
mini.extend(mini.MenuButton, mini.Button, {
        uiCls: "mini-menubutton",
        allowCls: "mini-button-menu",
        setMenu: function ($) {
            if (mini.isArray($)) $ = {
                type: "menu",
                items: $
            };
            if (typeof $ == "string") {
                var _ = mini.byId($);
                if (!_) return;
                mini.parse($);
                $ = mini.get($)
            }
            if (this.menu !== $) {
                this.menu = mini.getAndCreate($);
                this.menu.setPopupEl(this.el);
                this.menu.setPopupCls("mini-button-popup");
                this.menu.setShowAction("leftclick");
                this.menu.setHideAction("outerclick");
                this.menu.setHAlign("left");
                this.menu.setVAlign("below");
                this.menu.hide();
                this.menu.owner = this
            }
        },
        setEnabled: function ($) {
            this.enabled = $;
            if ($) this.removeCls(this.disabledCls);
            else this.addCls(this.disabledCls);
            jQuery(this.el).attr("allowPopup", !! $)
        }
    });
mini.regClass(mini.MenuButton, "menubutton");
mini.SplitButton = function () {
        mini.SplitButton.superclass.constructor.call(this)
    };
mini.extend(mini.SplitButton, mini.MenuButton, {
        uiCls: "mini-splitbutton",
        allowCls: "mini-button-split"
    });
mini.regClass(mini.SplitButton, "splitbutton");
mini.CheckBox = function () {
        mini.CheckBox.superclass.constructor.call(this)
    };
mini.extend(mini.CheckBox, mini.Control, {
        formField: true,
        text: "",
        checked: false,
        defaultValue: false,
        trueValue: true,
        falseValue: false,
        uiCls: "mini-checkbox",
        _create: function () {
            var $ = this.uid + "$check";
            this.el = document.createElement("span");
            this.el.className = "mini-checkbox";
            this.el.innerHTML = "<input id=\"" + $ + "\" name=\"" + this.id + "\" type=\"checkbox\" class=\"mini-checkbox-check\"><label for=\"" + $ + "\" onclick=\"return false;\">" + this.text + "</label>";
            this.checkEl = this.el.firstChild;
            this.labelEl = this.el.lastChild
        },
        destroy: function ($) {
            if (this.checkEl) {
                this.checkEl.onmouseup = null;
                this.checkEl.onclick = null;
                this.checkEl = null
            }
            mini.CheckBox.superclass.destroy.call(this, $)
        },
        _initEvents: function () {
            mini._BindEvents(function () {
                mini.on(this.el, "click", this.__onClick, this);
                this.checkEl.onmouseup = function () {
                    return false
                };
                var $ = this;
                this.checkEl.onclick = function () {
                    if ($.isReadOnly()) return false
                }
            }, this)
        },
        setName: function ($) {
            this.name = $;
            mini.setAttr(this.checkEl, "name", this.name)
        },
        setText: function ($) {
            if (this.text !== $) {
                this.text = $;
                this.labelEl.innerHTML = $
            }
        },
        setChecked: function ($) {
            if ($ === true) $ = true;
            else if ($ == this.trueValue) $ = true;
            else if ($ == "true") $ = true;
            else if ($ === 1) $ = true;
            else if ($ == "Y") $ = true;
            else $ = false;
            if (this.checked !== $) {
                this.checked = !! $;
                this.checkEl.checked = this.checked;
                this.value = this.getValue()
            }
        },
        getChecked: function () {
            return this.checked
        },
        setValue: function ($) {
            if (this.checked != $) {
                this.setChecked($);
                this.value = this.getValue()
            }
        },
        getValue: function () {
            return String(this.checked == true ? this.trueValue : this.falseValue)
        },
        getFormValue: function () {
            return this.getValue()
        },
        setTrueValue: function ($) {
            this.checkEl.value = $;
            this.trueValue = $
        },
        setFalseValue: function ($) {
            this.falseValue = $
        },
        __onClick: function ($) {
            if (this.isReadOnly()) return;
            this.setChecked(!this.checked);
            this.fire("checkedchanged", {
                checked: this.checked
            });
            this.fire("valuechanged", {
                value: this.getValue()
            });
            this.fire("click", $, this)
        },
        getAttrs: function (A) {
            var D = mini.CheckBox.superclass.getAttrs.call(this, A),
                C = jQuery(A);
            D.text = A.innerHTML;
            mini._ParseString(A, D, ["text", "oncheckedchanged", "onclick"]);
            mini._ParseBool(A, D, ["enabled"]);
            var B = C.attr("checked");
            if (B) D.checked = (B == "true" || B == "checked") ? true : false;
            var _ = C.attr("trueValue");
            if (_) {
                    D.trueValue = _;
                    _ = parseInt(_);
                    if (!isNaN(_)) D.trueValue = _
                }
            var $ = C.attr("falseValue");
            if ($) {
                    D.falseValue = $;
                    $ = parseInt($);
                    if (!isNaN($)) D.falseValue = $
                }
            return D
        }
    });
mini.regClass(mini.CheckBox, "checkbox");
mini.ButtonEdit = function () {
        this._initButtons();
        mini.ButtonEdit.superclass.constructor.call(this);
        this.addCls("mini-buttonedit")
    };
mini.extend(mini.ButtonEdit, mini.ValidatorBase, {
        name: "",
        formField: true,
        defaultValue: "",
        value: "",
        text: "",
        emptyText: "",
        maxLength: 1000,
        minLength: 0,
        allowInput: true,
        noInputCls: "mini-buttonedit-noInput",
        readOnlyCls: "mini-buttonedit-readOnly",
        disabledCls: "mini-buttonedit-disabled",
        emptyCls: "mini-buttonedit-empty",
        focusCls: "mini-buttonedit-focus",
        buttonDisabledCls: "mini-buttonedit-button-disabled",
        buttonCls: "mini-buttonedit-button",
        buttonHoverCls: "mini-buttonedit-button-hover",
        buttonPressedCls: "mini-buttonedit-button-pressed",
        set: function ($) {
            if (typeof $ == "string") return this;
            this.allowUpdate = !($.enabled == false || $.allowInput == false || $.readOnly);
            mini.ButtonEdit.superclass.set.call(this, $);
            if (this.allowUpdate === false) {
                this.allowUpdate = true;
                this.doUpdate()
            }
            return this
        },
        uiCls: "mini-buttonedit",
        _create: function () {
            this.el = document.createElement("div");
            this.el.className = "mini-buttonedit";
            var $ = this.password ? "password" : "text";
            this.el.innerHTML = "<div class=\"mini-buttonedit-inner\"><input type=\"" + $ + "\" class=\"mini-buttonedit-input\" autocomplete=\"off\"/></div><div class=\"mini-buttonedit-errorIcon\"></div><input name=\"" + this.name + "\" type=\"hidden\"/>";
            var A = this.el.getElementsByTagName("input");
            this.textEl = A[0];
            this.valueEl = A[1];
            var _ = this.el.getElementsByTagName("div");
            this.innerEl = _[0];
            this.errorIconEl = _[1];
            this.updateButtons();
            this.doUpdate()
        },
        destroy: function ($) {
            if (this.textEl) {
                mini.clearEvent(this.textEl);
                this.textEl = null
            }
            mini.ButtonEdit.superclass.destroy.call(this, $)
        },
        _initEvents: function () {
            mini._BindEvents(function () {
                mini.on(this.el, "mousedown", this.__OnMouseDown, this);
                mini.on(this.textEl, "focus", this.__OnFocus, this);
                mini.on(this.textEl, "change", this.__OnInputTextChanged, this)
            }, this)
        },
        _inputEventsInited: false,
        _initInputEvents: function () {
            if (this._inputEventsInited) return;
            this._inputEventsInited = true;
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.textEl, "blur", this.__OnBlur, this);
            mini.on(this.textEl, "keydown", this.__OnInputKeyDown, this);
            mini.on(this.textEl, "keyup", this.__OnInputKeyUp, this);
            mini.on(this.textEl, "keypress", this.__OnInputKeyPress, this)
        },
        doUpdate: function () {
            if (this.allowUpdate === false) return;
            if (this.enabled) this.removeCls(this.disabledCls);
            else this.addCls(this.disabledCls);
            if (this.isReadOnly() || this.allowInput == false) this.textEl.readOnly = true;
            else this.textEl.readOnly = false;
            if (this.isReadOnly()) this.addCls(this.readOnlyCls);
            else this.removeCls(this.readOnlyCls);
            if (this.allowInput) this.removeCls(this.noInputCls);
            else this.addCls(this.noInputCls);
            if (this.required) this.addCls(this.requiredCls);
            else this.removeCls(this.requiredCls)
        },
        doLayout: function () {
            if (!this.canLayout()) return;
            mini.ButtonEdit.superclass.doLayout.call(this);
            if (mini.isIE6 || mini.isIE7) {
                this.textEl.style.display = "none";
                var $ = this.textEl.parentNode,
                    _ = mini.getWidth($, true);
                this.textEl.style.display = "";
                this.textEl.style.width = (_ - 2 > 0 ? _ - 2 : 0) + "px"
            }
        },
        _doEmpty: function () {},
        focus: function () {
            try {
                this.textEl.focus();
                var $ = this;
                setTimeout(function () {
                    if ($.focused) $.textEl.focus()
                }, 10)
            } catch (_) {}
        },
        blur: function () {
            try {
                this.textEl.blur()
            } catch ($) {}
        },
        getTextEl: function () {
            return this.textEl
        },
        setName: function ($) {
            this.name = $;
            this.valueEl.name = $
        },
        setEmptyText: function ($) {
            if ($ === null || $ === undefined) $ = "";
            this.emptyText = $;
            this._doEmpty()
        },
        setText: function ($) {
            if ($ === null || $ === undefined) $ = "";
            var _ = this.text !== $;
            this.text = $;
            this.textEl.value = $
        },
        getText: function () {
            var $ = this.textEl.value;
            return $ != this.emptyText ? $ : ""
        },
        setValue: function ($) {
            if ($ === null || $ === undefined) $ = "";
            var _ = this.value !== $;
            this.value = $;
            this._doEmpty()
        },
        getValue: function () {
            return this.value
        },
        getFormValue: function () {
            value = this.value;
            if (value === null || value === undefined) value = "";
            return String(value)
        },
        setMaxLength: function ($) {
            $ = parseInt($);
            if (isNaN($)) return;
            this.maxLength = $;
            this.textEl.maxLength = $
        },
        setMinLength: function ($) {
            $ = parseInt($);
            if (isNaN($)) return;
            this.minLength = $
        },
        setAllowInput: function ($) {
            this.allowInput = $;
            this.doUpdate()
        },
        setReadOnly: function ($) {
            this.readOnly = $;
            this.doUpdate()
        },
        setEnabled: function ($) {
            if (this.enabled != $) {
                this.enabled = $;
                this.doUpdate()
            }
        },
        createButton: function (_) {
            var $ = mini.copyTo({
                name: "",
                cls: "",
                style: "",
                iconCls: "",
                iconStyle: "",
                position: "right",
                visible: true,
                enabled: true,
                html: ""
            }, _);
            if ($.type == "spin") $.html = "<div class=\"mini-buttonedit-spin\"><div id=\"up\" class=\"mini-buttonedit-up\"><span></span></div><div class=\"mini-buttonedit-spinSplit\"></div><div class=\"mini-buttonedit-down\"><span></span></div></div>";
            return $
        },
        addButton: function (_, $) {
            if (typeof _ == "string") _ = {
                iconCls: _
            };
            _ = this.createButton(_);
            if (typeof $ != "number") $ = this.buttons.length;
            this.buttons.insert($, _);
            this.updateButtons()
        },
        removeButton: function ($) {
            var _ = this.getButton($);
            if (!_) return;
            this.buttons.remove(_);
            this.updateButtons()
        },
        updateButton: function ($, A) {
            var _ = this.getButton($);
            if (!_) return;
            mini.copyTo(_, A);
            this.updateButtons()
        },
        getButtonEl: function (A) {
            var E = this.getButton(A);
            if (!E) return;
            var _ = this.innerEl.firstChild,
                C = _.rows[0].cells;
            for (var B = 0, D = C.length; B < D; B++) {
                    var $ = C[B];
                    if ($.id == A) return $
                }
        },
        getButton: function ($) {
            if (typeof $ == "number") return this.buttons[$];
            else for (var _ = 0, A = this.buttons.length; _ < A; _++) {
                var B = this.buttons[_];
                if (B.name == $) return B
            }
        },
        _cellSpacing: 1,
        updateButtons: function () {
            var I = "<table class=\"mini-buttonedit-border\" cellpadding=\"0\" cellspacing=\"" + this._cellSpacing + "\"><tr>",
                C = "",
                A = "",
                _ = 0;
            for (var $ = 0, F = this.buttons.length; $ < F; $++) {
                    var H = this.buttons[$];
                    if (!H.visible) continue;
                    var E = H.cls || "";
                    if (H.enabled == false) E += " " + this.buttonDisabledCls;
                    var B = "onmouseover=\"mini.addClass(this, '" + this.buttonHoverCls + "');\" " + "onmouseout=\"mini.removeClass(this, '" + this.buttonHoverCls + "');\"";
                    if (!H.enabled) B = "";
                    var G = "<td " + B + " id=\"" + $ + "\" class=\"mini-buttonedit-button " + E + "\"  style=\"" + H.style + "\">";
                    if (H.html) G += H.html;
                    else G += "<div class=\"mini-buttonedit-icon " + H.iconCls + "\" style=\"" + H.iconStyle + "\"></div>";
                    G += "</td>";
                    if (H.position == "left") {
                        _++;
                        C += G
                    } else A += G
                }
            I += C + "<td class=\"mini-buttonedit-inputWrap\"></td>" + A;
            I += "</tr></table>";
            this.textEl.parentNode.removeChild(this.textEl);
            this.innerEl.innerHTML = I;
            var D = this.el.getElementsByTagName("td");
            D[_].appendChild(this.textEl)
        },
        _initButtons: function () {
            this.buttons = [];
            var $ = this.createButton();
            this.buttons.push($)
        },
        errorCls: "mini-buttonedit-error",
        invalidCls: "mini-buttonedit-invalid",
        _getButtonByEvent: function (_) {
            var $ = mini.findParent(_.target, this.buttonCls);
            if ($) return this.getButton(parseInt($.id));
            return null
        },
        __OnClick: function (_) {
            if (this.isReadOnly()) return;
            if (!mini.isAncestor(this.textEl, _.target)) {
                var $ = this._getButtonByEvent(_);
                if ($ && $.enabled) this._OnButtonClick($, _)
            } else this.textEl.focus()
        },
        __OnMouseDown: function (D) {
            if (this.isReadOnly()) return;
            if (!mini.isAncestor(this.textEl, D.target)) {
                var $ = this;
                setTimeout(function () {
                    $.focus();
                    mini.selectRange($.textEl, 1000, 1000)
                }, 1);
                var B = this._getButtonByEvent(D),
                    _ = mini.findParent(D.target, this.buttonCls);
                if (B && B.enabled) {
                        if (B.type == "spin") {
                            var A = mini.findParent(D.target, "mini-buttonedit-up"),
                                C = mini.findParent(D.target, "mini-buttonedit-down");
                            if (A) {
                                    mini.addClass(A, this.buttonPressedCls);
                                    this._OnButtonMouseDown(B, D, "up")
                                } else if (C) {
                                    mini.addClass(C, this.buttonPressedCls);
                                    this._OnButtonMouseDown(B, D, "down")
                                }
                        } else {
                            mini.addClass(_, this.buttonPressedCls);
                            this._OnButtonMouseDown(B, D)
                        }
                        mini.on(document, "mouseup", this.__OnDocMouseup, this)
                    }
            }
        },
        __OnDocMouseup: function (A) {
            var _ = this.innerEl.firstChild.rows[0].cells,
                $ = this;
            setTimeout(function () {
                    for (var B = 0, C = _.length; B < C; B++) {
                        var A = _[B];
                        mini.removeClass(A, $.buttonPressedCls);
                        var D = $.getButton(parseInt(A.id));
                        if (D && D.type == "spin") {
                            mini.removeClass(A.firstChild.firstChild, $.buttonPressedCls);
                            mini.removeClass(A.firstChild.lastChild, $.buttonPressedCls)
                        }
                    }
                    mini.removeClass($.el, $.pressedCls)
                }, 80);
            mini.un(document, "mouseup", this.__OnDocMouseup, this)
        },
        __OnFocus: function ($) {
            this.doUpdate();
            this._initInputEvents();
            if (this.isReadOnly()) return;
            this.focused = true;
            this.addCls(this.focusCls)
        },
        __OnBlur: function (_) {
            this.focused = false;
            var $ = this;
            setTimeout(function () {
                if ($.focused == false) $.removeCls($.focusCls)
            }, 2)
        },
        __OnInputKeyDown: function ($) {
            this.fire("keydown", {
                htmlEvent: $
            });
            if ($.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) return false;
            if ($.keyCode == 13) this.fire("enter")
        },
        __OnInputKeyUp: function ($) {
            this.fire("keyup", {
                htmlEvent: $
            })
        },
        __OnInputKeyPress: function ($) {
            this.fire("keypress", {
                htmlEvent: $
            })
        },
        _OnButtonClick: function (_, $) {
            var A = {
                htmlEvent: $,
                button: _,
                index: this.buttons.indexOf(_),
                name: _.name,
                cancel: false
            };
            this.fire("beforebuttonclick", A);
            if (A.cancel == true) return;
            this.fire("buttonclick", A)
        },
        _OnButtonMouseDown: function (A, _, $) {
            this.focus();
            this.addCls(this.focusCls);
            this.fire("buttonmousedown", {
                htmlEvent: _,
                button: A,
                index: this.buttons.indexOf(A),
                name: A.name,
                spinType: $
            })
        },
        onButtonClick: function (_, $) {
            this.on("buttonclick", _, $)
        },
        onButtonMouseDown: function (_, $) {
            this.on("buttonmousedown", _, $)
        },
        onTextChanged: function (_, $) {
            this.on("textchanged", _, $)
        },
        getAttrs: function ($) {
            var A = mini.ButtonEdit.superclass.getAttrs.call(this, $),
                _ = jQuery($);
            mini._ParseString($, A, ["value", "text", "onenter", "onkeydown", "onkeyup", "onkeypress", "onbuttonclick", "onbuttonmousedown", "ontextchanged"]);
            mini._ParseBool($, A, ["allowInput"]);
            mini._ParseInt($, A, ["maxLength", "minLength"]);
            return A
        }
    });
mini.regClass(mini.ButtonEdit, "buttonedit");
mini.TextBox = function () {
        mini.TextBox.superclass.constructor.call(this)
    };
mini.extend(mini.TextBox, mini.ValidatorBase, {
        name: "",
        formField: true,
        text: "",
        value: "",
        defaultValue: "",
        maxLength: 1000,
        minLength: 0,
        focusCls: "mini-textbox-focus",
        disabledCls: "mini-disabled",
        uiCls: "mini-textbox",
        _InputType: "text",
        _create: function () {
            var A = "<input type=\"" + this._InputType + "\" class=\"mini-textbox-input\" autocomplete=\"off\"/>";
            if (this._InputType == "textarea") A = "<textarea class=\"mini-textbox-input\" autocomplete=\"off\"/></textarea>";
            var _ = "<table class=\"mini-textbox\" cellpadding=\"0\" cellspacing=\"0\"><tr ><td class=\"mini-textbox-border\">" + A + "<input type=\"hidden\"/></td></tr></table>",
                $ = document.createElement("div");
            $.innerHTML = _;
            this.el = $.firstChild;
            this._initElements()
        },
        _initElements: function () {
            var $ = this.el.getElementsByTagName("td")[0];
            this.textEl = $.firstChild;
            this.valueEl = $.lastChild
        },
        destroy: function ($) {
            if (this.textEl) {
                mini.clearEvent(this.textEl);
                this.textEl = null
            }
            if (this.valueEl) {
                mini.clearEvent(this.valueEl);
                this.valueEl = null
            }
            mini.TextBox.superclass.destroy.call(this, $)
        },
        _initEvents: function () {
            mini._BindEvents(function () {
                mini.on(this.textEl, "focus", this.__OnFocus, this);
                mini.on(this.el, "mousedown", this.__OnMouseDown, this);
                mini.on(this.textEl, "change", this.__OnInputTextChanged, this)
            }, this)
        },
        _inputEventsInited: false,
        _initInputEvents: function () {
            if (this._inputEventsInited) return;
            this._inputEventsInited = true;
            mini.on(this.textEl, "blur", this.__OnBlur, this);
            mini.on(this.textEl, "keydown", this.__OnInputKeyDown, this);
            mini.on(this.textEl, "keyup", this.__OnInputKeyUp, this);
            mini.on(this.textEl, "keypress", this.__OnInputKeyPress, this)
        },
        setName: function ($) {
            if (this.name != $) {
                this.name = $;
                this.valueEl.name = $
            }
        },
        setValue: function ($) {
            if ($ === null || $ === undefined) $ = "";
            if (this.value != $) {
                this.value = $;
                this.valueEl.value = this.textEl.value = this.getFormValue()
            }
        },
        getValue: function () {
            return this.value
        },
        getFormValue: function () {
            value = this.value;
            if (value === null || value === undefined) value = "";
            return String(value)
        },
        setMaxLength: function ($) {
            $ = parseInt($);
            if (isNaN($)) return;
            this.maxLength = $;
            this.textEl.maxLength = $
        },
        setMinLength: function ($) {
            $ = parseInt($);
            if (isNaN($)) return;
            this.minLength = $
        },
        setAllowInput: function ($) {
            if (this.allowInput != $) {
                this.allowInput = $;
                this.doUpdate()
            }
        },
        setReadOnly: function ($) {
            if (this.readOnly != $) {
                this.readOnly = $;
                this.doUpdate()
            }
        },
        setEnabled: function ($) {
            if (this.enabled != $) {
                this.enabled = $;
                this.doUpdate()
            }
        },
        doUpdate: function () {
            if (this.enabled) this.removeCls(this.disabledCls);
            else this.addCls(this.disabledCls);
            if (this.isReadOnly() || this.allowInput == false) this.textEl.readOnly = true;
            else this.textEl.readOnly = false;
            if (this.required) this.addCls(this.requiredCls);
            else this.removeCls(this.requiredCls)
        },
        focus: function () {
            try {
                this.textEl.focus()
            } catch ($) {}
        },
        blur: function () {
            try {
                this.textEl.blur()
            } catch ($) {}
        },
        errorIconEl: null,
        getErrorIconEl: function () {
            if (!this.errorIconEl) {
                var _ = this.el.rows[0],
                    $ = _.insertCell(1);
                $.style.cssText = "width:18px;vertical-align:top;";
                $.innerHTML = "<div class=\"mini-errorIcon\" style=\"display:block;\"></div>";
                this.errorIconEl = $.firstChild
            }
            return this.errorIconEl
        },
        _RemoveErrorIcon: function () {
            if (this.errorIconEl) {
                var $ = this.errorIconEl.parentNode;
                jQuery($).remove()
            }
            this.errorIconEl = null
        },
        __OnMouseDown: function (_) {
            var $ = this;
            if (!mini.isAncestor(this.textEl, _.target)) setTimeout(function () {
                $.focus();
                mini.selectRange($.textEl, 1000, 1000)
            }, 1);
            else this.textEl.focus()
        },
        __OnInputTextChanged: function (_) {
            var $ = this.getValue();
            this.setValue(this.textEl.value);
            if ($ !== this.getValue()) this._OnValueChanged()
        },
        __OnInputKeyDown: function (_) {
            this.fire("keydown", {
                htmlEvent: _
            });
            if (_.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) return false;
            if (_.keyCode == 13) {
                var $ = this;
                setTimeout(function () {
                    if (mini.isIE9) $.__OnInputTextChanged(null);
                    $.fire("enter")
                }, 10)
            }
        },
        __OnInputKeyUp: function ($) {
            this.fire("keyup", {
                htmlEvent: $
            })
        },
        __OnInputKeyPress: function ($) {
            this.fire("keypress", {
                htmlEvent: $
            })
        },
        __OnFocus: function ($) {
            this.doUpdate();
            this.focused = true;
            this.addCls(this.focusCls);
            this._initInputEvents()
        },
        __OnBlur: function (_) {
            this.focused = false;
            var $ = this;
            setTimeout(function () {
                if ($.focused == false) $.removeCls($.focusCls)
            }, 2)
        },
        getAttrs: function ($) {
            var A = mini.TextBox.superclass.getAttrs.call(this, $),
                _ = jQuery($);
            mini._ParseString($, A, ["value", "text", "onenter", "onkeydown", "onkeyup", "onkeypress"]);
            mini._ParseBool($, A, ["allowInput"]);
            mini._ParseInt($, A, ["maxLength", "minLength"]);
            return A
        }
    });
mini.regClass(mini.TextBox, "textbox");
mini.Password = function () {
        mini.Password.superclass.constructor.call(this)
    };
mini.extend(mini.Password, mini.TextBox, {
        uiCls: "mini-password",
        _InputType: "password"
    });
mini.regClass(mini.Password, "password");
mini.TextArea = function () {
        mini.TextArea.superclass.constructor.call(this)
    };
mini.extend(mini.TextArea, mini.TextBox, {
        width: 180,
        height: 50,
        _InputType: "textarea",
        uiCls: "mini-textarea",
        doLayout: function () {
            mini.TextArea.superclass.doLayout.call(this);
            this._doHeight()
        },
        _doHeight: function () {
            this.textEl.style.display = "none";
            var $ = mini.getHeight(this.textEl.parentNode);
            $ -= 4;
            if ($ < 0) $ = 0;
            this.textEl.style.display = "block";
            this.textEl.style.height = $ + "px"
        },
        setStyle: function ($) {
            mini.setStyle(this.el, $);
            this._doHeight()
        },
        setHeight: function ($) {
            if (parseInt($) == $) $ += "px";
            this.el.style.height = $;
            this._doHeight()
        }
    });
mini.regClass(mini.TextArea, "textarea");
mini.PopupEdit = function () {
        mini.PopupEdit.superclass.constructor.call(this);
        this._createPopup()
    };
mini.extend(mini.PopupEdit, mini.ButtonEdit, {
        uiCls: "mini-popupedit",
        popup: null,
        popupCls: "mini-buttonedit-popup",
        hoverCls: "mini-buttonedit-hover",
        pressedCls: "mini-buttonedit-pressed",
        destroy: function ($) {
            if (this.isShowPopup()) this.hidePopup();
            if (this.popup) {
                this.popup.destroy();
                this.popup = null
            }
            mini.PopupEdit.superclass.destroy.call(this, $)
        },
        _initEvents: function () {
            mini.PopupEdit.superclass._initEvents.call(this);
            mini._BindEvents(function () {
                mini.on(this.el, "mouseover", this.__OnMouseOver, this);
                mini.on(this.el, "mouseout", this.__OnMouseOut, this);
                this.on("buttonclick", this.__OnButtonClick, this)
            }, this)
        },
        _initButtons: function () {
            this.buttons = [];
            var $ = this.createButton({
                cls: "mini-buttonedit-popup",
                iconCls: "mini-buttonedit-icons-popup",
                name: "popup"
            });
            this.buttons.push($)
        },
        __OnMouseOver: function ($) {
            if (this.isReadOnly() || this.allowInput) return;
            if (mini.findParent($.target, "mini-buttonedit-border")) this.addCls(this.hoverCls)
        },
        __OnMouseOut: function ($) {
            if (this.isReadOnly() || this.allowInput) return;
            this.removeCls(this.hoverCls)
        },
        __OnMouseDown: function ($) {
            if (this.isReadOnly()) return;
            mini.PopupEdit.superclass.__OnMouseDown.call(this, $);
            if (this.allowInput == false && mini.findParent($.target, "mini-buttonedit-border")) {
                mini.addClass(this.el, this.pressedCls);
                mini.on(document, "mouseup", this.__OnDocMouseup, this)
            }
        },
        __OnInputKeyDown: function ($) {
            this.fire("keydown", {
                htmlEvent: $
            });
            if ($.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) return false;
            if ($.keyCode == 9) {
                this.hidePopup();
                return
            }
            if ($.keyCode == 27) {
                this.hidePopup();
                return
            }
            if ($.keyCode == 13) this.fire("enter");
            if (this.isShowPopup()) if ($.keyCode == 13 || $.keyCode == 27) $.stopPropagation()
        },
        within: function ($) {
            if (mini.isAncestor(this.el, $.target)) return true;
            if (this.popup.within($)) return true;
            return false
        },
        popupWidth: "100%",
        popupMinWidth: 50,
        popupMaxWidth: 2000,
        popupHeight: "",
        popupMinHeight: 30,
        popupMaxHeight: 2000,
        setPopup: function ($) {
            if (typeof $ == "string") {
                mini.parse($);
                $ = mini.get($)
            }
            var _ = mini.getAndCreate($);
            if (!_) return;
            _.setVisible(true);
            _.render(this.popup.contentEl);
            _.owner = this
        },
        getPopup: function () {
            if (!this.popup) this._createPopup();
            return this.popup
        },
        _createPopup: function () {
            this.popup = new mini.Popup();
            this.popup.setShowAction("none");
            this.popup.setHideAction("outerclick");
            this.popup.setPopupEl(this.el);
            this.popup.on("BeforeClose", this.__OnPopupBeforeClose, this)
        },
        __OnPopupBeforeClose: function ($) {
            if (this.within($.htmlEvent)) $.cancel = true
        },
        showPopup: function () {
            var _ = this.getPopup(),
                B = this.getBox(),
                $ = this.popupWidth;
            if (this.popupWidth == "100%") $ = B.width;
            _.setWidth($);
            var A = parseInt(this.popupHeight);
            if (!isNaN(A)) _.setHeight(A);
            else _.setHeight("auto");
            _.setMinWidth(this.popupMinWidth);
            _.setMinHeight(this.popupMinHeight);
            _.setMaxWidth(this.popupMaxWidth);
            _.setMaxHeight(this.popupMaxHeight);
            _.showAtEl(this.el, {
                    hAlign: "left",
                    vAlign: "below",
                    outVAlign: "above",
                    popupCls: this.popupCls
                })
        },
        hidePopup: function () {
            var $ = this.getPopup();
            $.close()
        },
        isShowPopup: function () {
            if (this.popup && this.popup.visible) return true;
            else return false
        },
        setPopupWidth: function ($) {
            this.popupWidth = $
        },
        __OnClick: function (A) {
            if (this.isReadOnly()) return;
            if (!mini.isAncestor(this.textEl, A.target)) {
                var _ = this._getButtonByEvent(A);
                if (_ && _.enabled) {
                    this._OnButtonClick(_, A);
                    return
                }
            }
            if (!this.allowInput && mini.findParent(A.target, "mini-buttonedit-border")) if (this.isShowPopup()) this.hidePopup();
            else {
                var $ = this;
                setTimeout(function () {
                    $.showPopup()
                }, 1)
            }
        },
        __OnButtonClick: function (_) {
            if (_.name == "popup") if (this.isShowPopup()) this.hidePopup();
            else {
                var $ = this;
                setTimeout(function () {
                    $.showPopup()
                }, 1)
            }
        },
        getAttrs: function ($) {
            var _ = mini.PopupEdit.superclass.getAttrs.call(this, $);
            mini._ParseString($, _, ["popupWidth", "popupHeight", "popup"]);
            mini._ParseInt($, _, ["popupMinWidth", "popupMaxWidth", "popupMinHeight", "popupMaxHeight"]);
            return _
        }
    });
mini.regClass(mini.PopupEdit, "popupedit");
mini.ComboBox = function () {
        this.data = [];
        this.columns = [];
        mini.ComboBox.superclass.constructor.call(this)
    };
mini.extend(mini.ComboBox, mini.PopupEdit, {
        text: "",
        value: "",
        valueField: "id",
        textField: "text",
        delimiter: ",",
        multiSelect: false,
        data: [],
        url: "",
        columns: [],
        allowInput: false,
        popupMaxHeight: 300,
        set: function (A) {
            if (typeof A == "string") return this;
            var $ = A.value;
            delete A.value;
            var B = A.url;
            delete A.url;
            var _ = A.data;
            delete A.data;
            mini.ComboBox.superclass.set.call(this, A);
            if (!mini.isNull(_)) {
                this.setData(_);
                A.data = _
            }
            if (!mini.isNull(B)) {
                this.setUrl(B);
                A.url = B
            }
            if (!mini.isNull($)) {
                this.setValue($);
                A.value = $
            }
            return this
        },
        uiCls: "mini-combobox",
        _createPopup: function () {
            mini.ComboBox.superclass._createPopup.call(this);
            this.listbox = new mini.ListBox();
            this.listbox.setBorderStyle("border:0;");
            this.listbox.setStyle("width:100%;height:auto;");
            this.listbox.render(this.popup.contentEl);
            this.listbox.on("itemclick", this.__OnItemClick, this)
        },
        showPopup: function () {
            this.listbox.setHeight("auto");
            mini.ComboBox.superclass.showPopup.call(this);
            var $ = this.popup.el.style.height;
            if ($ == "" || $ == "auto") this.listbox.setHeight("auto");
            else this.listbox.setHeight("100%");
            this.listbox.setValue(this.value)
        },
        getItem: function ($) {
            return typeof $ == "object" ? $ : this.data[$]
        },
        indexOf: function ($) {
            return this.data.indexOf($)
        },
        getAt: function ($) {
            return this.data[$]
        },
        load: function ($) {
            if (typeof $ == "string") this.setUrl($);
            else this.setData($)
        },
        setData: function (data) {
            if (typeof data == "string") data = eval("(" + data + ")");
            if (!mini.isArray(data)) data = [];
            this.listbox.setData(data);
            this.data = this.listbox.data;
            var v = this.listbox.getValue();
            this.setValue(v)
        },
        setUrl: function ($) {
            this.getPopup();
            this.listbox.setUrl($);
            this.url = this.listbox.url;
            this.data = this.listbox.data
        },
        setValueField: function ($) {
            this.valueField = $;
            if (this.listbox) this.listbox.setValueField($)
        },
        setTextField: function ($) {
            if (this.listbox) this.listbox.setTextField($);
            this.textField = $
        },
        setDisplayField: function ($) {
            this.setTextField($)
        },
        setValue: function ($) {
            if (this.value != $) {
                var _ = this.listbox.getValueAndText($);
                this.value = _[0];
                this.valueEl.value = this.value;
                this.textEl.value = _[1]
            } else {
                _ = this.listbox.getValueAndText($);
                this.textEl.value = _[1]
            }
        },
        setMultiSelect: function ($) {
            if (this.multiSelect != $) {
                this.multiSelect = $;
                if (this.listbox) {
                    this.listbox.setMultiSelect($);
                    this.listbox.setShowCheckBox($)
                }
            }
        },
        setColumns: function ($) {
            if (!mini.isArray($)) $ = [];
            this.columns = $;
            this.listbox.setColumns($)
        },
        showNullItem: false,
        setShowNullItem: function ($) {
            if (this.showNullItem != $) {
                this.showNullItem = $;
                this.listbox.setShowNullItem($)
            }
        },
        _OnValueChanged: function () {
            if (this.validateOnChanged) this.validate();
            var $ = this.getValue(),
                A = this.getSelecteds(),
                _ = A[0];
            this.fire("valuechanged", {
                    value: $,
                    selecteds: A,
                    selected: _
                })
        },
        getSelecteds: function () {
            return this.listbox.findItems(this.value)
        },
        getSelected: function () {
            return this.getSelecteds()[0]
        },
        __OnItemClick: function (B) {
            var A = this.listbox.getValue(),
                _ = this.listbox.getValueAndText(A),
                $ = this.getValue();
            this.setValue(A);
            this.setText(_[1]);
            if ($ != this.getValue()) this._OnValueChanged();
            if (!this.multiSelect) this.hidePopup();
            this.focus()
        },
        __OnInputKeyDown: function (B) {
            this.fire("keydown", {
                htmlEvent: B
            });
            if (B.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) return false;
            if (B.keyCode == 9) {
                this.hidePopup();
                return
            }
            switch (B.keyCode) {
            case 27:
                if (this.isShowPopup()) B.stopPropagation();
                this.hidePopup();
                break;
            case 13:
                if (this.isShowPopup()) {
                    B.preventDefault();
                    B.stopPropagation();
                    var _ = this.listbox.getFocusedIndex();
                    if (_ != -1) {
                        var $ = this.listbox.getAt(_),
                            A = this.listbox.getValueAndText([$]);
                        this.setValue(A[0]);
                        this.setText(A[1]);
                        this._OnValueChanged();
                        this.hidePopup()
                    }
                } else this.fire("enter");
                break;
            case 37:
                break;
            case 38:
                _ = this.listbox.getFocusedIndex();
                if (_ == -1) {
                    _ = 0;
                    if (!this.multiSelect) {
                        $ = this.listbox.findItems(this.value)[0];
                        if ($) _ = this.listbox.indexOf($)
                    }
                }
                if (this.isShowPopup()) if (!this.multiSelect) {
                    _ -= 1;
                    if (_ < 0) _ = 0;
                    this.listbox.focusItem(_)
                }
                break;
            case 39:
                break;
            case 40:
                _ = this.listbox.getFocusedIndex();
                if (_ == -1) {
                    _ = 0;
                    if (!this.multiSelect) {
                        $ = this.listbox.findItems(this.value)[0];
                        if ($) _ = this.listbox.indexOf($)
                    }
                }
                if (this.isShowPopup()) {
                    if (!this.multiSelect) {
                        _ += 1;
                        if (_ > this.listbox.getCount() - 1) _ = this.listbox.getCount() - 1;
                        this.listbox.focusItem(_)
                    }
                } else {
                    this.showPopup();
                    if (!this.multiSelect) this.listbox.focusItem(_)
                }
                break;
            default:
                this._tryQuery(this.textEl.value);
                break
            }
        },
        __OnInputKeyUp: function ($) {
            this.fire("keyup", {
                htmlEvent: $
            })
        },
        __OnInputKeyPress: function ($) {
            this.fire("keypress", {
                htmlEvent: $
            })
        },
        _tryQuery: function (_) {
            var $ = this;
            setTimeout(function () {
                var A = $.textEl.value;
                if (A != _) $._doQuery(A)
            }, 10)
        },
        _doQuery: function (A) {
            var _ = [];
            for (var B = 0, D = this.data.length; B < D; B++) {
                var $ = this.data[B],
                    C = $[this.textField];
                if (typeof C == "string") if (C.indexOf(A) != -1) _.push($)
            }
            this.listbox.setData(_);
            this._filtered = true;
            if (A !== "" || this.isShowPopup()) this.showPopup()
        },
        hidePopup: function () {
            var $ = this.getPopup();
            $.close();
            if (this._filtered) {
                this._filtered = false;
                this.listbox.setData(this.data)
            }
        },
        __OnInputTextChanged: function ($) {
            if (this.multiSelect);
            else if (this.textEl.value == "" && !this.value) {
                this.setValue("");
                this._OnValueChanged()
            }
        },
        getAttrs: function (G) {
            var E = mini.ComboBox.superclass.getAttrs.call(this, G);
            mini._ParseString(G, E, ["url", "data", "textField", "valueField", "displayField"]);
            mini._ParseBool(G, E, ["multiSelect", "showNullItem"]);
            if (E.displayField) E.textField = E.displayField;
            var C = E.valueField || this.valueField,
                H = E.textField || this.textField;
            if (G.nodeName.toLowerCase() == "select") {
                    var I = [];
                    for (var F = 0, D = G.length; F < D; F++) {
                        var $ = G.options[F],
                            _ = {};
                        _[H] = $.text;
                        _[C] = $.value;
                        I.push(_)
                    }
                    if (I.length > 0) E.data = I
                } else {
                    var J = mini.getChildNodes(G);
                    for (F = 0, D = J.length; F < D; F++) {
                        var A = J[F],
                            B = jQuery(A).attr("property");
                        if (!B) continue;
                        B = B.toLowerCase();
                        if (B == "columns") E.columns = mini._ParseColumns(A);
                        else if (B == "data") E.data = A.innerHTML
                    }
                }
            return E
        }
    });
mini.regClass(mini.ComboBox, "combobox");
mini.DatePicker = function () {
        mini.DatePicker.superclass.constructor.call(this)
    };
mini.extend(mini.DatePicker, mini.PopupEdit, {
        format: "yyyy-MM-dd",
        popupWidth: "",
        viewDate: new Date(),
        showTime: false,
        timeFormat: "H:mm",
        showTodayButton: true,
        showClearButton: true,
        uiCls: "mini-datepicker",
        _getCalendar: function () {
            if (!mini.DatePicker._Calendar) {
                var $ = mini.DatePicker._Calendar = new mini.Calendar();
                $.setStyle("border:0;")
            }
            return mini.DatePicker._Calendar
        },
        _createPopup: function () {
            mini.DatePicker.superclass._createPopup.call(this);
            this.calendar = this._getCalendar()
        },
        showPopup: function () {
            this.calendar.beginUpdate();
            this.calendar.render(this.popup.contentEl);
            this.calendar.set({
                showTime: this.showTime,
                timeFormat: this.timeFormat,
                showClearButton: this.showClearButton,
                showTodayButton: this.showTodayButton
            });
            this.calendar.setValue(this.value);
            if (this.value) this.calendar.setViewDate(this.value);
            else this.calendar.setViewDate(this.viewDate);
            if (this.calendar._target) {
                var $ = this.calendar._target;
                this.calendar.un("timechanged", $.__OnTimeChanged, $);
                this.calendar.un("dateclick", $.__OnDateClick, $);
                this.calendar.un("drawdate", $.__OnDrawDate, $)
            }
            this.calendar.on("timechanged", this.__OnTimeChanged, this);
            this.calendar.on("dateclick", this.__OnDateClick, this);
            this.calendar.on("drawdate", this.__OnDrawDate, this);
            this.calendar.endUpdate();
            mini.DatePicker.superclass.showPopup.call(this);
            this.calendar._target = this
        },
        hidePopup: function () {
            mini.DatePicker.superclass.hidePopup.call(this);
            this.calendar.un("timechanged", this.__OnTimeChanged, this);
            this.calendar.un("dateclick", this.__OnDateClick, this);
            this.calendar.un("drawdate", this.__OnDrawDate, this)
        },
        within: function ($) {
            if (mini.isAncestor(this.el, $.target)) return true;
            if (this.calendar.within($)) return true;
            return false
        },
        __OnDrawDate: function ($) {
            this.fire("drawdate", $)
        },
        __OnDateClick: function (A) {
            var _ = this.calendar.getValue(),
                $ = this.getFormValue();
            this.setValue(_);
            if ($ !== this.getFormValue()) this._OnValueChanged();
            this.focus();
            this.hidePopup()
        },
        __OnTimeChanged: function (_) {
            var $ = this.calendar.getValue();
            this.setValue($);
            this._OnValueChanged()
        },
        setFormat: function ($) {
            if (typeof $ != "string") return;
            if (this.format != $) {
                this.format = $;
                this.textEl.value = this.valueEl.value = this.getFormValue()
            }
        },
        setValue: function ($) {
            $ = mini.parseDate($);
            if (mini.isNull($)) $ = "";
            if (this.value != $) {
                this.value = $;
                this.textEl.value = this.valueEl.value = this.getFormValue()
            }
        },
        getValue: function () {
            if (!mini.isDate(this.value)) return null;
            return this.value
        },
        getFormValue: function () {
            if (!mini.isDate(this.value)) return "";
            return mini.formatDate(this.value, this.format)
        },
        setViewDate: function ($) {
            $ = mini.parseDate($);
            if (!mini.isDate($)) return;
            this.viewDate = $
        },
        setShowTime: function ($) {
            if (this.showTime != $) this.showTime = $
        },
        setTimeFormat: function ($) {
            if (this.timeFormat != $) this.timeFormat = $
        },
        setShowTodayButton: function ($) {
            this.showTodayButton = $
        },
        setShowClearButton: function ($) {
            this.showClearButton = $
        },
        __OnInputTextChanged: function (B) {
            var A = this.textEl.value,
                $ = mini.parseDate(A);
            if (!$ || isNaN($) || $.getFullYear() == 1970) $ = null;
            var _ = this.getFormValue();
            this.setValue($);
            if ($ == null) this.textEl.value = "";
            if (_ !== this.getFormValue()) this._OnValueChanged()
        },
        __OnInputKeyDown: function ($) {
            this.fire("keydown", {
                htmlEvent: $
            });
            if ($.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) return false;
            if ($.keyCode == 9) {
                this.hidePopup();
                return
            }
            switch ($.keyCode) {
            case 27:
                if (this.isShowPopup()) $.stopPropagation();
                this.hidePopup();
                break;
            case 13:
                if (this.isShowPopup()) {
                    $.preventDefault();
                    $.stopPropagation();
                    this.hidePopup()
                } else this.fire("enter");
                break;
            case 37:
                break;
            case 38:
                break;
            case 39:
                break;
            case 40:
                this.showPopup();
                break;
            default:
                break
            }
        },
        getAttrs: function ($) {
            var _ = mini.DatePicker.superclass.getAttrs.call(this, $);
            mini._ParseString($, _, ["format", "viewDate", "timeFormat", "ondrawdate"]);
            mini._ParseBool($, _, ["showTime", "showTodayButton", "showClearButton"]);
            return _
        }
    });
mini.regClass(mini.DatePicker, "datepicker");
mini.Calendar = function () {
        this.viewDate = new Date(),
        this.selectedDates = [];
        mini.Calendar.superclass.constructor.call(this)
    };
mini.extend(mini.Calendar, mini.Control, {
        width: 230,
        height: 200,
        _clearBorder: false,
        viewDate: null,
        selectedDate: "",
        selectedDates: [],
        multiSelect: false,
        firstDayOfWeek: 0,
        todayText: "Today",
        clearText: "Clear",
        okText: "OK",
        cancelText: "Cancel",
        daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        format: "MMM, yyyy",
        timeFormat: "H:mm",
        showTime: false,
        currentTime: false,
        rows: 1,
        columns: 1,
        headerCls: "",
        bodyCls: "",
        footerCls: "",
        todayCls: "mini-calendar-today",
        weekendCls: "mini-calendar-weekend",
        otherMonthCls: "mini-calendar-othermonth",
        selectedDateCls: "mini-calendar-selected",
        showHeader: true,
        showFooter: true,
        showWeekNumber: true,
        showDaysHeader: true,
        showMonthButtons: true,
        showYearButtons: true,
        showTodayButton: true,
        showClearButton: true,
        isWeekend: function (_) {
            var $ = _.getDay();
            return $ == 0 || $ == 6
        },
        getFirstDateOfMonth: function ($) {
            var $ = new Date($.getFullYear(), $.getMonth(), 1);
            return mini.getWeekStartDate($, this.firstDayOfWeek)
        },
        getShortWeek: function ($) {
            return this.daysShort[$]
        },
        uiCls: "mini-calendar",
        _create: function () {
            var C = "<tr style=\"width:100%;\"><td style=\"width:100%;\"></td></tr>";
            C += "<tr ><td><div class=\"mini-calendar-footer\">" + "<span style=\"display:inline-block;\"><input name=\"time\" class=\"mini-timespinner\" style=\"width:70px\" format=\"" + this.timeFormat + "\"/>" + "<span class=\"mini-calendar-footerSpace\"></span></span>" + "<span class=\"mini-calendar-tadayButton\">" + this.todayText + "</span>" + "<span class=\"mini-calendar-footerSpace\"></span>" + "<span class=\"mini-calendar-clearButton\">" + this.clearText + "</span>" + "</div></td></tr>";
            var A = "<table class=\"mini-calendar\" cellpadding=\"0\" cellspacing=\"0\">" + C + "</table>",
                _ = document.createElement("div");
            _.innerHTML = A;
            this.el = _.firstChild;
            var $ = this.el.getElementsByTagName("tr"),
                B = this.el.getElementsByTagName("td");
            this.innerEl = B[0];
            this.footerEl = mini.byClass("mini-calendar-footer", this.el);
            this.timeWrapEl = this.footerEl.childNodes[0];
            this.todayButtonEl = this.footerEl.childNodes[1];
            this.footerSpaceEl = this.footerEl.childNodes[2];
            this.closeButtonEl = this.footerEl.lastChild;
            mini.parse(this.footerEl);
            this.timeSpinner = mini.getbyName("time", this.el);
            this.doUpdate()
        },
        destroy: function ($) {
            this.innerEl = this.footerEl = this.timeWrapEl = this.todayButtonEl = this.footerSpaceEl = this.closeButtonEl = null;
            mini.Calendar.superclass.destroy.call(this, $)
        },
        _initEvents: function () {
            this.timeSpinner.on("valuechanged", this.__OnTimeChanged, this);
            mini._BindEvents(function () {
                mini.on(this.el, "click", this.__OnClick, this);
                mini.on(this.el, "mousedown", this.__OnMouseDown, this)
            }, this)
        },
        getDateEl: function ($) {
            if (!$) return null;
            var _ = this.uid + "$" + mini.clearTime($).getTime();
            return document.getElementById(_)
        },
        within: function ($) {
            if (mini.isAncestor(this.el, $.target)) return true;
            if (this.menuEl && mini.isAncestor(this.menuEl, $.target)) return true;
            return false
        },
        setHeaderCls: function ($) {
            this.headerCls = $;
            this.doUpdate()
        },
        setBodyCls: function ($) {
            this.bodyCls = $;
            this.doUpdate()
        },
        setFooterCls: function ($) {
            this.footerCls = $;
            this.doUpdate()
        },
        setTodayCls: function ($) {
            this.todayCls = $;
            this.doUpdate()
        },
        setOtherMonthCls: function ($) {
            this.otherMonthCls = $;
            this.doUpdate()
        },
        setWeekendCls: function ($) {
            this.weekendCls = $;
            this.doUpdate()
        },
        setShowClearButton: function ($) {
            this.showClearButton = $;
            var _ = this.getButton("clear");
            if (_) this.doUpdate()
        },
        setShowHeader: function ($) {
            this.showHeader = $;
            this.doUpdate()
        },
        setShowFooter: function ($) {
            this.showFooter = $;
            this.doUpdate()
        },
        setShowWeekNumber: function ($) {
            this.showWeekNumber = $;
            this.doUpdate()
        },
        setShowDaysHeader: function ($) {
            this.showDaysHeader = $;
            this.doUpdate()
        },
        setShowMonthButtons: function ($) {
            this.showMonthButtons = $;
            this.doUpdate()
        },
        setShowYearButtons: function ($) {
            this.showYearButtons = $;
            this.doUpdate()
        },
        setShowTodayButton: function ($) {
            this.showTodayButton = $;
            this.doUpdate()
        },
        setShowClearButton: function ($) {
            this.showClearButton = $;
            this.doUpdate()
        },
        setViewDate: function ($) {
            if (!$) $ = new Date();
            this.viewDate = $;
            this.doUpdate()
        },
        setSelectedDate: function ($) {
            $ = mini.parseDate($);
            if (!mini.isDate($)) $ = "";
            else $ = new Date($.getTime());
            var _ = this.getDateEl(this.selectedDate);
            if (_) mini.removeClass(_, this.selectedDateCls);
            this.selectedDate = $;
            if (this.selectedDate) this.selectedDate = mini.cloneDate(this.selectedDate);
            _ = this.getDateEl(this.selectedDate);
            if (_) mini.addClass(_, this.selectedDateCls);
            this.fire("datechanged")
        },
        setSelectedDates: function ($) {
            if (!mini.isArray($)) $ = [];
            this.selectedDates = $;
            this.doUpdate()
        },
        getSelectedDate: function () {
            return this.selectedDate ? this.selectedDate : ""
        },
        setTime: function ($) {
            this.timeSpinner.setValue($)
        },
        getTime: function () {
            return this.timeSpinner.getFormValue()
        },
        setValue: function ($) {
            this.setSelectedDate($);
            this.setTime($)
        },
        getValue: function () {
            var $ = this.selectedDate;
            if ($) {
                $ = mini.clearTime($);
                if (this.showTime) {
                    var _ = this.timeSpinner.getValue();
                    $.setHours(_.getHours());
                    $.setMinutes(_.getMinutes());
                    $.setSeconds(_.getSeconds())
                }
            }
            return $ ? $ : ""
        },
        getFormValue: function () {
            var $ = this.getValue();
            if ($) return mini.formatDate($, "yyyy-MM-dd HH:mm:ss");
            return ""
        },
        isSelectedDate: function ($) {
            if (!$ || !this.selectedDate) return false;
            return mini.clearTime($).getTime() == mini.clearTime(this.selectedDate).getTime()
        },
        setMultiSelect: function ($) {
            this.multiSelect = $;
            this.doUpdate()
        },
        setRows: function ($) {
            if (isNaN($)) return;
            if ($ < 1) $ = 1;
            this.rows = $;
            this.doUpdate()
        },
        setColumns: function ($) {
            if (isNaN($)) return;
            if ($ < 1) $ = 1;
            this.columns = $;
            this.doUpdate()
        },
        setShowTime: function ($) {
            if (this.showTime != $) {
                this.showTime = $;
                this.doLayout()
            }
        },
        setTimeFormat: function ($) {
            if (this.timeFormat != $) {
                this.timeSpinner.setFormat($);
                this.timeFormat = this.timeSpinner.format
            }
        },
        doLayout: function () {
            if (!this.canLayout()) return;
            this.timeWrapEl.style.display = this.showTime ? "" : "none";
            this.todayButtonEl.style.display = this.showTodayButton ? "" : "none";
            this.closeButtonEl.style.display = this.showClearButton ? "" : "none";
            this.footerSpaceEl.style.display = (this.showClearButton && this.showTodayButton) ? "" : "none";
            this.footerEl.style.display = this.showFooter ? "" : "none";
            var _ = this.innerEl.firstChild,
                $ = this.isAutoHeight();
            if (!$) {
                    _.style.display = "none";
                    h = jQuery(this.el).height();
                    _.style.display = "";
                    h -= jQuery(this.footerEl).outerHeight();
                    _.parentNode.style.height = h + "px"
                } else _.parentNode.style.height = ""
        },
        doUpdate: function () {
            if (!this.allowUpdate) return;
            var F = new Date(this.viewDate.getTime()),
                A = this.rows == 1 && this.columns == 1,
                B = 100 / this.rows,
                E = "<table class=\"mini-calendar-views\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">";
            for (var $ = 0, D = this.rows; $ < D; $++) {
                    E += "<tr >";
                    for (var C = 0, _ = this.columns; C < _; C++) {
                        E += "<td style=\"height:" + B + "%\">";
                        E += this._CreateView(F, $, C);
                        E += "</td>";
                        F = new Date(F.getFullYear(), F.getMonth() + 1, 1)
                    }
                    E += "</tr>"
                }
            E += "</table>";
            this.innerEl.innerHTML = E;
            mini.repaint(this.el);
            this.doLayout()
        },
        _CreateView: function (R, J, C) {
            var _ = R.getMonth(),
                F = this.getFirstDateOfMonth(R),
                K = new Date(F.getTime()),
                A = mini.clearTime(new Date()).getTime(),
                D = this.value ? mini.clearTime(this.value).getTime() : -1,
                N = this.rows > 1 || this.columns > 1,
                P = "";
            P += "<table class=\"mini-calendar-view\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">";
            if (this.showHeader) {
                    P += "<tr ><td colSpan=\"10\" class=\"mini-calendar-header\"><div class=\"mini-calendar-headerInner\">";
                    if (J == 0 && C == 0) {
                        P += "<div class=\"mini-calendar-prev\">";
                        if (this.showYearButtons) P += "<span class=\"mini-calendar-yearPrev\"></span>";
                        if (this.showMonthButtons) P += "<span class=\"mini-calendar-monthPrev\"></span>";
                        P += "</div>"
                    }
                    if (J == 0 && C == this.columns - 1) {
                        P += "<div class=\"mini-calendar-next\">";
                        if (this.showMonthButtons) P += "<span class=\"mini-calendar-monthNext\"></span>";
                        if (this.showYearButtons) P += "<span class=\"mini-calendar-yearNext\"></span>";
                        P += "</div>"
                    }
                    P += "<span class=\"mini-calendar-title\">" + mini.formatDate(R, this.format); + "</span>";
                    P += "</div></td></tr>"
                }
            P += "<tr class=\"mini-calendar-daysheader\"><td class=\"mini-calendar-space\"></td>";
            if (this.showWeekNumber) P += "<td sclass=\"mini-calendar-weeknumber\"></td>";
            for (var L = this.firstDayOfWeek, B = L + 7; L < B; L++) {
                    var O = this.getShortWeek(L);
                    P += "<td valign=\"middle\">";
                    P += O;
                    P += "</td>";
                    F = new Date(F.getFullYear(), F.getMonth(), F.getDate() + 1)
                }
            P += "<td class=\"mini-calendar-space\"></td></tr>";
            F = K;
            for (var H = 0; H <= 5; H++) {
                    P += "<tr class=\"mini-calendar-days\"><td class=\"mini-calendar-space\"></td>";
                    if (this.showWeekNumber) {
                        var G = mini.getWeek(F.getFullYear(), F.getMonth() + 1, F.getDate());
                        if (String(G).length == 1) G = "0" + G;
                        P += "<td class=\"mini-calendar-weeknumber\" valign=\"middle\">" + G + "</td>"
                    }
                    for (L = this.firstDayOfWeek, B = L + 7; L < B; L++) {
                        var M = this.isWeekend(F),
                            I = mini.clearTime(F).getTime(),
                            $ = I == A,
                            E = this.isSelectedDate(F);
                        if (_ != F.getMonth() && N) I = -1;
                        var Q = this._OnDrawDate(F);
                        P += "<td valign=\"middle\" id=\"";
                        P += this.uid + "$" + I;
                        P += "\" class=\"mini-calendar-date ";
                        if (M) P += " mini-calendar-weekend ";
                        if (Q.allowSelect == false) P += " mini-calendar-disabled ";
                        if (_ != F.getMonth() && N);
                        else {
                                if (E) P += " " + this.selectedDateCls + " ";
                                if ($) P += " mini-calendar-today "
                            }
                        if (_ != F.getMonth()) P += " mini-calendar-othermonth ";
                        P += "\">";
                        if (_ != F.getMonth() && N);
                        else P += Q.dateHtml;
                        P += "</td>";
                        F = new Date(F.getFullYear(), F.getMonth(), F.getDate() + 1)
                    }
                    P += "<td class=\"mini-calendar-space\"></td></tr>"
                }
            P += "<tr class=\"mini-calendar-bottom\" colSpan=\"10\"><td ></td></tr>";
            P += "</table>";
            return P
        },
        _OnDrawDate: function ($) {
            var _ = {
                date: $,
                dateCls: "",
                dateStyle: "",
                dateHtml: $.getDate(),
                allowSelect: true
            };
            this.fire("drawdate", _);
            return _
        },
        _OnDateClick: function (_, $) {
            var A = {
                date: _,
                action: $
            };
            this.fire("dateclick", A);
            this._OnValueChanged()
        },
        menuEl: null,
        menuYear: null,
        menuSelectMonth: null,
        menuSelectYear: null,
        showMenu: function (_) {
            if (!_) return;
            this.hideMenu();
            this.menuYear = parseInt(this.viewDate.getFullYear() / 10) * 10;
            this.menuSelectMonth = this.viewDate.getMonth();
            this.menuSelectYear = this.viewDate.getFullYear();
            var C = "<div class=\"mini-calendar-menu\"></div>";
            this.menuEl = mini.append(document.body, C);
            this.updateMenu(this.viewDate);
            var $ = mini.getBox(_),
                B = $.x,
                A = $.y;
            mini.setX(this.menuEl, B);
            mini.setY(this.menuEl, A);
            mini.on(this.menuEl, "click", this.__OnMenuClick, this);
            mini.on(document, "mousedown", this.__OnBodyMenuMouseDown, this)
        },
        hideMenu: function () {
            if (this.menuEl) {
                mini.un(this.menuEl, "click", this.__OnMenuClick, this);
                mini.un(document, "mousedown", this.__OnBodyMenuMouseDown, this);
                jQuery(this.menuEl).remove();
                this.menuEl = null
            }
        },
        updateMenu: function () {
            var C = "<div class=\"mini-calendar-menu-months\">";
            for (var $ = 0, B = 12; $ < B; $++) {
                var _ = mini.getShortMonth($),
                    A = "";
                if (this.menuSelectMonth == $) A = "mini-calendar-menu-selected";
                C += "<a id=\"" + $ + "\" class=\"mini-calendar-menu-month " + A + "\" href=\"javascript:void(0);\" hideFocus onclick=\"return false\">" + _ + "</a>"
            }
            C += "<div style=\"clear:both;\"></div></div>";
            C += "<div class=\"mini-calendar-menu-years\">";
            for ($ = this.menuYear, B = this.menuYear + 10; $ < B; $++) {
                _ = $,
                A = "";
                if (this.menuSelectYear == $) A = "mini-calendar-menu-selected";
                C += "<a id=\"" + $ + "\" class=\"mini-calendar-menu-year " + A + "\" href=\"javascript:void(0);\" hideFocus onclick=\"return false\">" + _ + "</a>"
            }
            C += "<div class=\"mini-calendar-menu-prevYear\"></div><div class=\"mini-calendar-menu-nextYear\"></div><div style=\"clear:both;\"></div></div>";
            C += "<div class=\"mini-calendar-footer\">" + "<span class=\"mini-calendar-okButton\">" + this.okText + "</span>" + "<span class=\"mini-calendar-footerSpace\"></span>" + "<span class=\"mini-calendar-cancelButton\">" + this.cancelText + "</span>" + "</div><div style=\"clear:both;\"></div>";
            this.menuEl.innerHTML = C
        },
        __OnMenuClick: function (C) {
            var _ = C.target,
                B = mini.findParent(_, "mini-calendar-menu-month"),
                $ = mini.findParent(_, "mini-calendar-menu-year");
            if (B) {
                    this.menuSelectMonth = parseInt(B.id);
                    this.updateMenu()
                } else if ($) {
                    this.menuSelectYear = parseInt($.id);
                    this.updateMenu()
                } else if (mini.findParent(_, "mini-calendar-menu-prevYear")) {
                    this.menuYear = this.menuYear - 1;
                    this.menuYear = parseInt(this.menuYear / 10) * 10;
                    this.updateMenu()
                } else if (mini.findParent(_, "mini-calendar-menu-nextYear")) {
                    this.menuYear = this.menuYear + 11;
                    this.menuYear = parseInt(this.menuYear / 10) * 10;
                    this.updateMenu()
                } else if (mini.findParent(_, "mini-calendar-okButton")) {
                    var A = new Date(this.menuSelectYear, this.menuSelectMonth, 1);
                    this.setViewDate(A);
                    this.hideMenu()
                } else if (mini.findParent(_, "mini-calendar-cancelButton")) this.hideMenu()
        },
        __OnBodyMenuMouseDown: function ($) {
            if (!mini.findParent($.target, "mini-calendar-menu")) this.hideMenu()
        },
        __OnClick: function (H) {
            var G = this.viewDate,
                C = H.target,
                F = mini.findParent(H.target, "mini-calendar-title");
            if (mini.findParent(C, "mini-calendar-monthNext")) {
                    G.setMonth(G.getMonth() + 1);
                    this.setViewDate(G)
                } else if (mini.findParent(C, "mini-calendar-yearNext")) {
                    G.setFullYear(G.getFullYear() + 1);
                    this.setViewDate(G)
                } else if (mini.findParent(C, "mini-calendar-monthPrev")) {
                    G.setMonth(G.getMonth() - 1);
                    this.setViewDate(G)
                } else if (mini.findParent(C, "mini-calendar-yearPrev")) {
                    G.setFullYear(G.getFullYear() - 1);
                    this.setViewDate(G)
                } else if (mini.findParent(C, "mini-calendar-tadayButton")) {
                    var _ = mini.clearTime(new Date());
                    this.setViewDate(_);
                    this.setSelectedDate(_);
                    if (this.currentTime) {
                        var $ = new Date();
                        this.setTime($)
                    }
                    this._OnDateClick(_, "today")
                } else if (mini.findParent(C, "mini-calendar-clearButton")) {
                    this.setSelectedDate(null);
                    this.setTime(null);
                    this._OnDateClick(null, "clear")
                } else if (F) this.showMenu(F);
            var E = mini.findParent(H.target, "mini-calendar-date");
            if (E && !mini.hasClass(E, "mini-calendar-disabled")) {
                    var A = E.id.split("$"),
                        B = parseInt(A[A.length - 1]);
                    if (B == -1) return;
                    var D = new Date(B);
                    this._OnDateClick(D)
                }
        },
        __OnMouseDown: function (C) {
            var B = mini.findParent(C.target, "mini-calendar-date");
            if (B && !mini.hasClass(B, "mini-calendar-disabled")) {
                var $ = B.id.split("$"),
                    _ = parseInt($[$.length - 1]);
                if (_ == -1) return;
                var A = new Date(_);
                this.setSelectedDate(A)
            }
        },
        __OnTimeChanged: function ($) {
            this.fire("timechanged");
            this._OnValueChanged()
        },
        _OnValueChanged: function () {
            this.fire("valuechanged")
        },
        getAttrs: function ($) {
            var _ = mini.Calendar.superclass.getAttrs.call(this, $);
            mini._ParseString($, _, ["viewDate", "rows", "columns", "ondateclick", "ondrawdate", "ondatechanged", "timeFormat", "ontimechanged", "onvaluechanged"]);
            mini._ParseBool($, _, ["multiSelect", "showHeader", "showFooter", "showWeekNumber", "showDaysHeader", "showMonthButtons", "showYearButtons", "showTodayButton", "showClearButton", "showTime"]);
            return _
        }
    });
mini.regClass(mini.Calendar, "calendar");
mini.ListBox = function () {
        mini.ListBox.superclass.constructor.call(this)
    };
mini.extend(mini.ListBox, mini.ListControl, {
        formField: true,
        width: 200,
        columns: null,
        columnWidth: 80,
        showNullItem: false,
        nullText: "&nbsp;",
        showEmpty: false,
        emptyText: "",
        showCheckBox: false,
        showAllCheckBox: true,
        multiSelect: false,
        itemCls: "mini-listbox-item",
        itemHoverCls: "mini-listbox-item-hover",
        itemSelectedCls: "mini-listbox-item-selected",
        uiCls: "mini-listbox",
        _create: function () {
            var $ = this.el = document.createElement("div");
            this.el.className = "mini-listbox";
            this.el.innerHTML = "<div class=\"mini-listbox-border\"><div class=\"mini-listbox-header\"></div><div class=\"mini-listbox-view\"></div><input type=\"hidden\"/></div><div class=\"mini-errorIcon\"></div>";
            this.borderEl = this.el.firstChild;
            this.headerEl = this.borderEl.firstChild;
            this.viewEl = this.borderEl.childNodes[1];
            this.valueEl = this.borderEl.childNodes[2];
            this.errorIconEl = this.el.lastChild
        },
        destroy: function ($) {
            if (this.viewEl) {
                mini.clearEvent(this.viewEl);
                this.viewEl = null
            }
            this.borderEl = null;
            this.headerEl = null;
            this.viewEl = null;
            this.valueEl = null;
            mini.ListBox.superclass.destroy.call(this, $)
        },
        _initEvents: function () {
            mini.ListBox.superclass._initEvents.call(this);
            mini._BindEvents(function () {
                mini.on(this.viewEl, "scroll", this.__OnScroll, this)
            }, this)
        },
        setColumns: function (_) {
            if (!mini.isArray(_)) _ = [];
            this.columns = _;
            for (var $ = 0, C = this.columns.length; $ < C; $++) {
                var B = this.columns[$],
                    A = parseInt(B.width);
                if (mini.isNumber(A) && String(A) == B.width) B.width = A + "px";
                if (mini.isNull(B.width)) B.width = this.columnWidth + "px"
            }
            this.doUpdate()
        },
        doUpdate: function () {
            if (this.allowUpdate === false) return;
            var T = this.columns && this.columns.length > 0;
            if (T) mini.addClass(this.el, "mini-listbox-showColumns");
            else mini.removeClass(this.el, "mini-listbox-showColumns");
            this.headerEl.style.display = T ? "" : "none";
            var I = [];
            if (T) {
                I[I.length] = "<table class=\"mini-listbox-headerInner\" cellspacing=\"0\" cellpadding=\"0\"><tr>";
                var D = this.uid + "$ck$all";
                I[I.length] = "<td class=\"mini-listbox-checkbox\"><input type=\"checkbox\" id=\"" + D + "\"></td>";
                for (var S = 0, _ = this.columns.length; S < _; S++) {
                    var B = this.columns[S],
                        E = B.header;
                    if (mini.isNull(E)) E = "&nbsp;";
                    var A = B.width;
                    if (mini.isNumber(A)) A = A + "px";
                    I[I.length] = "<td class=\"";
                    if (B.headerCls) I[I.length] = B.headerCls;
                    I[I.length] = "\" style=\"";
                    if (B.headerStyle) I[I.length] = B.headerStyle + ";";
                    if (A) I[I.length] = "width:" + A + ";";
                    if (B.headerAlign) I[I.length] = "text-align:" + B.headerAlign + ";";
                    I[I.length] = "\">";
                    I[I.length] = E;
                    I[I.length] = "</td>"
                }
                I[I.length] = "</tr></table>"
            }
            this.headerEl.innerHTML = I.join("");
            var I = [],
                Q = this.data;
            I[I.length] = "<table class=\"mini-listbox-items\" cellspacing=\"0\" cellpadding=\"0\">";
            if (this.showEmpty && Q.length == 0) I[I.length] = "<tr><td colspan=\"20\">" + this.emptyText + "</td></tr>";
            else {
                    this._doNullItem();
                    for (var L = 0, G = Q.length; L < G; L++) {
                        var $ = Q[L],
                            N = -1,
                            P = " ",
                            K = -1,
                            O = " ";
                        I[I.length] = "<tr id=\"";
                        I[I.length] = this._createItemId(L);
                        I[I.length] = "\" index=\"";
                        I[I.length] = L;
                        I[I.length] = "\" class=\"mini-listbox-item ";
                        if ($.enabled === false) I[I.length] = " mini-disabled ";
                        N = I.length;
                        I[I.length] = P;
                        I[I.length] = "\" style=\"";
                        K = I.length;
                        I[I.length] = O;
                        I[I.length] = "\">";
                        var H = this._createCheckId(L),
                            M = this.name,
                            F = this.getItemValue($),
                            C = "";
                        if ($.enabled === false) C = "disabled";
                        I[I.length] = "<td class=\"mini-listbox-checkbox\"><input " + C + " id=\"" + H + "\" type=\"checkbox\" ></td>";
                        if (T) {
                                for (S = 0, _ = this.columns.length; S < _; S++) {
                                    var B = this.columns[S],
                                        U = this._OnDrawCell($, L, B),
                                        J = $[B.field];
                                    if (mini.isNull(J)) J = "&nbsp;";
                                    A = B.width;
                                    if (typeof A == "number") A = A + "px";
                                    I[I.length] = "<td class=\"";
                                    if (U.cellCls) I[I.length] = U.cellCls;
                                    I[I.length] = "\" style=\"";
                                    if (U.cellStyle) I[I.length] = U.cellStyle + ";";
                                    if (A) I[I.length] = "width:" + A + ";";
                                    if (B.align) I[I.length] = "text-align:" + B.align + ";";
                                    I[I.length] = "\">";
                                    I[I.length] = J;
                                    I[I.length] = "</td>";
                                    if (U.rowCls) P = U.rowCls;
                                    if (U.rowStyle) O = U.rowStyle
                                }
                            } else {
                                U = this._OnDrawCell($, L, null);
                                I[I.length] = "<td class=\"";
                                if (U.cellCls) I[I.length] = U.cellCls;
                                I[I.length] = "\" style=\"";
                                if (U.cellStyle) I[I.length] = U.cellStyle;
                                I[I.length] = "\">";
                                I[I.length] = U.cellHtml;
                                I[I.length] = "</td>";
                                if (U.rowCls) P = U.rowCls;
                                if (U.rowStyle) O = U.rowStyle
                            }
                        I[N] = P;
                        I[K] = O;
                        I[I.length] = "</tr>"
                    }
                }
            I[I.length] = "</table>";
            var R = I.join("");
            this.viewEl.innerHTML = R;
            this._doSelects();
            this.doLayout()
        },
        doLayout: function () {
            if (!this.canLayout()) return;
            if (this.columns && this.columns.length > 0) mini.addClass(this.el, "mini-listbox-showcolumns");
            else mini.removeClass(this.el, "mini-listbox-showcolumns");
            if (this.showCheckBox) mini.removeClass(this.el, "mini-listbox-hideCheckBox");
            else mini.addClass(this.el, "mini-listbox-hideCheckBox");
            var D = this.uid + "$ck$all",
                B = document.getElementById(D);
            if (B) B.style.display = this.showAllCheckBox ? "" : "none";
            var E = this.isAutoHeight();
            h = this.getHeight(true);
            _ = this.getWidth(true);
            var C = _,
                F = this.viewEl;
            F.style.width = _ + "px";
            if (!E) {
                    var $ = mini.getHeight(this.headerEl);
                    h = h - $;
                    F.style.height = h + "px"
                } else F.style.height = "auto";
            if (mini.isIE) {
                    var A = this.headerEl.firstChild,
                        G = this.viewEl.firstChild;
                    if (this.viewEl.offsetHeight >= this.viewEl.scrollHeight) {
                            G.style.width = "100%";
                            if (A) A.style.width = "100%"
                        } else {
                            var _ = parseInt(G.parentNode.offsetWidth - 17) + "px";
                            G.style.width = _;
                            if (A) A.style.width = _
                        }
                }
            if (this.viewEl.offsetHeight < this.viewEl.scrollHeight) this.headerEl.style.width = (C - 17) + "px";
            else this.headerEl.style.width = "100%"
        },
        setShowCheckBox: function ($) {
            this.showCheckBox = $;
            this.doLayout()
        },
        setShowAllCheckBox: function ($) {
            this.showAllCheckBox = $;
            this.doLayout()
        },
        setShowNullItem: function ($) {
            if (this.showNullItem != $) {
                this.showNullItem = $;
                this._doNullItem();
                this.doUpdate()
            }
        },
        _doNullItem: function () {
            for (var _ = 0, A = this.data.length; _ < A; _++) {
                var $ = this.data[_];
                if ($.__NullItem) {
                    this.data.removeAt(_);
                    break
                }
            }
            if (this.showNullItem) {
                $ = {
                    __NullItem: true
                };
                $[this.textField] = this.nullText;
                $[this.valueField] = "";
                this.data.insert(0, $)
            }
        },
        removeAll: function () {
            var $ = this.getData();
            this.removeItems($)
        },
        addItems: function (_, $) {
            if (!mini.isArray(_)) return;
            if (mini.isNull($)) $ = this.data.length;
            this.data.insertRange($, _);
            this.doUpdate()
        },
        addItem: function (_, $) {
            if (!_) return;
            if (this.data.indexOf(_) != -1) return;
            if (mini.isNull($)) $ = this.data.length;
            this.data.insert($, _);
            this.doUpdate()
        },
        removeItems: function ($) {
            if (!mini.isArray($)) return;
            this.data.removeRange($);
            this._checkSelecteds();
            this.doUpdate()
        },
        removeItem: function (_) {
            var $ = this.data.indexOf(_);
            if ($ != -1) {
                this.data.removeAt($);
                this._checkSelecteds();
                this.doUpdate()
            }
        },
        moveItem: function (_, $) {
            if (!_ || !mini.isNumber($)) return;
            if ($ < 0) $ = 0;
            if ($ > this.data.length) $ = this.data.length;
            this.data.remove(_);
            this.data.insert($, _);
            this.doUpdate()
        },
        _OnDrawCell: function (_, $, B) {
            var A = B ? _[B.field] : this.getItemText(_),
                C = {
                    index: $,
                    record: _,
                    item: _,
                    column: B,
                    field: B ? B.field : null,
                    value: A,
                    cellHtml: A,
                    rowCls: null,
                    cellCls: B ? (B.cellCls || "") : "",
                    rowStyle: null,
                    cellStyle: B ? (B.cellStyle || "") : ""
                };
            this.fire("drawcell", C);
            if (C.cellHtml === null || C.cellHtml === undefined || C.cellHtml === "") C.cellHtml = "&nbsp;";
            return C
        },
        __OnScroll: function ($) {
            this.headerEl.scrollLeft = this.viewEl.scrollLeft
        },
        __OnClick: function (C) {
            var A = this.uid + "$ck$all";
            if (C.target.id == A) {
                var _ = document.getElementById(A);
                if (_) {
                    var B = _.checked,
                        $ = this.getValue();
                    this._CanFireSelectionChanged = true;
                    if (B) this.selectAll();
                    else this.deselectAll();
                    this._CanFireSelectionChanged = false;
                    if ($ != this.getValue()) {
                            this._OnValueChanged();
                            this.fire("itemclick", {
                                htmlEvent: C
                            })
                        }
                }
                return
            }
            this._fireEvent(C, "Click")
        },
        getAttrs: function (_) {
            var E = mini.ListBox.superclass.getAttrs.call(this, _);
            mini._ParseBool(_, E, ["showCheckBox", "showAllCheckBox", "showNullItem"]);
            if (_.nodeName.toLowerCase() != "select") {
                var C = mini.getChildNodes(_);
                for (var $ = 0, D = C.length; $ < D; $++) {
                    var B = C[$],
                        A = jQuery(B).attr("property");
                    if (!A) continue;
                    A = A.toLowerCase();
                    if (A == "columns") E.columns = mini._ParseColumns(B);
                    else if (A == "data") E.data = B.innerHTML
                }
            }
            return E
        }
    });
mini.regClass(mini.ListBox, "listbox");
mini.CheckBoxList = function () {
        mini.CheckBoxList.superclass.constructor.call(this)
    };
mini.extend(mini.CheckBoxList, mini.ListControl, {
        formField: true,
        multiSelect: true,
        repeatItems: 0,
        repeatLayout: "none",
        repeatDirection: "horizontal",
        itemCls: "mini-checkboxlist-item",
        itemHoverCls: "mini-checkboxlist-item-hover",
        itemSelectedCls: "mini-checkboxlist-item-selected",
        tableCls: "mini-checkboxlist-table",
        tdCls: "mini-checkboxlist-td",
        _checkType: "checkbox",
        uiCls: "mini-checkboxlist",
        _create: function () {
            var $ = this.el = document.createElement("div");
            this.el.className = this.uiCls;
            this.el.innerHTML = "<div class=\"mini-list-inner\"></div><div class=\"mini-list-errorIcon\"></div><input type=\"hidden\" />";
            this.innerEl = this.el.firstChild;
            this.valueEl = this.el.lastChild;
            this.errorIconEl = this.el.childNodes[1]
        },
        getRepeatTable: function () {
            var B = [];
            if (this.repeatItems > 0) {
                if (this.repeatDirection == "horizontal") {
                    var D = [];
                    for (var C = 0, E = this.data.length; C < E; C++) {
                        var A = this.data[C];
                        if (D.length == this.repeatItems) {
                            B.push(D);
                            D = []
                        }
                        D.push(A)
                    }
                    B.push(D)
                } else {
                    var _ = this.repeatItems > this.data.length ? this.data.length : this.repeatItems;
                    for (C = 0, E = _; C < E; C++) B.push([]);
                    for (C = 0, E = this.data.length; C < E; C++) {
                        var A = this.data[C],
                            $ = C % this.repeatItems;
                        B[$].push(A)
                    }
                }
            } else B = [this.data.clone()];
            return B
        },
        doUpdate: function () {
            var D = this.data,
                G = "";
            for (var A = 0, F = D.length; A < F; A++) {
                    var _ = D[A];
                    _._i = A
                }
            if (this.repeatLayout == "flow") {
                    var $ = this.getRepeatTable();
                    for (A = 0, F = $.length; A < F; A++) {
                        var C = $[A];
                        for (var E = 0, B = C.length; E < B; E++) {
                            _ = C[E];
                            G += this._createItemHtml(_, _._i)
                        }
                        if (A != F - 1) G += "<br/>"
                    }
                } else if (this.repeatLayout == "table") {
                    $ = this.getRepeatTable();
                    G += "<table class=\"" + this.tableCls + "\" cellpadding=\"0\" cellspacing=\"1\">";
                    for (A = 0, F = $.length; A < F; A++) {
                        C = $[A];
                        G += "<tr>";
                        for (E = 0, B = C.length; E < B; E++) {
                            _ = C[E];
                            G += "<td class=\"" + this.tdCls + "\">";
                            G += this._createItemHtml(_, _._i);
                            G += "</td>"
                        }
                        G += "</tr>"
                    }
                    G += "</table>"
                } else for (A = 0, F = D.length; A < F; A++) {
                    _ = D[A];
                    G += this._createItemHtml(_, A)
                }
            this.innerEl.innerHTML = G;
            for (A = 0, F = D.length; A < F; A++) {
                    _ = D[A];
                    delete _._i
                }
        },
        _createItemHtml: function (_, $) {
            var F = this._OnDrawItem(_, $),
                E = this._createItemId($),
                A = this._createCheckId($),
                C = this.getItemValue(_),
                B = "",
                D = "<div id=\"" + E + "\" index=\"" + $ + "\" class=\"" + this.itemCls + " ";
            if (_.enabled === false) {
                    D += " mini-disabled ";
                    B = "disabled"
                }
            D += F.itemCls + "\" style=\"" + F.itemStyle + "\"><input " + B + " value=\"" + C + "\" id=\"" + A + "\" type=\"" + this._checkType + "\"/><label for=\"" + A + "\" onclick=\"return false;\">";
            D += F.itemHtml + "</label></div>";
            return D
        },
        _OnDrawItem: function (_, $) {
            var A = this.getItemText(_),
                B = {
                    index: $,
                    item: _,
                    itemHtml: A,
                    itemCls: "",
                    itemStyle: ""
                };
            this.fire("drawitem", B);
            if (B.itemHtml === null || B.itemHtml === undefined) B.itemHtml = "";
            return B
        },
        setRepeatItems: function ($) {
            $ = parseInt($);
            if (isNaN($)) $ = 0;
            if (this.repeatItems != $) {
                this.repeatItems = $;
                this.doUpdate()
            }
        },
        setRepeatLayout: function ($) {
            if ($ != "flow" && $ != "table") $ = "none";
            if (this.repeatLayout != $) {
                this.repeatLayout = $;
                this.doUpdate()
            }
        },
        setRepeatDirection: function ($) {
            if ($ != "vertical") $ = "horizontal";
            if (this.repeatDirection != $) {
                this.repeatDirection = $;
                this.doUpdate()
            }
        },
        getAttrs: function (_) {
            var D = mini.CheckBoxList.superclass.getAttrs.call(this, _),
                C = jQuery(_),
                $ = parseInt(C.attr("repeatItems"));
            if (!isNaN($)) D.repeatItems = $;
            var B = C.attr("repeatLayout");
            if (B) D.repeatLayout = B;
            var A = C.attr("repeatDirection");
            if (A) D.repeatDirection = A;
            return D
        }
    });
mini.regClass(mini.CheckBoxList, "checkboxlist");
mini.RadioButtonList = function () {
        mini.RadioButtonList.superclass.constructor.call(this)
    };
mini.extend(mini.RadioButtonList, mini.CheckBoxList, {
        multiSelect: false,
        itemCls: "mini-radiobuttonlist-item",
        itemHoverCls: "mini-radiobuttonlist-item-hover",
        itemSelectedCls: "mini-radiobuttonlist-item-selected",
        tableCls: "mini-radiobuttonlist-table",
        tdCls: "mini-radiobuttonlist-td",
        _checkType: "radio",
        uiCls: "mini-radiobuttonlist"
    });
mini.regClass(mini.RadioButtonList, "radiobuttonlist");
mini.TreeSelect = function () {
        this.data = [];
        mini.TreeSelect.superclass.constructor.call(this)
    };
mini.extend(mini.TreeSelect, mini.PopupEdit, {
        text: "",
        value: "",
        valueField: "id",
        textField: "text",
        delimiter: ",",
        multiSelect: false,
        data: [],
        url: "",
        allowInput: false,
        popupMaxHeight: 250,
        popupMinWidth: 200,
        set: function (A) {
            if (typeof A == "string") return this;
            var $ = A.value;
            delete A.value;
            var B = A.url;
            delete A.url;
            var _ = A.data;
            delete A.data;
            mini.TreeSelect.superclass.set.call(this, A);
            if (!mini.isNull(_)) this.setData(_);
            if (!mini.isNull(B)) this.setUrl(B);
            if (!mini.isNull($)) this.setValue($);
            return this
        },
        uiCls: "mini-treeselect",
        _createPopup: function () {
            mini.TreeSelect.superclass._createPopup.call(this);
            this.tree = new mini.Tree();
            this.tree.setShowTreeIcon(true);
            this.tree.setStyle("border:0;width:100%;height:100%;");
            this.tree.render(this.popup.contentEl);
            this.tree.on("nodeclick", this.__OnNodeClick, this);
            this.tree.on("nodecheck", this.__OnCheckedChanged, this);
            this.tree.on("expand", this.__OnTreeExpand, this);
            this.tree.on("collapse", this.__OnTreeCollapse, this);
            this.tree.on("beforenodecheck", this.__OnTreeBeforeNodeCheck, this);
            this.tree.on("beforenodeselect", this.__OnTreeBeforeNodeSelect, this);
            this.tree.allowAnim = false
        },
        __OnTreeBeforeNodeCheck: function ($) {
            $.tree = $.sender;
            this.fire("beforenodecheck", $)
        },
        __OnTreeBeforeNodeSelect: function ($) {
            $.tree = $.sender;
            this.fire("beforenodeselect", $)
        },
        __OnTreeExpand: function ($) {
            this.showPopup()
        },
        __OnTreeCollapse: function ($) {
            this.showPopup()
        },
        showPopup: function () {
            this.tree.setHeight("auto");
            mini.TreeSelect.superclass.showPopup.call(this);
            var $ = this.popup.el.style.height;
            if ($ == "" || $ == "auto") this.tree.setHeight("auto");
            else this.tree.setHeight("100%");
            this.tree.setValue(this.value)
        },
        getItem: function ($) {
            return typeof $ == "object" ? $ : this.data[$]
        },
        indexOf: function ($) {
            return this.data.indexOf($)
        },
        getAt: function ($) {
            return this.data[$]
        },
        load: function ($) {
            this.tree.load($)
        },
        setData: function ($) {
            this.tree.setData($);
            this.data = this.tree.data
        },
        setUrl: function ($) {
            this.getPopup();
            this.tree.setUrl($);
            this.url = this.tree.url
        },
        setTextField: function ($) {
            if (this.tree) this.tree.setTextField($);
            this.textField = $
        },
        setValue: function ($) {
            if (this.value != $) {
                var _ = this.tree.getValueAndText($);
                this.value = $;
                this.valueEl.value = $;
                this.textEl.value = _[1];
                this._doEmpty()
            }
        },
        setMultiSelect: function ($) {
            if (this.multiSelect != $) {
                this.multiSelect = $;
                this.tree.setShowCheckBox($);
                this.tree.setAllowSelect(!$)
            }
        },
        __OnNodeClick: function (B) {
            if (this.multiSelect) return;
            var _ = this.tree.getSelectedNode(),
                A = this.tree.getItemValue(_),
                $ = this.getValue();
            this.setValue(A);
            if ($ != this.getValue()) this._OnValueChanged();
            this.hidePopup()
        },
        __OnCheckedChanged: function (A) {
            if (!this.multiSelect) return;
            var _ = this.tree.getValue(),
                $ = this.getValue();
            this.setValue(_);
            if ($ != this.getValue()) this._OnValueChanged()
        },
        resultAsTree: true,
        parentField: "pid",
        checkRecursive: false,
        setCheckRecursive: function ($) {
            this.checkRecursive = $;
            if (this.tree) this.tree.setCheckRecursive($)
        },
        setResultAsTree: function ($) {
            this.resultAsTree = $;
            if (this.tree) this.tree.setResultAsTree($)
        },
        setParentField: function ($) {
            this.parentField = $;
            if (this.tree) this.tree.setParentField($)
        },
        setValueField: function ($) {
            if (this.tree) this.tree.setIdField($);
            this.valueField = $
        },
        getAttrs: function ($) {
            var _ = mini.ComboBox.superclass.getAttrs.call(this, $);
            mini._ParseString($, _, ["url", "data", "textField", "valueField", "parentField", "onbeforenodecheck", "onbeforenodeselect"]);
            mini._ParseBool($, _, ["multiSelect", "resultAsTree", "checkRecursive"]);
            return _
        }
    });
mini.regClass(mini.TreeSelect, "TreeSelect");
mini.Spinner = function () {
        mini.Spinner.superclass.constructor.call(this);
        this.setValue(this.minValue)
    };
mini.extend(mini.Spinner, mini.ButtonEdit, {
        value: 0,
        minValue: 0,
        maxValue: 100,
        increment: 1,
        decimalPlaces: 0,
        set: function (_) {
            if (typeof _ == "string") return this;
            var $ = _.value;
            delete _.value;
            mini.Spinner.superclass.set.call(this, _);
            if (!mini.isNull($)) this.setValue($);
            return this
        },
        uiCls: "mini-spinner",
        _initButtons: function () {
            this.buttons = [];
            var $ = this.createButton({
                type: "spin",
                cls: "mini-buttonedit-spinButton"
            });
            this.buttons.push($)
        },
        _initEvents: function () {
            mini.Spinner.superclass._initEvents.call(this);
            mini._BindEvents(function () {
                this.on("buttonmousedown", this.__OnButtonMouseDown, this);
                mini.on(this.el, "mousewheel", this.__OnMousewheel, this);
                mini.on(this.textEl, "keydown", this.__OnKeyDown, this)
            }, this)
        },
        _ValueLimit: function () {
            if (this.minValue > this.maxValue) this.maxValue = this.minValue + 100;
            if (this.value < this.minValue) this.setValue(this.minValue);
            if (this.value > this.maxValue) this.setValue(this.maxValue)
        },
        setValue: function ($) {
            $ = parseFloat($);
            if (isNaN($)) $ = this.minValue;
            $ = parseFloat($.toFixed(this.decimalPlaces));
            if (this.value != $) {
                this.value = $;
                this._ValueLimit();
                this.textEl.value = this.valueEl.value = this.getFormValue()
            } else this.textEl.value = this.getFormValue()
        },
        setMaxValue: function ($) {
            $ = parseFloat($);
            if (isNaN($)) return;
            $ = parseFloat($.toFixed(this.decimalPlaces));
            if (this.maxValue != $) {
                this.maxValue = $;
                this._ValueLimit()
            }
        },
        setMinValue: function ($) {
            $ = parseFloat($);
            if (isNaN($)) return;
            $ = parseFloat($.toFixed(this.decimalPlaces));
            if (this.minValue != $) {
                this.minValue = $;
                this._ValueLimit()
            }
        },
        setIncrement: function ($) {
            $ = parseFloat($);
            if (isNaN($)) return;
            if (this.increment != $) this.increment = $
        },
        setDecimalPlaces: function ($) {
            $ = parseInt($);
            if (isNaN($) || $ < 0) return;
            this.decimalPlaces = $
        },
        _SpinTimer: null,
        _StartSpin: function (D, B, C) {
            this._StopSpin();
            this.setValue(this.value + D);
            this._OnValueChanged();
            var A = this,
                _ = C,
                $ = new Date();
            this._SpinTimer = setInterval(function () {
                    A.setValue(A.value + D);
                    A._OnValueChanged();
                    C--;
                    if (C == 0 && B > 50) A._StartSpin(D, B - 100, _ + 3);
                    var E = new Date();
                    if (E - $ > 500) A._StopSpin();
                    $ = E
                }, B);
            mini.on(document, "mouseup", this._OnDocumentMouseUp, this)
        },
        _StopSpin: function () {
            clearInterval(this._SpinTimer);
            this._SpinTimer = null
        },
        __OnButtonMouseDown: function ($) {
            this._DownValue = this.getFormValue();
            if ($.spinType == "up") this._StartSpin(this.increment, 230, 2);
            else this._StartSpin(-this.increment, 230, 2)
        },
        __OnKeyDown: function (_) {
            var $ = mini.Keyboard;
            switch (_.keyCode) {
            case $.Top:
                this.setValue(this.value + this.increment);
                this._OnValueChanged();
                break;
            case $.Bottom:
                this.setValue(this.value - this.increment);
                this._OnValueChanged();
                break
            }
        },
        __OnMousewheel: function (A) {
            if (this.isReadOnly()) return;
            var $ = A.wheelDelta;
            if (mini.isNull($)) $ = -A.detail * 24;
            var _ = this.increment;
            if ($ < 0) _ = -_;
            this.setValue(this.value + _);
            this._OnValueChanged();
            return false
        },
        _OnDocumentMouseUp: function ($) {
            this._StopSpin();
            mini.un(document, "mouseup", this._OnDocumentMouseUp, this);
            if (this._DownValue != this.getFormValue()) this._OnValueChanged()
        },
        __OnInputTextChanged: function (A) {
            var _ = this.getValue(),
                $ = parseFloat(this.textEl.value);
            this.setValue($);
            if (_ != this.getValue()) this._OnValueChanged()
        },
        getAttrs: function ($) {
            var _ = mini.Spinner.superclass.getAttrs.call(this, $);
            mini._ParseString($, _, ["minValue", "maxValue", "increment", "decimalPlaces"]);
            return _
        }
    });
mini.regClass(mini.Spinner, "spinner");
mini.TimeSpinner = function () {
        mini.TimeSpinner.superclass.constructor.call(this);
        this.setValue("00:00:00")
    };
mini.extend(mini.TimeSpinner, mini.ButtonEdit, {
        value: null,
        format: "H:mm:ss",
        uiCls: "mini-timespinner",
        _initButtons: function () {
            this.buttons = [];
            var $ = this.createButton({
                type: "spin",
                cls: "mini-buttonedit-spinButton"
            });
            this.buttons.push($)
        },
        _initEvents: function () {
            mini.TimeSpinner.superclass._initEvents.call(this);
            mini._BindEvents(function () {
                this.on("buttonmousedown", this.__OnButtonMouseDown, this);
                mini.on(this.el, "mousewheel", this.__OnMousewheel, this);
                mini.on(this.textEl, "keydown", this.__OnKeyDown, this)
            }, this)
        },
        setFormat: function ($) {
            if (typeof $ != "string") return;
            var _ = ["H:mm:ss", "HH:mm:ss", "H:mm", "HH:mm", "H", "HH", "mm:ss"];
            if (_.indexOf($) == -1) return;
            if (this.format != $) {
                this.format = $;
                this.textEl.value = this.getFormattedValue()
            }
        },
        setValue: function ($) {
            $ = mini.parseTime($, this.format);
            if (!$) $ = mini.parseTime("00:00:00", this.format);
            if (mini.isDate($)) $ = new Date($.getTime());
            if (mini.formatDate(this.value, "H:mm:ss") != mini.formatDate($, "H:mm:ss")) {
                this.value = $;
                this.textEl.value = this.getFormattedValue();
                this.valueEl.value = this.getFormValue()
            }
        },
        getValue: function () {
            return this.value == null ? null : new Date(this.value.getTime())
        },
        getFormValue: function () {
            if (!this.value) return "";
            return mini.formatDate(this.value, "H:mm:ss")
        },
        getFormattedValue: function () {
            if (!this.value) return "";
            return mini.formatDate(this.value, this.format)
        },
        _ChangeValue: function (D, C) {
            var $ = this.getValue();
            if ($) switch (C) {
            case "hours":
                var A = $.getHours() + D;
                if (A > 23) A = 23;
                if (A < 0) A = 0;
                $.setHours(A);
                break;
            case "minutes":
                var B = $.getMinutes() + D;
                if (B > 59) B = 59;
                if (B < 0) B = 0;
                $.setMinutes(B);
                break;
            case "seconds":
                var _ = $.getSeconds() + D;
                if (_ > 59) _ = 59;
                if (_ < 0) _ = 0;
                $.setSeconds(_);
                break
            } else $ = "00:00:00";
            this.setValue($)
        },
        _SpinTimer: null,
        _StartSpin: function (D, B, C) {
            this._StopSpin();
            this._ChangeValue(D, this._timeType);
            var A = this,
                _ = C,
                $ = new Date();
            this._SpinTimer = setInterval(function () {
                    A._ChangeValue(D, A._timeType);
                    C--;
                    if (C == 0 && B > 50) A._StartSpin(D, B - 100, _ + 3);
                    var E = new Date();
                    if (E - $ > 500) A._StopSpin();
                    $ = E
                }, B);
            mini.on(document, "mouseup", this._OnDocumentMouseUp, this)
        },
        _StopSpin: function () {
            clearInterval(this._SpinTimer);
            this._SpinTimer = null
        },
        __OnButtonMouseDown: function ($) {
            this._DownValue = this.getFormValue();
            this._timeType = "hours";
            if ($.spinType == "up") this._StartSpin(1, 230, 2);
            else this._StartSpin(-1, 230, 2)
        },
        _OnDocumentMouseUp: function ($) {
            this._StopSpin();
            mini.un(document, "mouseup", this._OnDocumentMouseUp, this);
            if (this._DownValue != this.getFormValue()) this._OnValueChanged()
        },
        __OnInputTextChanged: function (_) {
            var $ = this.getFormValue();
            this.setValue(this.textEl.value);
            if ($ != this.getFormValue()) this._OnValueChanged()
        },
        getAttrs: function ($) {
            var _ = mini.TimeSpinner.superclass.getAttrs.call(this, $);
            mini._ParseString($, _, ["format"]);
            return _
        }
    });
mini.regClass(mini.TimeSpinner, "timespinner");
mini.HtmlFile = function () {
        mini.HtmlFile.superclass.constructor.call(this);
        this.on("validation", this.__OnValidation, this)
    };
mini.extend(mini.HtmlFile, mini.ButtonEdit, {
        width: 180,
        buttonText: "\u6d4f\u89c8...",
        limitType: "",
        limitTypeErrorText: "\u4e0a\u4f20\u6587\u4ef6\u683c\u5f0f\u4e3a\uff1a",
        readOnly: true,
        _cellSpacing: 0,
        uiCls: "mini-htmlfile",
        _create: function () {
            mini.HtmlFile.superclass._create.call(this);
            this.fileEl = mini.append(this.el, "<input type=\"file\" hideFocus class=\"mini-htmlfile-file\" name=\"" + this.name + "\" ContentEditable=false/>");
            mini.on(this.innerEl, "mousemove", this.__OnMouseMove, this);
            mini.on(this.fileEl, "change", this.__OnFileChange, this)
        },
        __OnFileChange: function ($) {
            this.value = this.textEl.value = this.fileEl.value;
            this._OnValueChanged()
        },
        __OnMouseMove: function (B) {
            var A = B.pageX,
                _ = B.pageY,
                $ = mini.getBox(this.el);
            this.fileEl.style.left = (A - $.x - 5) + "px";
            this.fileEl.style.top = (_ - $.y - 5) + "px"
        },
        __OnValidation: function (B) {
            var A = B.value.split("."),
                $ = "*." + A[A.length - 1],
                _ = this.limitType.split(";");
            if (_.length > 0 && _.indexOf($) == -1) {
                    B.errorText = this.limitTypeErrorText + this.limitType;
                    B.isValid = false
                }
        },
        setName: function ($) {
            this.name = $;
            mini.setAttr(this.fileEl, "name", this.name)
        },
        getValue: function () {
            return this.textEl.value
        },
        _initButtons: function () {
            this.buttons = [];
            var $ = this.createButton();
            $.html = this.buttonText;
            this.buttons.push($)
        },
        getAttrs: function ($) {
            var _ = mini.HtmlFile.superclass.getAttrs.call(this, $);
            mini._ParseString($, _, ["limitType"]);
            return _
        }
    });
mini.regClass(mini.HtmlFile, "htmlfile");
mini.FileUpload = function ($) {
        mini.FileUpload.superclass.constructor.call(this, $);
        this.on("validation", this.__OnValidation, this)
    };
mini.extend(mini.FileUpload, mini.ButtonEdit, {
        width: 180,
        buttonText: "\u6d4f\u89c8...",
        limitTypeErrorText: "\u4e0a\u4f20\u6587\u4ef6\u683c\u5f0f\u4e3a\uff1a",
        readOnly: true,
        _cellSpacing: 0,
        limitSize: "",
        limitType: "",
        typesDescription: "\u4e0a\u4f20\u6587\u4ef6\u683c\u5f0f",
        uploadLimit: 0,
        queueLimit: "",
        flashUrl: "",
        uploadUrl: "",
        uploadOnSelect: false,
        uiCls: "mini-fileupload",
        _create: function () {
            mini.FileUpload.superclass._create.call(this);
            mini.addClass(this.el, "mini-htmlfile");
            this.fileEl = mini.append(this.el, "<div></div>");
            this.uploadEl = this.fileEl;
            mini.on(this.innerEl, "mousemove", this.__OnMouseMove, this)
        },
        destroy: function ($) {
            if (this.innerEl) {
                mini.clearEvent(this.innerEl);
                this.innerEl = null
            }
            mini.FileUpload.superclass.destroy.call(this, $)
        },
        _initButtons: function () {
            this.buttons = [];
            var $ = this.createButton();
            $.html = this.buttonText;
            this.buttons.push($)
        },
        __OnMouseMove: function (A) {
            var $ = this;
            if (!this.swfUpload) {
                var B = new SWFUpload({
                    file_post_name: this.name,
                    upload_url: $.uploadUrl,
                    flash_url: $.flashUrl,
                    file_size_limit: $.limitSize,
                    file_types: $.limitType,
                    file_types_description: $.typesDescription,
                    file_upload_limit: parseInt($.uploadLimit),
                    file_queue_limit: $.queueLimit,
                    file_queued_handler: mini.createDelegate(this.__on_file_queued, this),
                    upload_error_handler: mini.createDelegate(this.__on_upload_error, this),
                    upload_success_handler: mini.createDelegate(this.__on_upload_success, this),
                    upload_complete_handler: mini.createDelegate(this.__on_upload_complete, this),
                    button_placeholder: $.uploadEl,
                    button_width: 20,
                    button_height: 20,
                    button_window_mode: "transparent",
                    debug: false
                });
                B.flashReady();
                this.swfUpload = B
            } else {
                A = A || window.event;
                var _ = A.clientY,
                    C = A.clientX;
                this.swfUpload.movieElement.style.left = C - 17 + "px";
                this.swfUpload.movieElement.style.top = _ - 17 + "px"
            }
        },
        setLimitSize: function ($) {
            this.limitSize = $
        },
        setLimitType: function ($) {
            this.limitType = $
        },
        setTypesDescription: function ($) {
            this.typesDescription = $
        },
        setUploadLimit: function ($) {
            this.uploadLimit = $
        },
        setQueueLimit: function ($) {
            this.queueLimit = $
        },
        setFlashUrl: function ($) {
            this.flashUrl = $
        },
        setUploadUrl: function ($) {
            this.uploadUrl = $
        },
        setName: function ($) {
            this.name = $
        },
        startUpload: function ($) {
            this.swfUpload.startUpload()
        },
        __on_file_queued: function ($) {
            if (this.uploadOnSelect) this.swfUpload.startUpload();
            this.setText($.name)
        },
        __on_upload_success: function (_, $) {
            var A = {
                file: _,
                serverData: $
            };
            this.fire("uploadsuccess", A)
        },
        __on_upload_error: function ($) {
            var _ = {
                file: $,
                fileName: fileName
            };
            this.fire("uploaderror", _)
        },
        __on_upload_complete: function ($) {
            this.fire("uploadcomplete", $)
        },
        __fileError: function () {},
        getAttrs: function ($) {
            var _ = mini.FileUpload.superclass.getAttrs.call(this, $);
            mini._ParseString($, _, ["limitType", "limitSize", "flashUrl", "uploadUrl", "uploadLimit", "onuploadsuccess", "onuploaderror", "onuploadcomplete"]);
            mini._ParseBool($, _, ["uploadOnSelect"]);
            return _
        }
    });
mini.regClass(mini.FileUpload, "fileupload");
mini.Lookup = function () {
        this.data = [];
        mini.Lookup.superclass.constructor.call(this);
        mini.on(this.textEl, "mouseup", this.__OnMouseUp, this)
    };
mini.extend(mini.Lookup, mini.PopupEdit, {
        allowInput: true,
        valueField: "id",
        textField: "text",
        delimiter: ",",
        multiSelect: false,
        data: [],
        grid: null,
        uiCls: "mini-lookup",
        setMultiSelect: function ($) {
            this.multiSelect = $;
            if (this.grid) this.grid.setMultiSelect($)
        },
        setGrid: function ($) {
            if (typeof $ == "string") {
                mini.parse($);
                $ = mini.get($)
            }
            this.grid = mini.getAndCreate($);
            if (this.grid) {
                this.grid.setMultiSelect(this.multiSelect);
                this.grid.setCheckSelectOnLoad(false);
                this.grid.on("selectionchanged", this.__OnGridSelectionChanged, this);
                this.grid.on("load", this.__OnGridLoad, this)
            }
        },
        setValueField: function ($) {
            this.valueField = $
        },
        setTextField: function ($) {
            this.textField = $
        },
        getItemValue: function ($) {
            return String($[this.valueField])
        },
        getItemText: function ($) {
            var _ = $[this.textField];
            return mini.isNull(_) ? "" : String(_)
        },
        getValueAndText: function (A) {
            if (mini.isNull(A)) A = [];
            var B = [],
                C = [];
            for (var _ = 0, D = A.length; _ < D; _++) {
                    var $ = A[_];
                    if ($) {
                        B.push(this.getItemValue($));
                        C.push(this.getItemText($))
                    }
                }
            return [B.join(this.delimiter), C.join(this.delimiter)]
        },
        _getValueMaps: function (A) {
            var D = {};
            for (var $ = 0, B = A.length; $ < B; $++) {
                var _ = A[$],
                    C = _[this.valueField];
                D[C] = _
            }
            return D
        },
        __OnGridSelectionChanged: function (G) {
            var B = this._getValueMaps(this.grid.getData()),
                C = this._getValueMaps(this.grid.getSelecteds()),
                F = this._getValueMaps(this.data);
            if (this.multiSelect == false) {
                    F = {};
                    this.data = []
                }
            var A = {};
            for (var E in F) {
                    var $ = F[E];
                    if (B[E]) if (C[E]);
                    else A[E] = $
                }
            for (var _ = this.data.length - 1; _ >= 0; _--) {
                    $ = this.data[_],
                    E = $[this.valueField];
                    if (A[E]) this.data.removeAt(_)
                }
            for (E in C) {
                    $ = C[E];
                    if (!F[E]) this.data.push($)
                }
            var D = this.getValueAndText(this.data);
            this.setValue(D[0]);
            this.setText(D[1]);
            this._OnValueChanged()
        },
        __OnGridLoad: function (F) {
            var E = this.value.split(this.delimiter),
                A = this.grid.getData(),
                E = this._getValueMaps(this.data),
                B = [];
            for (var $ = 0, C = A.length; $ < C; $++) {
                    var _ = A[$],
                        D = _[this.valueField];
                    if (E[D]) B.push(_)
                }
            this.grid.selects(B)
        },
        doUpdate: function () {
            mini.Lookup.superclass.doUpdate.call(this);
            this.textEl.readOnly = true;
            this.el.style.cursor = "default"
        },
        __OnInputKeyDown: function ($) {
            mini.Lookup.superclass.__OnInputKeyDown.call(this, $);
            $.preventDefault();
            switch ($.keyCode) {
            case 46:
            case 8:
                break;
            case 37:
                break;
            case 39:
                break
            }
        },
        __OnMouseUp: function (C) {
            if (this.isReadOnly()) return;
            var _ = mini.getSelectRange(this.textEl),
                A = _[0],
                B = _[1],
                $ = this._findTextIndex(A)
        },
        _findTextIndex: function (E) {
            var _ = -1;
            if (this.text == "") return _;
            var C = this.text.split(this.delimiter),
                $ = 0;
            for (var A = 0, D = C.length; A < D; A++) {
                    var B = C[A];
                    if ($ < E && E <= $ + B.length) {
                        _ = A;
                        break
                    }
                    $ = $ + B.length + 1
                }
            return _
        },
        getAttrs: function ($) {
            var _ = mini.Lookup.superclass.getAttrs.call(this, $);
            mini._ParseString($, _, ["grid", "valueField", "textField"]);
            mini._ParseBool($, _, ["multiSelect"]);
            return _
        }
    });
mini.regClass(mini.Lookup, "lookup");
mini.TextBoxList = function () {
        mini.TextBoxList.superclass.constructor.call(this);
        this.data = [];
        this.doUpdate()
    };
mini.extend(mini.TextBoxList, mini.ValidatorBase, {
        value: "",
        text: "",
        valueField: "id",
        textField: "text",
        url: "",
        delay: 250,
        allowInput: true,
        editIndex: 0,
        focusCls: "mini-textboxlist-focus",
        itemHoverClass: "mini-textboxlist-item-hover",
        itemSelectedClass: "mini-textboxlist-item-selected",
        closeHoverClass: "mini-textboxlist-close-hover",
        uiCls: "mini-textboxlist",
        _create: function () {
            var A = "<table class=\"mini-textboxlist\" cellpadding=\"0\" cellspacing=\"0\"><tr ><td class=\"mini-textboxlist-border\"><ul></ul><a href=\"#\"></a><input type=\"hidden\"/></td></tr></table>",
                _ = document.createElement("div");
            _.innerHTML = A;
            this.el = _.firstChild;
            var $ = this.el.getElementsByTagName("td")[0];
            this.ulEl = $.firstChild;
            this.valueEl = $.lastChild;
            this.focusEl = $.childNodes[1]
        },
        destroy: function ($) {
            if (this.isShowPopup) this.hidePopup();
            mini.TextBoxList.superclass.destroy.call(this, $)
        },
        _initEvents: function () {
            mini.TextBoxList.superclass._initEvents.call(this);
            mini.on(this.el, "mousemove", this.__OnMouseMove, this);
            mini.on(this.el, "mouseout", this.__OnMouseOut, this);
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "keydown", this.__OnKeyDown, this);
            mini.on(document, "mousedown", function ($) {
                if (this.isShowPopup) if (!mini.isAncestor(this.popup.el, $.target)) this.hidePopup();
                if (this.focused) if (this.within($) == false) {
                    this.select(null, false);
                    this.showInput(false);
                    this.removeCls(this.focusCls);
                    this.focused = false
                }
            }, this)
        },
        errorIconEl: null,
        getErrorIconEl: function () {
            if (!this.errorIconEl) {
                var _ = this.el.rows[0],
                    $ = _.insertCell(1);
                $.style.cssText = "width:18px;vertical-align:top;";
                $.innerHTML = "<div class=\"mini-errorIcon\"></div>";
                this.errorIconEl = $.firstChild
            }
            return this.errorIconEl
        },
        _RemoveErrorIcon: function () {
            if (this.errorIconEl) jQuery(this.errorIconEl.parentNode).remove();
            this.errorIconEl = null
        },
        doLayout: function () {
            if (this.canLayout() == false) return;
            mini.TextBoxList.superclass.doLayout.call(this);
            if (this.isReadOnly() || this.allowInput == false) this.inputEl.readOnly = true;
            else this.inputEl.readOnly = false
        },
        doUpdate: function () {
            if (this._ValueChangeTimer) clearInterval(this._ValueChangeTimer);
            if (this.inputEl) mini.un(this.inputEl, "keydown", this.__OnInputKeyDown, this);
            var G = [],
                F = this.uid;
            for (var A = 0, E = this.data.length; A < E; A++) {
                    var _ = this.data[A],
                        C = F + "$text$" + A,
                        B = _[this.textField];
                    if (mini.isNull(B)) B = "";
                    G[G.length] = "<li id=\"" + C + "\" class=\"mini-textboxlist-item\">";
                    G[G.length] = B;
                    G[G.length] = "<span class=\"mini-textboxlist-close\"></span></li>"
                }
            var $ = F + "$input";
            G[G.length] = "<li id=\"" + $ + "\" class=\"mini-textboxlist-inputLi\"><input class=\"mini-textboxlist-input\" type=\"text\" autocomplete=\"off\"></li>";
            this.ulEl.innerHTML = G.join("");
            this.editIndex = this.data.length;
            if (this.editIndex < 0) this.editIndex = 0;
            this.inputLi = this.ulEl.lastChild;
            this.inputEl = this.inputLi.firstChild;
            mini.on(this.inputEl, "keydown", this.__OnInputKeyDown, this);
            var D = this;
            this.inputEl.onkeyup = function () {
                    D._syncInputSize()
                };
            D._ValueChangeTimer = null;
            D._LastInputText = D.inputEl.value;
            this.inputEl.onfocus = function () {
                    D._ValueChangeTimer = setInterval(function () {
                        if (D._LastInputText != D.inputEl.value) {
                            D._startQuery();
                            D._LastInputText = D.inputEl.value
                        }
                    }, 10);
                    D.addCls(D.focusCls);
                    D.focused = true
                };
            this.inputEl.onblur = function () {
                    clearInterval(D._ValueChangeTimer)
                }
        },
        getItemByEvent: function (_) {
            var A = mini.findParent(_.target, "mini-textboxlist-item");
            if (A) {
                var $ = A.id.split("$"),
                    B = $[$.length - 1];
                return this.data[B]
            }
        },
        getItem: function ($) {
            if (typeof $ == "number") return this.data[$];
            if (typeof $ == "object") return $
        },
        getItemEl: function (_) {
            var $ = this.data.indexOf(_),
                A = this.uid + "$text$" + $;
            return document.getElementById(A)
        },
        hoverItem: function ($, A) {
            this.blurItem();
            var _ = this.getItemEl($);
            mini.addClass(_, this.itemHoverClass);
            if (A && mini.hasClass(A.target, "mini-textboxlist-close")) mini.addClass(A.target, this.closeHoverClass)
        },
        blurItem: function () {
            var _ = this.data.length;
            for (var A = 0, C = _; A < C; A++) {
                var $ = this.data[A],
                    B = this.getItemEl($);
                if (B) {
                        mini.removeClass(B, this.itemHoverClass);
                        mini.removeClass(B.lastChild, this.closeHoverClass)
                    }
            }
        },
        showInput: function (A) {
            this.select(null);
            if (mini.isNumber(A)) this.editIndex = A;
            else this.editIndex = this.data.length;
            if (this.editIndex < 0) this.editIndex = 0;
            if (this.editIndex > this.data.length) this.editIndex = this.data.length;
            var B = this.inputLi;
            B.style.display = "block";
            if (mini.isNumber(A) && A < this.data.length) {
                var _ = this.data[A],
                    $ = this.getItemEl(_);
                jQuery($).before(B)
            } else this.ulEl.appendChild(B);
            if (A !== false) setTimeout(function () {
                try {
                    B.firstChild.focus();
                    mini.selectRange(B.firstChild, 100)
                } catch ($) {}
            }, 10);
            else {
                this.lastInputText = "";
                this.inputEl.value = ""
            }
            return B
        },
        select: function (_) {
            _ = this.getItem(_);
            if (this.selected) {
                var $ = this.getItemEl(this.selected);
                mini.removeClass($, this.itemSelectedClass)
            }
            this.selected = _;
            if (this.selected) {
                $ = this.getItemEl(this.selected);
                mini.addClass($, this.itemSelectedClass)
            }
            var A = this;
            if (this.selected) this.focusEl.focus();
            if (this.selected) {
                A.addCls(A.focusCls);
                A.focused = true
            }
        },
        _doInsertSelectValue: function () {
            var _ = this.listbox.getSelected(),
                $ = this.editIndex;
            if (_) {
                    _ = mini.clone(_);
                    this.insertItem($, _)
                }
        },
        insertItem: function (_, $) {
            this.data.insert(_, $);
            var B = this.getText(),
                A = this.getValue();
            this.setValue(A, false);
            this.setText(B, false);
            this._createData();
            this.doUpdate();
            this.showInput(_ + 1);
            this._OnValueChanged()
        },
        removeItem: function (_) {
            if (!_) return;
            var $ = this.getItemEl(_);
            mini.removeNode($);
            this.data.remove(_);
            var B = this.getText(),
                A = this.getValue();
            this.setValue(A, false);
            this.setText(B, false);
            this._OnValueChanged()
        },
        _createData: function () {
            var C = (this.text ? this.text : "").split(","),
                B = (this.value ? this.value : "").split(",");
            if (B[0] == "") B = [];
            var _ = B.length;
            this.data.length = _;
            for (var A = 0, D = _; A < D; A++) {
                    var $ = this.data[A];
                    if (!$) {
                        $ = {};
                        this.data[A] = $
                    }
                    $[this.textField] = !mini.isNull(C[A]) ? C[A] : "";
                    $[this.valueField] = !mini.isNull(B[A]) ? B[A] : ""
                }
            this.value = this.getValue();
            this.text = this.getText()
        },
        getInputText: function () {
            return this.inputEl ? this.inputEl.value : ""
        },
        getText: function () {
            var C = [];
            for (var _ = 0, A = this.data.length; _ < A; _++) {
                var $ = this.data[_],
                    B = $[this.textField];
                if (mini.isNull(B)) B = "";
                B = B.replace(",", "\uff0c");
                C.push(B)
            }
            return C.join(",")
        },
        getValue: function () {
            var B = [];
            for (var _ = 0, A = this.data.length; _ < A; _++) {
                var $ = this.data[_];
                B.push($[this.valueField])
            }
            return B.join(",")
        },
        setName: function ($) {
            if (this.name != $) {
                this.name = $;
                this.valueEl.name = $
            }
        },
        setValue: function ($) {
            if (mini.isNull($)) $ = "";
            if (this.value != $) {
                this.value = $;
                this.valueEl.value = $;
                this._createData();
                this.doUpdate()
            }
        },
        setText: function ($) {
            if (mini.isNull($)) $ = "";
            if (this.text !== $) {
                this.text = $;
                this._createData();
                this.doUpdate()
            }
        },
        setValueField: function ($) {
            this.valueField = $
        },
        setTextField: function ($) {
            this.textField = $
        },
        setAllowInput: function ($) {
            this.allowInput = $;
            this.doLayout()
        },
        setUrl: function ($) {
            this.url = $
        },
        setPopupHeight: function ($) {
            this.popupHeight = $
        },
        setPopupMinHeight: function ($) {
            this.popupMinHeight = $
        },
        setPopupMaxHeight: function ($) {
            this.popupMaxHeight = $
        },
        _syncInputSize: function () {
            if (this.isDisplay() == false) return;
            var _ = this.getInputText(),
                B = mini.measureText(this.inputEl, _),
                $ = B.width > 20 ? B.width + 4 : 20,
                A = mini.getWidth(this.el, true);
            if ($ > A - 15) $ = A - 15;
            this.inputEl.style.width = $ + "px"
        },
        _startQuery: function (_) {
            var $ = this;
            setTimeout(function () {
                $._syncInputSize()
            }, 1);
            this.showPopup("loading");
            this._stopQuery();
            this.delayTimer = setTimeout(function () {
                var _ = $.inputEl.value;
                $._doQuery()
            }, this.delay)
        },
        _doQuery: function () {
            if (this.isDisplay() == false) return;
            var _ = this.getInputText(),
                A = this,
                $ = this.listbox.getData(),
                B = {
                    key: _,
                    value: this.getValue(),
                    text: this.getText()
                },
                C = this.url,
                E = typeof C == "function" ? C : window[C];
            if (typeof E == "function") C = E(this);
            var D = {
                    url: C,
                    async: true,
                    data: B,
                    type: "GET",
                    cache: false,
                    dataType: "text",
                    cancel: false
                };
            this.fire("beforeload", D);
            if (D.cancel) return;
            mini.copyTo(D, {
                    success: function ($) {
                        var _ = mini.decode($);
                        A.listbox.setData(_);
                        A.showPopup();
                        A.listbox.focusItem(0, true);
                        A.fire("load")
                    },
                    error: function ($, B, _) {
                        A.showPopup("error")
                    }
                });
            A.ajaxer = jQuery.ajax(D)
        },
        _stopQuery: function () {
            if (this.delayTimer) {
                clearTimeout(this.delayTimer);
                this.delayTimer = null
            }
            if (this.ajaxer) this.ajaxer.abort()
        },
        within: function ($) {
            if (mini.isAncestor(this.el, $.target)) return true;
            if (this.showPopup && this.popup && this.popup.within($)) return true;
            return false
        },
        popupLoadingText: "<span class='mini-textboxlist-popup-loading'>Loading...</span>",
        popupErrorText: "<span class='mini-textboxlist-popup-error'>Error</span>",
        popupEmptyText: "<span class='mini-textboxlist-popup-noresult'>No Result</span>",
        isShowPopup: false,
        popupHeight: "",
        popupMinHeight: 30,
        popupMaxHeight: 150,
        _createPopup: function () {
            if (!this.popup) {
                this.popup = new mini.ListBox();
                this.popup.addCls("mini-textboxlist-popup");
                this.popup.setStyle("position:absolute;left:0;top:0;");
                this.popup.showEmpty = true;
                this.popup.setValueField(this.valueField);
                this.popup.setTextField(this.textField);
                this.popup.render(document.body);
                this.popup.on("itemclick", function ($) {
                    this.hidePopup();
                    this._doInsertSelectValue()
                }, this)
            }
            this.listbox = this.popup;
            return this.popup
        },
        showPopup: function ($) {
            this.isShowPopup = true;
            var _ = this._createPopup();
            _.el.style.zIndex = mini.getMaxZIndex();
            this.listbox.emptyText = this.popupEmptyText;
            if ($ == "loading") {
                this.listbox.emptyText = this.popupLoadingText;
                this.listbox.setData([])
            } else if ($ == "error") {
                this.listbox.emptyText = this.popupLoadingText;
                this.listbox.setData([])
            }
            this.listbox.doUpdate();
            var A = this.getBox(),
                C = A.x,
                B = A.y + A.height;
            this.popup.el.style.display = "block";
            mini.setXY(_.el, -1000, -1000);
            this.popup.setWidth(A.width);
            this.popup.setHeight(this.popupHeight);
            if (this.popup.getHeight() < this.popupMinHeight) this.popup.setHeight(this.popupMinHeight);
            if (this.popup.getHeight() > this.popupMaxHeight) this.popup.setHeight(this.popupMaxHeight);
            mini.setXY(_.el, C, B)
        },
        hidePopup: function () {
            this.isShowPopup = false;
            if (this.popup) this.popup.el.style.display = "none"
        },
        __OnMouseMove: function (_) {
            if (this.enabled == false) return;
            var $ = this.getItemByEvent(_);
            if (!$) {
                this.blurItem();
                return
            }
            this.hoverItem($, _)
        },
        __OnMouseOut: function ($) {
            this.blurItem()
        },
        __OnClick: function (_) {
            if (this.enabled == false) return;
            if (this.isReadOnly() || this.allowInput == false) return;
            var $ = this.getItemByEvent(_);
            if (!$) {
                if (mini.findParent(_.target, "mini-textboxlist-input"));
                else this.showInput();
                return
            }
            this.focusEl.focus();
            this.select($);
            if (_ && mini.hasClass(_.target, "mini-textboxlist-close")) this.removeItem($)
        },
        __OnKeyDown: function (B) {
            if (this.isReadOnly() || this.allowInput == false) return false;
            var $ = this.data.indexOf(this.selected),
                _ = this;

            function A() {
                    var A = _.data[$];
                    _.removeItem(A);
                    A = _.data[$];
                    if (!A) A = _.data[$ - 1];
                    _.select(A);
                    if (!A) _.showInput()
                }
            switch (B.keyCode) {
                case 8:
                    B.preventDefault();
                    A();
                    break;
                case 37:
                case 38:
                    this.select(null);
                    this.showInput($);
                    break;
                case 39:
                case 40:
                    $ += 1;
                    this.select(null);
                    this.showInput($);
                    break;
                case 46:
                    A();
                    break
                }
        },
        __OnInputKeyDown: function (G) {
            G.stopPropagation();
            if (this.isReadOnly() || this.allowInput == false) return;
            var E = mini.getSelectRange(this.inputEl),
                B = E[0],
                D = E[1],
                F = this.inputEl.value.length,
                C = B == D && B == 0,
                A = B == D && D == F;
            if (this.isReadOnly() || this.allowInput == false) G.preventDefault();
            if (G.keyCode == 9) {
                    this.hidePopup();
                    return
                }
            if (G.keyCode == 16 || G.keyCode == 17 || G.keyCode == 18) return;
            switch (G.keyCode) {
                case 13:
                    if (this.isShowPopup) {
                        G.preventDefault();
                        var _ = this.listbox.getFocusedItem();
                        if (_) this.listbox.setSelected(_);
                        this.lastInputText = this.text;
                        this.hidePopup();
                        this._doInsertSelectValue()
                    }
                    break;
                case 27:
                    G.preventDefault();
                    this.hidePopup();
                    break;
                case 8:
                    if (C) G.preventDefault();
                case 37:
                    if (C) if (this.isShowPopup) this.hidePopup();
                    else if (this.editIndex > 0) {
                        var $ = this.editIndex - 1;
                        if ($ < 0) $ = 0;
                        if ($ >= this.data.length) $ = this.data.length - 1;
                        this.showInput(false);
                        this.select($)
                    }
                    break;
                case 39:
                    if (A) if (this.isShowPopup) this.hidePopup();
                    else if (this.editIndex <= this.data.length - 1) {
                        $ = this.editIndex;
                        this.showInput(false);
                        this.select($)
                    }
                    break;
                case 38:
                    G.preventDefault();
                    if (this.isShowPopup) {
                        $ = -1,
                        _ = this.listbox.getFocusedItem();
                        if (_) $ = this.listbox.indexOf(_);
                        $--;
                        if ($ < 0) $ = 0;
                        this.listbox.focusItem($, true)
                    }
                    break;
                case 40:
                    G.preventDefault();
                    if (this.isShowPopup) {
                        $ = -1,
                        _ = this.listbox.getFocusedItem();
                        if (_) $ = this.listbox.indexOf(_);
                        $++;
                        if ($ < 0) $ = 0;
                        if ($ >= this.listbox.getCount()) $ = this.listbox.getCount() - 1;
                        this.listbox.focusItem($, true)
                    } else this._startQuery(true);
                    break;
                default:
                    break
                }
        },
        focus: function () {
            try {
                this.inputEl.focus()
            } catch ($) {}
        },
        blur: function () {
            try {
                this.inputEl.blur()
            } catch ($) {}
        },
        getAttrs: function ($) {
            var A = mini.TextBox.superclass.getAttrs.call(this, $),
                _ = jQuery($);
            mini._ParseString($, A, ["value", "text", "valueField", "textField", "url", "popupHeight"]);
            mini._ParseBool($, A, ["allowInput"]);
            mini._ParseInt($, A, ["popupMinHeight", "popupMaxHeight"]);
            return A
        }
    });
mini.regClass(mini.TextBoxList, "textboxlist");
mini.AutoComplete = function () {
        mini.AutoComplete.superclass.constructor.call(this);
        this.updateButton("popup", {
            visible: false
        });
        var $ = this;
        $._ValueChangeTimer = null;
        this.textEl.onfocus = function () {
            $._LastInputText = $.textEl.value;
            $._ValueChangeTimer = setInterval(function () {
                if ($._LastInputText != $.textEl.value) {
                    $._tryQuery();
                    $._LastInputText = $.textEl.value;
                    if ($.textEl.value == "" && $.value != "") {
                        $.setValue("");
                        $._OnValueChanged()
                    }
                }
            }, 10)
        };
        this.textEl.onblur = function () {
            clearInterval($._ValueChangeTimer);
            if (!$.isShowPopup()) if ($._LastInputText != $.textEl.value) alert(1)
        }
    };
mini.extend(mini.AutoComplete, mini.ComboBox, {
        url: "",
        allowInput: true,
        delay: 250,
        uiCls: "mini-autocomplete",
        setUrl: function ($) {
            this.url = $
        },
        setValue: function ($) {
            if (this.value != $) {
                this.value = $;
                this.valueEl.value = this.value
            }
        },
        setText: function ($) {
            if (this.text != $) {
                this.text = $;
                this._LastInputText = $
            }
            this.textEl.value = this.text
        },
        popupLoadingText: "<span class='mini-textboxlist-popup-loading'>Loading...</span>",
        popupErrorText: "<span class='mini-textboxlist-popup-error'>Error</span>",
        popupEmptyText: "<span class='mini-textboxlist-popup-noresult'>No Result</span>",
        showPopup: function ($) {
            var _ = this.getPopup();
            this.listbox.showEmpty = true;
            this.listbox.emptyText = this.popupEmptyText;
            if ($ == "loading") {
                this.listbox.emptyText = this.popupLoadingText;
                this.listbox.setData([])
            } else if ($ == "error") {
                this.listbox.emptyText = this.popupLoadingText;
                this.listbox.setData([])
            }
            this.listbox.doUpdate();
            mini.AutoComplete.superclass.showPopup.call(this)
        },
        __OnInputKeyDown: function (C) {
            this.fire("keydown", {
                htmlEvent: C
            });
            if (C.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) return false;
            if (C.keyCode == 9) {
                this.hidePopup();
                return
            }
            switch (C.keyCode) {
            case 27:
                if (this.isShowPopup()) C.stopPropagation();
                this.hidePopup();
                break;
            case 13:
                if (this.isShowPopup()) {
                    C.preventDefault();
                    C.stopPropagation();
                    var _ = this.listbox.getFocusedIndex();
                    if (_ != -1) {
                        var $ = this.listbox.getAt(_),
                            B = this.listbox.getValueAndText([$]),
                            A = B[0];
                        this.setValue(A);
                        this.setText(B[1]);
                        this._OnValueChanged();
                        this.hidePopup()
                    }
                } else this.fire("enter");
                break;
            case 37:
                break;
            case 38:
                _ = this.listbox.getFocusedIndex();
                if (_ == -1) {
                    _ = 0;
                    if (!this.multiSelect) {
                        $ = this.listbox.findItems(this.value)[0];
                        if ($) _ = this.listbox.indexOf($)
                    }
                }
                if (this.isShowPopup()) if (!this.multiSelect) {
                    _ -= 1;
                    if (_ < 0) _ = 0;
                    this.listbox.focusItem(_)
                }
                break;
            case 39:
                break;
            case 40:
                _ = this.listbox.getFocusedIndex();
                if (this.isShowPopup()) {
                    if (!this.multiSelect) {
                        _ += 1;
                        if (_ > this.listbox.getCount() - 1) _ = this.listbox.getCount() - 1;
                        this.listbox.focusItem(_)
                    }
                } else this._tryQuery(this.textEl.value);
                break;
            default:
                break
            }
        },
        _tryQuery: function (_) {
            var $ = this;
            if (this._queryTimer) {
                clearTimeout(this._queryTimer);
                this._queryTimer = null
            }
            this._queryTimer = setTimeout(function () {
                var _ = $.textEl.value;
                $._doQuery(_)
            }, this.delay);
            this.showPopup("loading")
        },
        _doQuery: function ($) {
            if (this.ajaxer) this.ajaxer.abort();
            var _ = this;
            this.ajaxer = jQuery.ajax({
                url: this.url,
                data: {
                    key: $
                },
                async: true,
                cache: false,
                dataType: "text",
                success: function ($) {
                    var A = mini.decode($);
                    _.listbox.setData(A);
                    _.showPopup();
                    _.listbox.focusItem(0, true);
                    _.fire("load")
                },
                error: function ($, B, A) {
                    _.showPopup("error")
                }
            })
        },
        getAttrs: function ($) {
            var A = mini.AutoComplete.superclass.getAttrs.call(this, $),
                _ = jQuery($);
            return A
        }
    });
mini.regClass(mini.AutoComplete, "autocomplete");
mini.Form = function ($) {
        this.el = mini.byId($);
        mini.Form.superclass.constructor.call(this)
    };
mini.extend(mini.Form, mini.Component, {
        el: null,
        getFields: function () {
            if (!this.el) return [];
            var $ = mini.findControls(function ($) {
                if (!$.el || !$.name || $.formField != true) return false;
                if (mini.isAncestor(this.el, $.el)) return true;
                return false
            }, this);
            return $
        },
        getFieldsMap: function () {
            var B = this.getFields(),
                A = {};
            for (var $ = 0, C = B.length; $ < C; $++) {
                    var _ = B[$];
                    A[_.name] = _
                }
            return A
        },
        getField: function ($) {
            if (!this.el) return null;
            return mini.getbyName($, this.el)
        },
        getData: function (B) {
            var A = B ? "getFormValue" : "getValue",
                $ = this.getFields(),
                D = {};
            for (var _ = 0, E = $.length; _ < E; _++) {
                    var C = $[_],
                        F = C[A];
                    if (!F) continue;
                    D[C.name] = F.call(C)
                }
            return D
        },
        setData: function (B) {
            if (typeof B != "object") return;
            var _ = this.getFieldsMap();
            for (var A in B) {
                var $ = _[A];
                if (!$ || !$.setValue) continue;
                $.setValue(B[A])
            }
        },
        reset: function () {
            var $ = this.getFields();
            for (var _ = 0, B = $.length; _ < B; _++) {
                var A = $[_];
                if (!A.setValue) continue;
                A.setValue(A.defaultValue)
            }
            this.setIsValid(true)
        },
        clear: function () {
            var $ = this.getFields();
            for (var _ = 0, B = $.length; _ < B; _++) {
                var A = $[_];
                if (!A.setValue) continue;
                A.setValue("")
            }
            this.setIsValid(true)
        },
        validate: function (C) {
            var $ = this.getFields();
            for (var _ = 0, D = $.length; _ < D; _++) {
                var A = $[_];
                if (!A.validate) continue;
                var B = A.validate();
                if (B == false && C === false) break
            }
            return this.isValid()
        },
        setIsValid: function (B) {
            var $ = this.getFields();
            for (var _ = 0, C = $.length; _ < C; _++) {
                var A = $[_];
                if (!A.setIsValid) continue;
                A.setIsValid(B)
            }
        },
        isValid: function () {
            var $ = this.getFields();
            for (var _ = 0, B = $.length; _ < B; _++) {
                var A = $[_];
                if (!A.isValid) continue;
                if (A.isValid() == false) return false
            }
            return true
        },
        getErrorTexts: function () {
            var A = [],
                _ = this.getErrors();
            for (var $ = 0, C = _.length; $ < C; $++) {
                    var B = _[$];
                    A.push(B.errorText)
                }
            return A
        },
        getErrors: function () {
            var A = [],
                $ = this.getFields();
            for (var _ = 0, C = $.length; _ < C; _++) {
                    var B = $[_];
                    if (!B.isValid) continue;
                    if (B.isValid() == false) A.push(B)
                }
            return A
        },
        mask: function ($) {
            if (typeof $ == "string") $ = {
                html: $
            };
            $ = $ || {};
            $.el = this.el;
            if (!$.cls) $.cls = this.maskCls;
            mini.mask($)
        },
        unmask: function () {
            mini.unmask(this.el)
        },
        maskCls: "mini-mask-loading",
        loadingMsg: "\u6570\u636e\u52a0\u8f7d\u4e2d\uff0c\u8bf7\u7a0d\u540e...",
        loading: function () {
            this.mask(this.loadingMsg)
        }
    });
mini.Panel = function () {
        this._initButtons();
        mini.Panel.superclass.constructor.call(this);
        if (this.url) this.setUrl(this.url)
    };
mini.extend(mini.Panel, mini.Control, {
        width: 250,
        title: "",
        iconCls: "",
        iconStyle: "",
        url: "",
        refreshOnExpand: false,
        maskOnLoad: true,
        showCollapseButton: false,
        showCloseButton: false,
        closeAction: "display",
        showHeader: true,
        showToolbar: false,
        showFooter: false,
        headerCls: "",
        headerStyle: "",
        bodyCls: "",
        bodyStyle: "",
        footerCls: "",
        footerStyle: "",
        toolbarCls: "",
        toolbarStyle: "",
        set: function (A) {
            if (typeof A == "string") return this;
            var _ = this.allowLayout;
            this.allowLayout = false;
            var C = A.toolbar;
            delete A.toolbar;
            var $ = A.footer;
            delete A.footer;
            var B = A.url;
            delete A.url;
            mini.Panel.superclass.set.call(this, A);
            if (C) this.setToolbar(C);
            if ($) this.setFooter($);
            if (B) this.setUrl(B);
            this.allowLayout = _;
            this.doLayout();
            return this
        },
        uiCls: "mini-panel",
        _create: function () {
            this.el = document.createElement("div");
            this.el.className = "mini-panel";
            var _ = "<div class=\"mini-panel-border\">" + "<div class=\"mini-panel-header\" ><div class=\"mini-panel-header-inner\" ><span class=\"mini-panel-icon\"></span><div class=\"mini-panel-title\" ></div><div class=\"mini-tools\" ></div></div></div>" + "<div class=\"mini-panel-viewport\">" + "<div class=\"mini-panel-toolbar\"></div>" + "<div class=\"mini-panel-body\" ></div>" + "<div class=\"mini-panel-footer\"></div>" + "<div class=\"mini-panel-resizeGrid\"></div>" + "</div>" + "</div>";
            this.el.innerHTML = _;
            this.borderEl = this.el.firstChild;
            this.headerEl = this.borderEl.firstChild;
            this.viewportEl = this.borderEl.lastChild;
            this.toolbarEl = mini.byClass("mini-panel-toolbar", this.el);
            this.bodyEl = mini.byClass("mini-panel-body", this.el);
            this.footerEl = mini.byClass("mini-panel-footer", this.el);
            this.resizeGridEl = mini.byClass("mini-panel-resizeGrid", this.el);
            var $ = mini.byClass("mini-panel-header-inner", this.el);
            this.iconEl = mini.byClass("mini-panel-icon", this.el);
            this.titleEl = mini.byClass("mini-panel-title", this.el);
            this.toolsEl = mini.byClass("mini-tools", this.el);
            mini.setStyle(this.bodyEl, this.bodyStyle);
            this.doUpdate()
        },
        _initEvents: function () {
            mini._BindEvents(function () {
                mini.on(this.el, "click", this.__OnClick, this)
            }, this)
        },
        doUpdate: function () {
            this.titleEl.innerHTML = this.title;
            this.iconEl.style.display = (this.iconCls || this.iconStyle) ? "inline" : "none";
            this.iconEl.className = "mini-panel-icon " + this.iconCls;
            mini.setStyle(this.iconEl, this.iconStyle);
            this.headerEl.style.display = this.showHeader ? "" : "none";
            this.toolbarEl.style.display = this.showToolbar ? "" : "none";
            this.footerEl.style.display = this.showFooter ? "" : "none";
            var A = "";
            for (var $ = this.buttons.length - 1; $ >= 0; $--) {
                var _ = this.buttons[$];
                A += "<span id=\"" + $ + "\" class=\"" + _.cls + " " + (_.enabled ? "" : "mini-disabled") + "\" style=\"" + _.style + ";" + (_.visible ? "" : "display:none;") + "\"></span>"
            }
            this.toolsEl.innerHTML = A;
            this.doLayout()
        },
        count: 1,
        doLayout: function () {
            if (!this.canLayout()) return;
            this.resizeGridEl.style.display = this.allowResize ? "" : "none";
            this.bodyEl.style.height = "";
            this.bodyEl.style.width = "";
            this.headerEl.style.width = "";
            this.viewportEl.style.width = "";
            var F = this.isAutoHeight(),
                C = this.isAutoWidth(),
                _ = mini.getPaddings(this.bodyEl),
                G = mini.getBorders(this.bodyEl),
                J = mini.getMargins(this.bodyEl);
            if (!F) {
                    var I = mini.getBorders(this.borderEl),
                        A = this.getHeight(true),
                        B = this.showHeader ? jQuery(this.headerEl).outerHeight() : 0,
                        D = this.showToolbar ? jQuery(this.toolbarEl).outerHeight() : 0,
                        H = this.showFooter ? jQuery(this.footerEl).outerHeight() : 0;
                    this.viewportEl.style.height = (A - B) + "px";
                    A = A - B - D - H;
                    if (jQuery.boxModel) A = A - _.top - _.bottom - G.top - G.bottom;
                    A = A - J.top - J.bottom;
                    if (A < 0) A = 0;
                    this.bodyEl.style.height = A + "px"
                }
            var $ = this.getWidth(true),
                E = $;
            $ = $ - J.left - J.right;
            if (jQuery.boxModel) $ = $ - _.left - _.right - G.left - G.right;
            if ($ < 0) $ = 0;
            this.bodyEl.style.width = $ + "px";
            $ = E;
            this.headerEl.style.width = $ + "px";
            this.toolbarEl.style.width = $ + "px";
            this.footerEl.style.width = "auto";
            mini.layout(this.borderEl)
        },
        setHeaderStyle: function ($) {
            mini.setStyle(this.headerEl, $);
            this.doLayout()
        },
        setBodyStyle: function ($) {
            mini.setStyle(this.bodyEl, $);
            this.doLayout()
        },
        setToolbarStyle: function ($) {
            mini.setStyle(this.toolbarEl, $);
            this.doLayout()
        },
        setFooterStyle: function ($) {
            mini.setStyle(this.footerEl, $);
            this.doLayout()
        },
        setHeaderCls: function ($) {
            jQuery(this.headerEl).removeClass(this.headerCls);
            jQuery(this.headerEl).addClass($);
            this.headerCls = $;
            this.doLayout()
        },
        setBodyCls: function ($) {
            jQuery(this.bodyEl).removeClass(this.bodyCls);
            jQuery(this.bodyEl).addClass($);
            this.bodyCls = $;
            this.doLayout()
        },
        setToolbarCls: function ($) {
            jQuery(this.toolbarEl).removeClass(this.toolbarCls);
            jQuery(this.toolbarEl).addClass($);
            this.toolbarCls = $;
            this.doLayout()
        },
        setFooterCls: function ($) {
            jQuery(this.footerEl).removeClass(this.footerCls);
            jQuery(this.footerEl).addClass($);
            this.footerCls = $;
            this.doLayout()
        },
        setTitle: function ($) {
            this.title = $;
            this.doUpdate()
        },
        setIconCls: function ($) {
            this.iconCls = $;
            this.doUpdate()
        },
        setShowCloseButton: function ($) {
            this.showCloseButton = $;
            var _ = this.getButton("close");
            _.visible = $;
            if (_) this.doUpdate()
        },
        setCloseAction: function ($) {
            this.closeAction = $
        },
        setShowCollapseButton: function ($) {
            this.showCollapseButton = $;
            var _ = this.getButton("collapse");
            _.visible = $;
            if (_) this.doUpdate()
        },
        setShowHeader: function ($) {
            this.showHeader = $;
            this.doUpdate()
        },
        setShowToolbar: function ($) {
            this.showToolbar = $;
            this.doUpdate()
        },
        setShowFooter: function ($) {
            this.showFooter = $;
            this.doUpdate()
        },
        __OnClick: function (A) {
            var $ = mini.findParent(A.target, "mini-tools");
            if ($) {
                var _ = this.getButton(parseInt(A.target.id));
                if (_) this._OnButtonClick(_, A)
            }
        },
        _OnButtonClick: function (_, $) {
            var A = {
                button: _,
                index: this.buttons.indexOf(_),
                name: _.name.toLowerCase(),
                htmlEvent: $,
                cancel: false
            };
            this.fire("beforebuttonclick", A);
            if (A.cancel == true) return A;
            this.fire("buttonclick", A);
            if (A.name == "close") if (this.closeAction == "destroy") {
                this.__HideAction = "close";
                this.destroy()
            } else this.hide();
            if (A.name == "collapse") {
                this.toggle();
                if (this.refreshOnExpand && this.expanded && this.url) this.reload()
            }
            return A
        },
        onButtonClick: function (_, $) {
            this.on("buttonclick", _, $)
        },
        _initButtons: function () {
            this.buttons = [];
            var _ = this.createButton({
                name: "close",
                cls: "mini-tools-close",
                visible: this.showCloseButton
            });
            this.buttons.push(_);
            var $ = this.createButton({
                name: "collapse",
                cls: "mini-tools-collapse",
                visible: this.showCollapseButton
            });
            this.buttons.push($)
        },
        createButton: function (_) {
            var $ = mini.copyTo({
                name: "",
                cls: "",
                style: "",
                visible: true,
                enabled: true,
                html: ""
            }, _);
            return $
        },
        addButton: function (_, $) {
            if (typeof _ == "string") _ = {
                iconCls: _
            };
            _ = this.createButton(_);
            if (typeof $ != "number") $ = this.buttons.length;
            this.buttons.insert($, _);
            this.doUpdate()
        },
        updateButton: function ($, A) {
            var _ = this.getButton($);
            if (!_) return;
            mini.copyTo(_, A);
            this.doUpdate()
        },
        removeButton: function ($) {
            var _ = this.getButton($);
            if (!_) return;
            this.buttons.remove(_);
            this.doUpdate()
        },
        getButton: function ($) {
            if (typeof $ == "number") return this.buttons[$];
            else for (var _ = 0, A = this.buttons.length; _ < A; _++) {
                var B = this.buttons[_];
                if (B.name == $) return B
            }
        },
        destroy: function ($) {
            this._doRemoveIFrame();
            this.iframeEl = null;
            this.toolbarEl = null;
            this.bodyEl = null;
            this.footerEl = null;
            mini.Panel.superclass.destroy.call(this, $)
        },
        setBody: function (_) {
            if (!_) return;
            if (!mini.isArray(_)) _ = [_];
            for (var $ = 0, A = _.length; $ < A; $++) {
                var B = _[$];
                mini.append(this.bodyEl, B)
            }
            mini.parse(this.bodyEl);
            this.doLayout()
        },
        setToolbar: function (_) {
            if (!_) return;
            if (!mini.isArray(_)) _ = [_];
            for (var $ = 0, A = _.length; $ < A; $++) mini.append(this.toolbarEl, _[$]);
            mini.parse(this.toolbarEl);
            this.doLayout()
        },
        setFooter: function (_) {
            if (!_) return;
            if (!mini.isArray(_)) _ = [_];
            for (var $ = 0, A = _.length; $ < A; $++) mini.append(this.footerEl, _[$]);
            mini.parse(this.footerEl);
            this.doLayout()
        },
        getToolbarEl: function () {
            return this.toolbarEl
        },
        getBodyEl: function () {
            return this.bodyEl
        },
        getFooterEl: function () {
            return this.footerEl
        },
        getIFrameEl: function ($) {
            return this.iframeEl
        },
        _getMaskWrapEl: function () {
            return this.bodyEl
        },
        _doRemoveIFrame: function () {
            if (this.iframeEl && this.iframeEl.parentNode) {
                this.iframeEl._ondestroy();
                this.iframeEl.parentNode.removeChild(this.iframeEl);
                try {
                    this.iframeEl.removeNode(true)
                } catch ($) {}
            }
            this.iframeEl = null;
            try {
                CollectGarbage()
            } catch ($) {}
            mini.removeChilds(this.bodyEl)
        },
        deferLoadingTime: 80,
        _doLoad: function () {
            this._doRemoveIFrame();
            var A = new Date(),
                $ = this;
            this.loadedUrl = this.url;
            if (this.maskOnLoad) this.loading();
            var _ = mini.createIFrame(this.url, function (_, C) {
                    var B = (A - new Date()) + $.deferLoadingTime;
                    if (B < 0) B = 0;
                    setTimeout(function () {
                        $.unmask()
                    }, B);
                    try {
                        $.iframeEl.contentWindow.CloseOwnerWindow = function (_) {
                            setTimeout(function () {
                                $.__HideAction = _;
                                $.destroy()
                            }, 1)
                        }
                    } catch (D) {}
                    if ($.__onLoad) $.__onLoad();
                    var D = {
                        iframe: $.iframeEl
                    };
                    $.fire("load", D)
                }, function () {
                    try {
                        if ($.__onDestroy) $.__onDestroy($.__HideAction)
                    } catch (_) {}
                    var _ = {
                        iframe: $.iframeEl
                    };
                    $.fire("unload", _)
                });
            this.bodyEl.appendChild(_);
            this.iframeEl = _
        },
        load: function (_, $, A) {
            this.setUrl(_, $, A)
        },
        reload: function () {
            this.setUrl(this.url)
        },
        setUrl: function ($, _, A) {
            this.url = $;
            this.__onLoad = _;
            this.__onDestroy = A;
            if (this.expanded) this._doLoad()
        },
        setRefreshOnExpand: function ($) {
            this.refreshOnExpand = $
        },
        setMaskOnLoad: function ($) {
            this.maskOnLoad = $
        },
        expanded: true,
        setExpanded: function ($) {
            if (this.expanded != $) {
                this.expanded = $;
                if (this.expanded) this.expand();
                else this.collapse()
            }
        },
        toggle: function () {
            if (this.expanded) this.collapse();
            else this.expand()
        },
        collapse: function () {
            this.expanded = false;
            this._height = this.el.style.height;
            this.el.style.height = "auto";
            this.viewportEl.style.display = "none";
            mini.addClass(this.el, "mini-panel-collapse");
            this.doLayout()
        },
        expand: function () {
            this.expanded = true;
            this.el.style.height = this._height;
            this.viewportEl.style.display = "block";
            delete this._height;
            mini.removeClass(this.el, "mini-panel-collapse");
            if (this.url && this.url != this.loadedUrl) this._doLoad();
            this.doLayout()
        },
        getAttrs: function (_) {
            var D = mini.Panel.superclass.getAttrs.call(this, _);
            mini._ParseString(_, D, ["title", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle", "footerCls", "footerStyle", "toolbarCls", "toolbarStyle", "footer", "toolbar", "url", "closeAction"]);
            mini._ParseBool(_, D, ["allowResize", "showCloseButton", "showHeader", "showToolbar", "showFooter", "showCollapseButton", "refreshOnExpand", "maskOnLoad", "expanded"]);
            var C = mini.getChildNodes(_, true);
            for (var $ = C.length - 1; $ >= 0; $--) {
                var B = C[$],
                    A = jQuery(B).attr("property");
                if (!A) continue;
                A = A.toLowerCase();
                if (A == "toolbar") D.toolbar = B;
                else if (A == "footer") D.footer = B
            }
            D.body = C;
            return D
        }
    });
mini.regClass(mini.Panel, "panel");
mini.Dialog = function () {
        this._initButtons();
        mini.Dialog.superclass.constructor.call(this);
        this.setVisible(false)
    };
mini.extend(mini.Dialog, mini.Control, {
        allowDrag: true,
        title: "",
        iconCls: "",
        showHeader: true,
        showCloseButton: true,
        showMaxButton: true,
        showMinButton: true,
        closeAction: "display",
        x: 0,
        y: 0,
        width: 250,
        height: 150,
        state: "restore",
        uiCls: "mini-dialog",
        _create: function () {
            this.el = document.createElement("div");
            this.el.className = "mini-dialog";
            var $ = "<table class=\"mini-dialog-table\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">" + "<tr class=\"mini-dialog-top\"><td class=\"mini-dialog-tl\"></td><td class=\"mini-dialog-tc\"></td><td class=\"mini-dialog-tr\"></td></tr>" + "<tr class=\"mini-dialog-middle\"><td class=\"mini-dialog-ml\"></td><td class=\"mini-dialog-mc\"></td><td class=\"mini-dialog-mr\"></td></tr>" + "<tr class=\"mini-dialog-bottom\"><td class=\"mini-dialog-bl\"></td><td class=\"mini-dialog-bc\"></td><td class=\"mini-dialog-br\"></td></tr>" + "</table>";
            this.el.innerHTML = $;
            this.tableEl = this.el.firstChild;
            this.mcEl = this.tableEl.rows[1].cells[1];
            this.mcEl.innerHTML = "<div class=\"mini-dialog-header\"><div class=\"mini-dialog-title\"></div><div class=\"mini-dialog-tools\"></div></div><div class=\"mini-dialog-body\"></div>";
            this.headerEl = this.mcEl.firstChild;
            this.bodyEl = this.mcEl.lastChild;
            this.titleEl = this.headerEl.firstChild;
            this.toolsEl = this.headerEl.lastChild
        },
        _initEvents: function () {
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            mini.on(this.el, "click", this.__OnClick, this)
        },
        doUpdate: function () {
            this.titleEl.innerHTML = this.title;
            this.headerEl.style.display = this.showHeader ? "" : "none";
            var B = "";
            for (var $ = this.buttons.length - 1; $ >= 0; $--) {
                var A = this.buttons[$],
                    _ = A.visible;
                if (this.state == "max") {
                        if (A.name == "max") _ = false;
                        if (A.name == "restore") _ = true
                    }
                B += "<span id=\"" + $ + "\" class=\"" + A.cls + " " + (A.enabled ? "" : "mini-disabled") + "\" style=\"" + A.style + ";" + (_ ? "" : "display:none;") + "\"></span>"
            }
            this.toolsEl.innerHTML = B;
            this.doLayout()
        },
        doLayout: function () {
            if (this.isDisplay()) {
                if (this.state == "max") this._doShow();
                var _ = this.getHeight(true),
                    $ = this.getHeaderHeight();
                this.bodyEl.style.height = (_ - 16 - $ - 3) + "px"
            }
        },
        getHeaderHeight: function () {
            return this.showHeader ? mini.getHeight(this.headerEl) : 0
        },
        _doShow: function (B, A) {
            var _ = this.getParentBox();
            if (this.state == "max") {
                this.el.style.left = "0px";
                this.el.style.top = "0px";
                mini.setSize(this.el, _.width, _.height)
            } else {
                if (!B) B = "center";
                if (!A) A = "middle";
                this.el.style.position = "absolute";
                this.el.style.left = "-2000px";
                this.el.style.top = "-2000px";
                this.el.style.display = "";
                mini.setSize(this.el, this.width, this.height);
                var $ = mini.getBox(this.el);
                if (B == "left") B = 0;
                if (B == "center") B = _.width / 2 - $.width / 2;
                if (B == "right") B = _.width - $.width;
                if (A == "top") A = 0;
                if (A == "middle") A = _.y + _.height / 2 - $.height / 2;
                if (A == "bottom") A = _.height - $.height;
                if (B + $.width > _.right) B = _.right - $.width;
                if (A + $.height > _.bottom) A = _.bottom - $.height;
                this.el.style.display = "";
                mini.setX(this.el, B);
                mini.setY(this.el, A);
                this.x = B;
                this.y = A
            }
        },
        max: function () {
            this.state = "max";
            this.show()
        },
        restore: function () {
            this.state = "restore";
            this.show(this.x, this.y)
        },
        show: function (_, $) {
            this.setVisible(true);
            this._doShow(_, $);
            this.doUpdate()
        },
        hide: function () {
            this.setVisible(false)
        },
        setTitle: function ($) {
            this.title = $;
            this.doUpdate()
        },
        setIconCls: function ($) {
            this.iconCls = $;
            this.doUpdate()
        },
        _initButtons: function () {
            this.buttons = [];
            var _ = this.createButton({
                name: "close",
                cls: "mini-tools-close",
                visible: this.showCloseButton
            });
            this.buttons.push(_);
            var B = this.createButton({
                name: "max",
                cls: "mini-dialog-max",
                visible: this.showMaxButton
            });
            this.buttons.push(B);
            var A = this.createButton({
                name: "restore",
                cls: "mini-dialog-restore",
                visible: false
            });
            this.buttons.push(A);
            var $ = this.createButton({
                name: "min",
                cls: "mini-dialog-min",
                visible: this.showMaxButton
            });
            this.buttons.push($)
        },
        createButton: function (_) {
            var $ = mini.copyTo({
                name: "",
                cls: "",
                style: "",
                visible: true,
                enabled: true,
                html: ""
            }, _);
            return $
        },
        addButton: function (_, $) {
            if (typeof _ == "string") _ = {
                iconCls: _
            };
            _ = this.createButton(_);
            if (typeof $ != "number") $ = this.buttons.length;
            this.buttons.insert($, _);
            this.doUpdate()
        },
        updateButton: function ($, A) {
            var _ = this.getButton($);
            if (!_) return;
            mini.copyTo(_, A);
            this.doUpdate()
        },
        removeButton: function ($) {
            var _ = this.getButton($);
            if (!_) return;
            this.buttons.remove(_);
            this.doUpdate()
        },
        getButton: function ($) {
            if (typeof $ == "number") return this.buttons[$];
            else for (var _ = 0, A = this.buttons.length; _ < A; _++) {
                var B = this.buttons[_];
                if (B.name == $) return B
            }
        },
        getParentBox: function () {
            var $ = mini.getViewportBox();
            if (this.el.parentNode != document.body) $ = mini.getBox(this.el.parentNode);
            return $
        },
        __OnMouseDown: function (B) {
            if (this.allowDrag && mini.isAncestor(this.headerEl, B.target) && !mini.findParent(B.target, "mini-dialog-tools")) {
                var _ = this,
                    A = this.getBox(),
                    $ = new mini.Drag({
                        capture: false,
                        onStart: function () {
                            _.maskProxy = mini.append(document.body, "<div class=\"mini-resizer-mask\"></div>")
                        },
                        onMove: function (B) {
                            var F = B.now[0] - B.init[0],
                                E = B.now[1] - B.init[1];
                            F = A.x + F;
                            E = A.y + E;
                            var D = _.getParentBox(),
                                $ = F + A.width,
                                C = E + A.height;
                            if ($ > D.width) F = D.width - A.widht;
                            if (C > D.bottom) E = D.bottom - A.height;
                            if (F < 0) F = 0;
                            if (E < 0) E = 0;
                            mini.setXY(_.el, F, E)
                        },
                        onStop: function () {
                            jQuery(_.maskProxy).remove();
                            _.maskProxy = null
                        }
                    });
                $.start(B)
            }
        },
        __OnClick: function (A) {
            var $ = mini.findParent(A.target, "mini-dialog-tools");
            if ($) {
                var _ = this.getButton(parseInt(A.target.id));
                if (_) this._OnButtonClick(_, A)
            }
            if (mini.findParent(A.target, "mini-dialog-max")) this.max();
            if (mini.findParent(A.target, "mini-dialog-restore")) this.restore();
            if (mini.findParent(A.target, "mini-dialog-close")) this.hide();
            if (mini.findParent(A.target, "mini-dialog-min"));
        },
        _OnButtonClick: function (_, $) {
            var A = {
                button: _,
                index: this.buttons.indexOf(_),
                name: _.name.toLowerCase(),
                htmlEvent: $,
                cancel: false
            };
            this.fire("beforebuttonclick", A);
            if (A.cancel == true) return;
            this.fire("buttonclick", A);
            if (A.name == "close") if (this.closeAction == "destroy") this.destroy();
            else this.hide();
            if (A.name == "max") this.max();
            if (A.name == "restore") this.restore()
        }
    });
mini.regClass(mini.Dialog, "dialog");
mini.Window = function () {
        mini.Window.superclass.constructor.call(this);
        this.addCls("mini-window");
        this.setVisible(false);
        this.setAllowDrag(this.allowDrag);
        this.setAllowResize(this.allowResize)
    };
mini.extend(mini.Window, mini.Panel, {
        x: 0,
        y: 0,
        state: "restore",
        dragCls: "mini-window-drag",
        resizeCls: "mini-window-resize",
        allowDrag: true,
        allowResize: false,
        showCloseButton: true,
        showMaxButton: false,
        showMinButton: false,
        showModal: true,
        minWidth: 150,
        minHeight: 80,
        maxWidth: 2000,
        maxHeight: 2000,
        uiCls: "mini-window",
        _create: function () {
            mini.Window.superclass._create.call(this);
            this.modalEl = mini.append(document.body, "<div class=\"mini-modal\" style=\"display:none\"></div>")
        },
        _initButtons: function () {
            this.buttons = [];
            var _ = this.createButton({
                name: "close",
                cls: "mini-tools-close",
                visible: this.showCloseButton
            });
            this.buttons.push(_);
            var A = this.createButton({
                name: "max",
                cls: "mini-tools-max",
                visible: this.showMaxButton
            });
            this.buttons.push(A);
            var $ = this.createButton({
                name: "min",
                cls: "mini-tools-min",
                visible: this.showMinButton
            });
            this.buttons.push($)
        },
        _initEvents: function () {
            mini.Window.superclass._initEvents.call(this);
            mini._BindEvents(function () {
                mini.on(this.el, "mouseover", this.__OnMouseOver, this);
                mini.on(window, "resize", this.__OnWindowResize, this);
                mini.on(this.el, "mousedown", this.__OnWindowMouseDown, this)
            }, this)
        },
        doLayout: function () {
            if (!this.canLayout()) return;
            if (this.state == "max") {
                var $ = this.getParentBox();
                this.el.style.left = "0px";
                this.el.style.top = "0px";
                mini.setSize(this.el, $.width, $.height)
            }
            mini.Window.superclass.doLayout.call(this);
            if (this.allowDrag) mini.addClass(this.el, this.dragCls);
            if (this.state == "max") {
                this.resizeGridEl.style.display = "none";
                mini.removeClass(this.el, this.dragCls)
            }
            this._doModal()
        },
        _doModal: function () {
            var _ = this.showModal && this.isDisplay();
            this.modalEl.style.display = _ ? "block" : "none";
            if (_) {
                var $ = mini.getViewportBox();
                this.modalEl.style.height = $.height + "px";
                this.modalEl.style.width = $.width + "px";
                this.modalEl.style.zIndex = mini.getStyle(this.el, "zIndex") - 1
            }
        },
        getParentBox: function () {
            var $ = mini.getViewportBox(),
                _ = this.containerEl || document.body;
            if (_ != document.body) $ = mini.getBox(_);
            return $
        },
        setShowModal: function ($) {
            this.showModal = $
        },
        setMinWidth: function ($) {
            if (isNaN($)) return;
            this.minWidth = $
        },
        setMinHeight: function ($) {
            if (isNaN($)) return;
            this.minHeight = $
        },
        setMaxWidth: function ($) {
            if (isNaN($)) return;
            this.maxWidth = $
        },
        setMaxHeight: function ($) {
            if (isNaN($)) return;
            this.maxHeight = $
        },
        setAllowDrag: function ($) {
            this.allowDrag = $;
            mini.removeClass(this.el, this.dragCls);
            if ($) mini.addClass(this.el, this.dragCls)
        },
        setAllowResize: function ($) {
            if (this.allowResize != $) {
                this.allowResize = $;
                this.doLayout()
            }
        },
        setShowMaxButton: function ($) {
            this.showMaxButton = $;
            var _ = this.getButton("max");
            _.visible = $;
            if (_) this.doUpdate()
        },
        setShowMinButton: function ($) {
            this.showMinButton = $;
            var _ = this.getButton("min");
            _.visible = $;
            if (_) this.doUpdate()
        },
        max: function () {
            this.state = "max";
            this.show();
            var $ = this.getButton("max");
            if ($) {
                $.cls = "mini-tools-restore";
                this.doUpdate()
            }
        },
        restore: function () {
            this.state = "restore";
            this.show(this.x, this.y);
            var $ = this.getButton("max");
            if ($) {
                $.cls = "mini-tools-max";
                this.doUpdate()
            }
        },
        containerEl: null,
        show: function (B, _) {
            this.allowLayout = false;
            var A = this.containerEl || document.body;
            if (!this.isRender() || this.el.parentNode != A) this.render(A);
            this.el.style.zIndex = mini.getMaxZIndex();
            this._doShow(B, _);
            this.allowLayout = true;
            this.setVisible(true);
            if (this.state != "max") {
                var $ = mini.getBox(this.el);
                this.x = $.x;
                this.y = $.y
            }
            mini.repaint(this.el)
        },
        hide: function () {
            this.setVisible(false);
            this._doModal()
        },
        _measureSize: function () {
            this.el.style.display = "";
            var $ = mini.getBox(this.el);
            if ($.width > this.maxWidth) {
                mini.setWidth(this.el, this.maxWidth);
                $ = mini.getBox(this.el)
            }
            if ($.height > this.maxHeight) {
                mini.setHeight(this.el, this.maxHeight);
                $ = mini.getBox(this.el)
            }
            if ($.width < this.minWidth) {
                mini.setWidth(this.el, this.minWidth);
                $ = mini.getBox(this.el)
            }
            if ($.height < this.minHeight) {
                mini.setHeight(this.el, this.minHeight);
                $ = mini.getBox(this.el)
            }
        },
        _doShow: function (B, A) {
            var _ = this.getParentBox();
            if (this.state == "max") {
                if (!this._width) {
                    var $ = mini.getBox(this.el);
                    this._width = $.width;
                    this._height = $.height;
                    this.x = $.x;
                    this.y = $.y
                }
            } else {
                if (mini.isNull(B)) B = "center";
                if (mini.isNull(A)) A = "middle";
                this.el.style.position = "absolute";
                this.el.style.left = "-2000px";
                this.el.style.top = "-2000px";
                this.el.style.display = "";
                if (this._width) {
                    this.setWidth(this._width);
                    this.setHeight(this._height)
                }
                this._measureSize();
                $ = mini.getBox(this.el);
                if (B == "left") B = 0;
                if (B == "center") B = _.width / 2 - $.width / 2;
                if (B == "right") B = _.width - $.width;
                if (A == "top") A = 0;
                if (A == "middle") A = _.y + _.height / 2 - $.height / 2;
                if (A == "bottom") A = _.height - $.height;
                if (B + $.width > _.right) B = _.right - $.width;
                if (A + $.height > _.bottom) A = _.bottom - $.height;
                this.el.style.display = "";
                mini.setX(this.el, B);
                mini.setY(this.el, A)
            }
            this.doLayout()
        },
        _OnButtonClick: function (_, $) {
            var A = mini.Window.superclass._OnButtonClick.call(this, _, $);
            if (A.cancel == true) return A;
            if (A.name == "max") if (this.state == "max") this.restore();
            else this.max();
            return A
        },
        __OnWindowResize: function ($) {
            if (this.state == "max") this.doLayout()
        },
        __OnWindowMouseDown: function (B) {
            var _ = this;
            if (this.state != "max" && this.allowDrag && mini.isAncestor(this.headerEl, B.target) && !mini.findParent(B.target, "mini-tools")) {
                var _ = this,
                    A = this.getBox(),
                    $ = new mini.Drag({
                        capture: false,
                        onStart: function () {
                            _.maskProxy = mini.append(document.body, "<div class=\"mini-resizer-mask\"></div>");
                            _.dragProxy = mini.append(document.body, "<div class=\"mini-drag-proxy\"></div>")
                        },
                        onMove: function (B) {
                            var F = B.now[0] - B.init[0],
                                E = B.now[1] - B.init[1];
                            F = A.x + F;
                            E = A.y + E;
                            var D = _.getParentBox(),
                                $ = F + A.width,
                                C = E + A.height;
                            if ($ > D.width) F = D.width - A.width;
                            if (C > D.bottom) E = D.bottom - A.height;
                            if (F < 0) F = 0;
                            if (E < 0) E = 0;
                            _.x = F;
                            _.y = E;
                            var G = {
                                    x: F,
                                    y: E,
                                    width: A.width,
                                    height: A.height
                                };
                            mini.setBox(_.dragProxy, G)
                        },
                        onStop: function () {
                            var $ = mini.getBox(_.dragProxy);
                            mini.setBox(_.el, $);
                            jQuery(_.maskProxy).remove();
                            _.maskProxy = null;
                            jQuery(_.dragProxy).remove();
                            _.dragProxy = null
                        }
                    });
                $.start(B)
            }
            if (mini.isAncestor(this.resizeGridEl, B.target) && this.allowResize) {
                $ = this._getResizeDrag();
                $.start(B)
            }
        },
        _getResizeDrag: function () {
            if (!this._resizeDragger) this._resizeDragger = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
            return this._resizeDragger
        },
        _OnDragStart: function ($) {
            this.proxy = mini.append(document.body, "<div class=\"mini-windiw-resizeProxy\"></div>");
            this.proxy.style.cursor = "se-resize";
            this.elBox = mini.getBox(this.el);
            mini.setBox(this.proxy, this.elBox)
        },
        _OnDragMove: function (A) {
            var C = A.now[0] - A.init[0],
                $ = A.now[1] - A.init[1],
                _ = this.elBox.width + C,
                B = this.elBox.height + $;
            if (_ < this.minWidth) _ = this.minWidth;
            if (B < this.minHeight) B = this.minHeight;
            if (_ > this.maxWidth) _ = this.maxWidth;
            if (B > this.maxHeight) B = this.maxHeight;
            mini.setSize(this.proxy, _, B)
        },
        _OnDragStop: function ($) {
            var _ = mini.getBox(this.proxy);
            jQuery(this.proxy).remove();
            this.proxy = null;
            this.elBox = null;
            this.setWidth(_.width);
            this.setHeight(_.height);
            mini.repaint(this.el)
        },
        destroy: function ($) {
            mini.un(window, "resize", this.__OnWindowResize, this);
            if (this.modalEl) {
                jQuery(this.modalEl).remove();
                this.modalEl = null
            }
            if (this.shadowEl) {
                jQuery(this.shadowEl).remove();
                this.shadowEl = null
            }
            mini.Window.superclass.destroy.call(this, $)
        },
        getAttrs: function ($) {
            var _ = mini.Window.superclass.getAttrs.call(this, $);
            mini._ParseString($, _, ["modalStyle"]);
            mini._ParseBool($, _, ["showModal", "showShadow", "allowDrag", "allowResize", "showMaxButton", "showMinButton"]);
            mini._ParseInt($, _, ["minWidth", "minHeight", "maxWidth", "maxHeight"]);
            return _
        }
    });
mini.regClass(mini.Window, "window");
mini.MessageBox = {
        alertTitle: "\u63d0\u9192",
        confirmTitle: "\u786e\u8ba4",
        prompTitle: "\u8f93\u5165",
        prompMessage: "\u8bf7\u8f93\u5165\u5185\u5bb9\uff1a",
        buttonText: {
            ok: "\u786e\u5b9a",
            cancel: "\u53d6\u6d88",
            yes: "\u662f",
            no: "\u5426"
        },
        show: function (F) {
            F = mini.copyTo({
                width: "auto",
                height: "auto",
                minWidth: 150,
                maxWidth: 800,
                minHeight: 100,
                maxHeight: 350,
                title: "",
                titleIcon: "",
                iconCls: "",
                iconStyle: "",
                message: "",
                html: "",
                spaceStyle: "margin-right:15px",
                showCloseButton: true,
                buttons: null,
                buttonWidth: 55,
                callback: null
            }, F);
            var I = F.callback,
                C = new mini.Window();
            C.setBodyStyle("overflow:hidden");
            C.setShowModal(true);
            C.setTitle(F.title || "");
            C.setIconCls(F.titleIcon);
            C.setShowCloseButton(F.showCloseButton);
            var J = C.uid + "$table",
                N = C.uid + "$content",
                L = "<div class=\"" + F.iconCls + "\" style=\"" + F.iconStyle + "\"></div>",
                Q = "<table class=\"mini-messagebox-table\" id=\"" + J + "\" style=\"\" cellspacing=\"0\" cellpadding=\"0\"><tr><td>" + L + "</td><td id=\"" + N + "\" style=\"text-align:center;padding:8px;padding-left:0;\">" + (F.message || "") + "</td></tr></table>",
                _ = "<div class=\"mini-messagebox-content\"></div>" + "<div class=\"mini-messagebox-buttons\"></div>";
            C.bodyEl.innerHTML = _;
            var M = C.bodyEl.firstChild;
            if (F.html) {
                    if (typeof F.html == "string") M.innerHTML = F.html;
                    else if (mini.isElement(F.html)) M.appendChild(F.html)
                } else M.innerHTML = Q;
            C._Buttons = [];
            var P = C.bodyEl.lastChild;
            if (F.buttons && F.buttons.length > 0) {
                    for (var H = 0, D = F.buttons.length; H < D; H++) {
                        var E = F.buttons[H],
                            K = mini.MessageBox.buttonText[E],
                            $ = new mini.Button();
                        $.setText(K);
                        $.setWidth(F.buttonWidth);
                        $.render(P);
                        $.action = E;
                        $.on("click", function (_) {
                                var $ = _.sender;
                                if (I) I($.action);
                                mini.MessageBox.hide(C)
                            });
                        if (H != D - 1) $.setStyle(F.spaceStyle);
                        C._Buttons.push($)
                    }
                } else P.style.display = "none";
            C.setMinWidth(F.minWidth);
            C.setMinHeight(F.minHeight);
            C.setMaxWidth(F.maxWidth);
            C.setMaxHeight(F.maxHeight);
            C.setWidth(F.width);
            C.setHeight(F.height);
            C.show();
            var A = C.getWidth();
            C.setWidth(A);
            var B = document.getElementById(J);
            if (B) B.style.width = "100%";
            var G = document.getElementById(N);
            if (G) G.style.width = "100%";
            var O = C._Buttons[0];
            if (O) O.focus();
            else C.focus();
            C.on("beforebuttonclick", function ($) {
                    if (I) I("close");
                    $.cancel = true;
                    mini.MessageBox.hide(C)
                });
            mini.on(C.el, "keydown", function ($) {
                    if ($.keyCode == 27) {
                        if (I) I("close");
                        $.cancel = true;
                        mini.MessageBox.hide(C)
                    }
                });
            return C.uid
        },
        hide: function (C) {
            if (!C) return;
            var _ = typeof C == "object" ? C : mini.getbyUID(C);
            if (!_) return;
            for (var $ = 0, A = _._Buttons.length; $ < A; $++) {
                var B = _._Buttons[$];
                B.destroy()
            }
            _._Buttons = null;
            _.destroy()
        },
        alert: function (A, _, $) {
            return mini.MessageBox.show({
                minWidth: 250,
                title: _ || mini.MessageBox.alertTitle,
                buttons: ["ok"],
                message: A,
                iconCls: "mini-messagebox-warning",
                callback: $
            })
        },
        confirm: function (A, _, $) {
            return mini.MessageBox.show({
                minWidth: 250,
                title: _ || mini.MessageBox.confirmTitle,
                buttons: ["ok", "cancel"],
                message: A,
                iconCls: "mini-messagebox-question",
                callback: $
            })
        },
        prompt: function (C, B, A, _) {
            var F = "prompt$" + new Date().getTime(),
                E = C || mini.MessageBox.promptMessage;
            if (_) E = E + "<br/><textarea id=\"" + F + "\" style=\"width:200px;height:60px;margin-top:3px;\"></textarea>";
            else E = E + "<br/><input id=\"" + F + "\" type=\"text\" style=\"width:200px;margin-top:3px;\"/>";
            var D = mini.MessageBox.show({
                    title: B || mini.MessageBox.promptTitle,
                    buttons: ["ok", "cancel"],
                    width: 250,
                    html: "<div style=\"padding:5px;padding-left:10px;\">" + E + "</div>",
                    callback: function (_) {
                        var $ = document.getElementById(F);
                        if (A) A(_, $.value)
                    }
                }),
                $ = document.getElementById(F);
            $.focus();
            return D
        },
        loading: function (_, $) {
            return mini.MessageBox.show({
                minHeight: 50,
                title: $,
                showCloseButton: false,
                message: _,
                iconCls: "mini-messagebox-waiting"
            })
        }
    };
mini.alert = mini.MessageBox.alert;
mini.confirm = mini.MessageBox.confirm;
mini.prompt = mini.MessageBox.prompt;
mini.loading = mini.MessageBox.loading;
mini.showMessageBox = mini.MessageBox.show;
mini.hideMessageBox = mini.MessageBox.hide;
mini.Splitter = function () {
        this._initPanes();
        mini.Splitter.superclass.constructor.call(this)
    };
mini.extend(mini.Splitter, mini.Control, {
        width: 300,
        height: 180,
        vertical: false,
        allowResize: true,
        pane1: null,
        pane2: null,
        showHandleButton: true,
        handlerStyle: "",
        handlerCls: "",
        handlerSize: 6,
        uiCls: "mini-splitter",
        _create: function () {
            this.el = document.createElement("div");
            this.el.className = "mini-splitter";
            this.el.innerHTML = "<div class=\"mini-splitter-border\"><div id=\"1\" class=\"mini-splitter-pane mini-splitter-pane1\"></div><div id=\"2\" class=\"mini-splitter-pane mini-splitter-pane2\"></div><div class=\"mini-splitter-handler\"></div></div>";
            this.borderEl = this.el.firstChild;
            this.pane1El = this.borderEl.firstChild;
            this.pane2El = this.borderEl.childNodes[1];
            this.handlerEl = this.borderEl.lastChild
        },
        _initEvents: function () {
            mini._BindEvents(function () {
                mini.on(this.el, "click", this.__OnClick, this);
                mini.on(this.el, "mousedown", this.__OnMouseDown, this)
            }, this)
        },
        _initPanes: function () {
            this.pane1 = {
                index: 1,
                minSize: 80,
                maxSize: 3000,
                size: "",
                showCollapseButton: false,
                cls: "",
                style: "",
                visible: true,
                expanded: true
            };
            this.pane2 = mini.copyTo({}, this.pane1);
            this.pane2.index = 2
        },
        doUpdate: function () {
            this.doLayout()
        },
        doLayout: function () {
            if (!this.canLayout()) return;
            this.handlerEl.style.cursor = this.allowResize ? "" : "default";
            mini.removeClass(this.el, "mini-splitter-vertical");
            if (this.vertical) mini.addClass(this.el, "mini-splitter-vertical");
            mini.removeClass(this.handlerEl, "mini-splitter-handler-vertical");
            if (this.vertical) mini.addClass(this.handlerEl, "mini-splitter-handler-vertical");
            mini.setStyle(this.pane1El, this.pane1.style);
            mini.setStyle(this.pane2El, this.pane2.style);
            var B = this.getHeight(true),
                _ = this.getWidth(true);
            if (!jQuery.boxModel) {
                    var Q = mini.getBorders(this.borderEl);
                    B = B + Q.top + Q.bottom;
                    _ = _ + Q.left + Q.right
                }
            this.borderEl.style.width = _ + "px";
            this.borderEl.style.height = B + "px";
            var $ = this.pane1El,
                C = this.pane2El,
                G = jQuery($),
                I = jQuery(C);
            $.style.display = C.style.display = this.handlerEl.style.display = "";
            var D = this.handlerSize;
            this.pane1.size = String(this.pane1.size);
            this.pane2.size = String(this.pane2.size);
            var F = parseFloat(this.pane1.size),
                H = parseFloat(this.pane2.size),
                O = isNaN(F),
                T = isNaN(H),
                N = !isNaN(F) && this.pane1.size.indexOf("%") != -1,
                R = !isNaN(H) && this.pane2.size.indexOf("%") != -1,
                J = !O && !N,
                M = !T && !R,
                P = this.vertical ? B - this.handlerSize : _ - this.handlerSize,
                K = p2Size = 0;
            if (O || T) {
                    if (O && T) {
                        K = parseInt(P / 2);
                        p2Size = P - K
                    } else if (J) {
                        K = F;
                        p2Size = P - K
                    } else if (N) {
                        K = parseInt(P * F / 100);
                        p2Size = P - K
                    } else if (M) {
                        p2Size = H;
                        K = P - p2Size
                    } else if (R) {
                        p2Size = parseInt(P * H / 100);
                        K = P - p2Size
                    }
                } else if (N && M) {
                    p2Size = H;
                    K = P - p2Size
                } else if (J && R) {
                    K = F;
                    p2Size = P - K
                } else {
                    var L = F + H;
                    K = parseInt(P * F / L);
                    p2Size = P - K
                }
            if (K > this.pane1.maxSize) {
                    K = this.pane1.maxSize;
                    p2Size = P - K
                }
            if (p2Size > this.pane2.maxSize) {
                    p2Size = this.pane2.maxSize;
                    K = P - p2Size
                }
            if (K < this.pane1.minSize) {
                    K = this.pane1.minSize;
                    p2Size = P - K
                }
            if (p2Size < this.pane2.minSize) {
                    p2Size = this.pane2.minSize;
                    K = P - p2Size
                }
            if (this.pane1.expanded == false) {
                    p2Size = P;
                    K = 0;
                    $.style.display = "none"
                } else if (this.pane2.expanded == false) {
                    K = P;
                    p2Size = 0;
                    C.style.display = "none"
                }
            if (this.pane1.visible == false) {
                    p2Size = P + D;
                    K = D = 0;
                    $.style.display = "none";
                    this.handlerEl.style.display = "none"
                } else if (this.pane2.visible == false) {
                    K = P + D;
                    p2Size = D = 0;
                    C.style.display = "none";
                    this.handlerEl.style.display = "none"
                }
            if (this.vertical) {
                    mini.setWidth($, _);
                    mini.setWidth(C, _);
                    mini.setHeight($, K);
                    mini.setHeight(C, p2Size);
                    C.style.top = (K + D) + "px";
                    this.handlerEl.style.left = "0px";
                    this.handlerEl.style.top = K + "px";
                    mini.setWidth(this.handlerEl, _);
                    mini.setHeight(this.handlerEl, this.handlerSize);
                    $.style.left = "0px";
                    C.style.left = "0px"
                } else {
                    mini.setWidth($, K);
                    mini.setWidth(C, p2Size);
                    mini.setHeight($, B);
                    mini.setHeight(C, B);
                    C.style.left = (K + D) + "px";
                    this.handlerEl.style.top = "0px";
                    this.handlerEl.style.left = K + "px";
                    mini.setWidth(this.handlerEl, this.handlerSize);
                    mini.setHeight(this.handlerEl, B);
                    $.style.top = "0px";
                    C.style.top = "0px"
                }
            var S = "<div class=\"mini-splitter-handler-buttons\">";
            if (!this.pane1.expanded || !this.pane2.expanded) {
                    if (!this.pane1.expanded) {
                        if (this.pane1.showCollapseButton) S += "<a id=\"1\" class=\"mini-splitter-pane2-button\"></a>"
                    } else if (this.pane2.showCollapseButton) S += "<a id=\"2\" class=\"mini-splitter-pane1-button\"></a>"
                } else {
                    if (this.pane1.showCollapseButton) S += "<a id=\"1\" class=\"mini-splitter-pane1-button\"></a>";
                    if (this.allowResize) if ((this.pane1.showCollapseButton && this.pane2.showCollapseButton) || (!this.pane1.showCollapseButton && !this.pane2.showCollapseButton)) S += "<span class=\"mini-splitter-resize-button\"></span>";
                    if (this.pane2.showCollapseButton) S += "<a id=\"2\" class=\"mini-splitter-pane2-button\"></a>"
                }
            S += "</div>";
            this.handlerEl.innerHTML = S;
            var E = this.handlerEl.firstChild;
            E.style.display = this.showHandleButton ? "" : "none";
            var A = mini.getBox(E);
            if (this.vertical) E.style.marginLeft = -A.width / 2 + "px";
            else E.style.marginTop = -A.height / 2 + "px";
            if (!this.pane1.visible || !this.pane2.visible || !this.pane1.expanded || !this.pane2.expanded) mini.addClass(this.handlerEl, "mini-splitter-nodrag");
            else mini.removeClass(this.handlerEl, "mini-splitter-nodrag");
            mini.layout(this.borderEl)
        },
        getPaneBox: function ($) {},
        getPane: function ($) {
            if ($ == 1) return this.pane1;
            else if ($ == 2) return this.pane2;
            return $
        },
        setPanes: function (_) {
            if (!mini.isArray(_)) return;
            for (var $ = 0; $ < 2; $++) {
                var A = _[$];
                this.updatePane($ + 1, A)
            }
        },
        getPaneEl: function ($) {
            if ($ == 1) return this.pane1El;
            return this.pane2El
        },
        updatePane: function (_, F) {
            var $ = this.getPane(_);
            if (!$) return;
            mini.copyTo($, F);
            var B = this.getPaneEl(_),
                C = $.body;
            delete $.body;
            if (C) {
                    if (!mini.isArray(C)) C = [C];
                    for (var A = 0, E = C.length; A < E; A++) mini.append(B, C[A])
                }
            if ($.bodyParent) {
                    var D = $.bodyParent;
                    while (D.firstChild) B.appendChild(D.firstChild)
                }
            delete $.bodyParent;
            this.doUpdate()
        },
        setVertical: function ($) {
            this.vertical = $;
            this.doUpdate()
        },
        expandPane: function (_) {
            var $ = this.getPane(_);
            if (!$) return;
            $.expanded = true;
            this.doUpdate()
        },
        collapsePane: function (_) {
            var $ = this.getPane(_);
            if (!$) return;
            $.expanded = false;
            var A = $ == this.pane1 ? this.pane2 : this.pane1;
            if (A.expanded == false) {
                A.expanded = true;
                A.visible = true
            }
            this.doUpdate()
        },
        togglePane: function (_) {
            var $ = this.getPane(_);
            if (!$) return;
            if ($.expanded) this.collapsePane($);
            else this.expandPane($)
        },
        showPane: function (_) {
            var $ = this.getPane(_);
            if (!$) return;
            $.visible = true;
            this.doUpdate()
        },
        hidePane: function (_) {
            var $ = this.getPane(_);
            if (!$) return;
            $.visible = false;
            var A = $ == this.pane1 ? this.pane2 : this.pane1;
            if (A.visible == false) {
                A.expanded = true;
                A.visible = true
            }
            this.doUpdate()
        },
        setAllowResize: function ($) {
            if (this.allowResize != $) {
                this.allowResize = $;
                this.doLayout()
            }
        },
        setHandlerSize: function ($) {
            if (this.handlerSize != $) {
                this.handlerSize = $;
                this.doLayout()
            }
        },
        __OnClick: function (B) {
            var A = B.target;
            if (!mini.isAncestor(this.handlerEl, A)) return;
            var _ = parseInt(A.id),
                $ = this.getPane(_),
                B = {
                    pane: $,
                    paneIndex: _,
                    cancel: false
                };
            if ($.expanded) this.fire("beforecollapse", B);
            else this.fire("beforeexpand", B);
            if (B.cancel == true) return;
            if (A.className == "mini-splitter-pane1-button") this.togglePane(_);
            else if (A.className == "mini-splitter-pane2-button") this.togglePane(_)
        },
        _OnButtonClick: function ($, _) {
            this.fire("buttonclick", {
                pane: $,
                index: this.pane1 == $ ? 1 : 2,
                htmlEvent: _
            })
        },
        onButtonClick: function (_, $) {
            this.on("buttonclick", _, $)
        },
        __OnMouseDown: function (A) {
            var _ = A.target;
            if (!this.allowResize) return;
            if (!this.pane1.visible || !this.pane2.visible || !this.pane1.expanded || !this.pane2.expanded) return;
            if (mini.isAncestor(this.handlerEl, _)) if (_.className == "mini-splitter-pane1-button" || _.className == "mini-splitter-pane2-button");
            else {
                var $ = this._getDrag();
                $.start(A)
            }
        },
        _getDrag: function () {
            if (!this.drag) this.drag = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
            return this.drag
        },
        _OnDragStart: function ($) {
            this.maskProxy = mini.append(document.body, "<div class=\"mini-resizer-mask\"></div>");
            this.dragProxy = mini.append(document.body, "<div class=\"mini-proxy\"></div>");
            this.dragProxy.style.cursor = this.vertical ? "n-resize" : "w-resize";
            this.handlerBox = mini.getBox(this.handlerEl);
            this.elBox = mini.getBox(this.borderEl, true);
            mini.setBox(this.dragProxy, this.handlerBox)
        },
        _OnDragMove: function (C) {
            if (!this.handlerBox) return;
            if (!this.elBox) this.elBox = mini.getBox(this.borderEl, true);
            var B = this.elBox.width,
                D = this.elBox.height,
                E = this.handlerSize,
                I = this.vertical ? D - this.handlerSize : B - this.handlerSize,
                A = this.pane1.minSize,
                F = this.pane1.maxSize,
                $ = this.pane2.minSize,
                G = this.pane2.maxSize;
            if (this.vertical == true) {
                    var _ = C.now[1] - C.init[1],
                        H = this.handlerBox.y + _;
                    if (H - this.elBox.y > F) H = this.elBox.y + F;
                    if (H + this.handlerBox.height < this.elBox.bottom - G) H = this.elBox.bottom - G - this.handlerBox.height;
                    if (H - this.elBox.y < A) H = this.elBox.y + A;
                    if (H + this.handlerBox.height > this.elBox.bottom - $) H = this.elBox.bottom - $ - this.handlerBox.height;
                    mini.setY(this.dragProxy, H)
                } else {
                    var J = C.now[0] - C.init[0],
                        K = this.handlerBox.x + J;
                    if (K - this.elBox.x > F) K = this.elBox.x + F;
                    if (K + this.handlerBox.width < this.elBox.right - G) K = this.elBox.right - G - this.handlerBox.width;
                    if (K - this.elBox.x < A) K = this.elBox.x + A;
                    if (K + this.handlerBox.width > this.elBox.right - $) K = this.elBox.right - $ - this.handlerBox.width;
                    mini.setX(this.dragProxy, K)
                }
        },
        _OnDragStop: function (_) {
            var $ = this.elBox.width,
                B = this.elBox.height,
                C = this.handlerSize,
                D = parseFloat(this.pane1.size),
                E = parseFloat(this.pane2.size),
                I = isNaN(D),
                N = isNaN(E),
                J = !isNaN(D) && this.pane1.size.indexOf("%") != -1,
                M = !isNaN(E) && this.pane2.size.indexOf("%") != -1,
                G = !I && !J,
                K = !N && !M,
                L = this.vertical ? B - this.handlerSize : $ - this.handlerSize,
                A = mini.getBox(this.dragProxy),
                H = A.x - this.elBox.x,
                F = L - H;
            if (this.vertical) {
                    H = A.y - this.elBox.y;
                    F = L - H
                }
            if (I || N) {
                    if (I && N) {
                        D = parseFloat(H / L * 100).toFixed(1);
                        this.pane1.size = D + "%"
                    } else if (G) {
                        D = H;
                        this.pane1.size = D
                    } else if (J) {
                        D = parseFloat(H / L * 100).toFixed(1);
                        this.pane1.size = D + "%"
                    } else if (K) {
                        E = F;
                        this.pane2.size = E
                    } else if (M) {
                        E = parseFloat(F / L * 100).toFixed(1);
                        this.pane2.size = E + "%"
                    }
                } else if (J && K) this.pane2.size = F;
            else if (G && M) this.pane1.size = H;
            else {
                    this.pane1.size = parseFloat(H / L * 100).toFixed(1);
                    this.pane2.size = 100 - this.pane1.size
                }
            jQuery(this.dragProxy).remove();
            jQuery(this.maskProxy).remove();
            this.maskProxy = null;
            this.dragProxy = null;
            this.elBox = this.handlerBox = null;
            this.doLayout()
        },
        getAttrs: function (B) {
            var G = mini.Splitter.superclass.getAttrs.call(this, B);
            mini._ParseBool(B, G, ["allowResize", "vertical", "showHandleButton"]);
            mini._ParseInt(B, G, ["handlerSize"]);
            var A = [],
                F = mini.getChildNodes(B);
            for (var _ = 0, E = 2; _ < E; _++) {
                    var C = F[_],
                        D = jQuery(C),
                        $ = {};
                    A.push($);
                    if (!C) continue;
                    $.style = C.style.cssText;
                    mini._ParseString(C, $, ["cls", "size"]);
                    mini._ParseBool(C, $, ["visible", "expanded", "showCollapseButton"]);
                    mini._ParseInt(C, $, ["minSize", "maxSize", "handlerSize"]);
                    $.bodyParent = C
                }
            G.panes = A;
            return G
        }
    });
mini.regClass(mini.Splitter, "splitter");
mini.Layout = function () {
        this.regions = [];
        this.regionMap = {};
        mini.Layout.superclass.constructor.call(this)
    };
mini.extend(mini.Layout, mini.Control, {
        regions: [],
        splitSize: 6,
        collapseWidth: 28,
        collapseHeight: 25,
        regionWidth: 150,
        regionHeight: 80,
        regionMinWidth: 50,
        regionMinHeight: 25,
        regionMaxWidth: 2000,
        regionMaxHeight: 2000,
        uiCls: "mini-layout",
        _create: function () {
            this.el = document.createElement("div");
            this.el.className = "mini-layout";
            this.el.innerHTML = "<div class=\"mini-layout-border\"></div>";
            this.borderEl = this.el.firstChild;
            this.doUpdate()
        },
        _initEvents: function () {
            mini._BindEvents(function () {
                mini.on(this.el, "click", this.__OnClick, this);
                mini.on(this.el, "mousedown", this.__OnMouseDown, this);
                mini.on(this.el, "mouseover", this.__OnMouseOver, this);
                mini.on(this.el, "mouseout", this.__OnMouseOut, this);
                mini.on(document, "mousedown", this.__OnDocMouseDown, this)
            }, this)
        },
        getRegionEl: function ($) {
            var $ = this.getRegion($);
            if (!$) return null;
            return $._el
        },
        getRegionHeaderEl: function ($) {
            var $ = this.getRegion($);
            if (!$) return null;
            return $._header
        },
        getRegionBodyEl: function ($) {
            var $ = this.getRegion($);
            if (!$) return null;
            return $._body
        },
        getRegionSplitEl: function ($) {
            var $ = this.getRegion($);
            if (!$) return null;
            return $._split
        },
        getRegionProxyEl: function ($) {
            var $ = this.getRegion($);
            if (!$) return null;
            return $._proxy
        },
        getRegionBox: function (_) {
            var $ = this.getRegionEl(_);
            if ($) return mini.getBox($);
            return null
        },
        getRegion: function ($) {
            if (typeof $ == "string") return this.regionMap[$];
            return $
        },
        _getButton: function (_, B) {
            var D = _.buttons;
            for (var $ = 0, A = D.length; $ < A; $++) {
                var C = D[$];
                if (C.name == B) return C
            }
        },
        _createRegion: function (_) {
            var $ = mini.copyTo({
                region: "",
                title: "",
                iconCls: "",
                iconStyle: "",
                showCloseButton: false,
                showCollapseButton: true,
                buttons: [{
                    name: "close",
                    cls: "mini-tools-close",
                    html: "",
                    visible: false
                },
                {
                    name: "collapse",
                    cls: "mini-tools-collapse",
                    html: "",
                    visible: true
                }],
                showSplit: true,
                showHeader: true,
                splitSize: this.splitSize,
                collapseSize: this.collapseWidth,
                width: this.regionWidth,
                height: this.regionHeight,
                minWidth: this.regionMinWidth,
                minHeight: this.regionMinHeight,
                maxWidth: this.regionMaxWidth,
                maxHeight: this.regionMaxHeight,
                allowResize: true,
                cls: "",
                style: "",
                headerCls: "",
                headerStyle: "",
                bodyCls: "",
                bodyStyle: "",
                visible: true,
                expanded: true
            }, _);
            return $
        },
        _CreateRegionEl: function ($) {
            var $ = this.getRegion($);
            if (!$) return;
            mini.append(this.borderEl, "<div id=\"" + $.region + "\" class=\"mini-layout-region\"><div class=\"mini-layout-region-header\" style=\"" + $.headerStyle + "\"></div><div class=\"mini-layout-region-body\" style=\"" + $.bodyStyle + "\"></div></div>");
            $._el = this.borderEl.lastChild;
            $._header = $._el.firstChild;
            $._body = $._el.lastChild;
            if ($.cls) mini.addClass($._el, $.cls);
            if ($.style) mini.setStyle($._el, $.style);
            mini.addClass($._el, "mini-layout-region-" + $.region);
            if ($.region != "center") {
                mini.append(this.borderEl, "<div uid=\"" + this.uid + "\" id=\"" + $.region + "\" class=\"mini-layout-split\"></div>");
                $._split = this.borderEl.lastChild;
                mini.addClass($._split, "mini-layout-split-" + $.region)
            }
            if ($.region != "center") {
                mini.append(this.borderEl, "<div id=\"" + $.region + "\" class=\"mini-layout-proxy\"></div>");
                $._proxy = this.borderEl.lastChild;
                mini.addClass($._proxy, "mini-layout-proxy-" + $.region)
            }
        },
        setRegions: function (A) {
            if (!mini.isArray(A)) return;
            for (var $ = 0, _ = A.length; $ < _; $++) this.addRegion(A[$])
        },
        addRegion: function (D, $) {
            var G = D;
            D = this._createRegion(D);
            if (!D.region) D.region = "center";
            D.region = D.region.toLowerCase();
            if (D.region == "center" && G && !G.showHeader) D.showHeader = false;
            if (D.region == "north" || D.region == "south") if (!G.collapseSize) D.collapseSize = this.collapseHeight;
            this._measureRegion(D);
            if (typeof $ != "number") $ = this.regions.length;
            var A = this.regionMap[D.region];
            if (A) return;
            this.regions.insert($, D);
            this.regionMap[D.region] = D;
            this._CreateRegionEl(D);
            var B = this.getRegionBodyEl(D),
                C = D.body;
            delete D.body;
            if (C) {
                    if (!mini.isArray(C)) C = [C];
                    for (var _ = 0, F = C.length; _ < F; _++) mini.append(B, C[_])
                }
            if (D.bodyParent) {
                    var E = D.bodyParent;
                    while (E.firstChild) B.appendChild(E.firstChild)
                }
            delete D.bodyParent;
            this.doUpdate()
        },
        removeRegion: function ($) {
            var $ = this.getRegion($);
            if (!$) return;
            this.regions.remove($);
            delete this.regionMap[$.region];
            jQuery($._el).remove();
            jQuery($._split).remove();
            jQuery($._proxy).remove();
            this.doUpdate()
        },
        moveRegion: function (A, $) {
            var A = this.getRegion(A);
            if (!A) return;
            var _ = this.regions[$];
            if (!_ || _ == A) return;
            this.regions.remove(A);
            var $ = this.region.indexOf(_);
            this.regions.insert($, A);
            this.doUpdate()
        },
        _measureRegion: function ($) {
            var _ = this._getButton($, "close");
            _.visible = $.showCloseButton;
            _ = this._getButton($, "collapse");
            _.visible = $.showCollapseButton;
            if ($.width < $.minWidth) $.width = mini.minWidth;
            if ($.width > $.maxWidth) $.width = mini.maxWidth;
            if ($.height < $.minHeight) $.height = mini.minHeight;
            if ($.height > $.maxHeight) $.height = mini.maxHeight
        },
        updateRegion: function ($, _) {
            $ = this.getRegion($);
            if (!$) return;
            if (_) delete _.region;
            mini.copyTo($, _);
            this._measureRegion($);
            this.doUpdate()
        },
        expandRegion: function ($) {
            $ = this.getRegion($);
            if (!$) return;
            $.expanded = true;
            this.doUpdate()
        },
        collapseRegion: function ($) {
            $ = this.getRegion($);
            if (!$) return;
            $.expanded = false;
            this.doUpdate()
        },
        toggleRegion: function ($) {
            $ = this.getRegion($);
            if (!$) return;
            if ($.expanded) this.collapseRegion($);
            else this.expandRegion($)
        },
        showRegion: function ($) {
            $ = this.getRegion($);
            if (!$) return;
            $.visible = true;
            this.doUpdate()
        },
        hideRegion: function ($) {
            $ = this.getRegion($);
            if (!$) return;
            $.visible = false;
            this.doUpdate()
        },
        isExpandRegion: function ($) {
            $ = this.getRegion($);
            if (!$) return null;
            return this.region.expanded
        },
        isVisibleRegion: function ($) {
            $ = this.getRegion($);
            if (!$) return null;
            return this.region.visible
        },
        _tryToggleRegion: function ($) {
            $ = this.getRegion($);
            var _ = {
                region: $,
                cancel: false
            };
            if ($.expanded) {
                this.fire("BeforeCollapse", _);
                if (_.cancel == false) this.collapseRegion($)
            } else {
                this.fire("BeforeExpand", _);
                if (_.cancel == false) this.expandRegion($)
            }
        },
        _getProxyElByEvent: function (_) {
            var $ = mini.findParent(_.target, "mini-layout-proxy");
            return $
        },
        _getRegionElByEvent: function (_) {
            var $ = mini.findParent(_.target, "mini-layout-region");
            return $
        },
        __OnClick: function (D) {
            if (this.inAniming) return;
            var A = this._getProxyElByEvent(D);
            if (A) {
                var _ = A.id,
                    C = mini.findParent(D.target, "mini-tools-collapse");
                if (C) this._tryToggleRegion(_);
                else this._VirtualToggle(_)
            }
            var B = this._getRegionElByEvent(D);
            if (B && mini.findParent(D.target, "mini-layout-region-header")) {
                _ = B.id,
                C = mini.findParent(D.target, "mini-tools-collapse");
                if (C) this._tryToggleRegion(_);
                var $ = mini.findParent(D.target, "mini-tools-close");
                if ($) this.updateRegion(_, {
                    visible: false
                })
            }
        },
        _OnButtonClick: function (_, A, $) {
            this.fire("buttonclick", {
                htmlEvent: $,
                region: _,
                button: A,
                index: this.buttons.indexOf(A),
                name: A.name
            })
        },
        _OnButtonMouseDown: function (_, A, $) {
            this.fire("buttonmousedown", {
                htmlEvent: $,
                region: _,
                button: A,
                index: this.buttons.indexOf(A),
                name: A.name
            })
        },
        hoverProxyEl: null,
        __OnMouseOver: function (_) {
            var $ = this._getProxyElByEvent(_);
            if ($) {
                mini.addClass($, "mini-layout-proxy-hover");
                this.hoverProxyEl = $
            }
        },
        __OnMouseOut: function ($) {
            if (this.hoverProxyEl) mini.removeClass(this.hoverProxyEl, "mini-layout-proxy-hover");
            this.hoverProxyEl = null
        },
        onButtonClick: function (_, $) {
            this.on("buttonclick", _, $)
        },
        onButtonMouseDown: function (_, $) {
            this.on("buttonmousedown", _, $)
        }
    });
mini.copyTo(mini.Layout.prototype, {
        _createHeader: function (_, A) {
            var C = "<div class=\"mini-tools\">";
            if (A) C += "<span class=\"mini-tools-collapse\"></span>";
            else for (var $ = _.buttons.length - 1; $ >= 0; $--) {
                var B = _.buttons[$];
                C += "<span class=\"" + B.cls + "\" style=\"";
                C += B.style + ";" + (B.visible ? "" : "display:none;") + "\">" + B.html + "</span>"
            }
            C += "</div>";
            C += "<div class=\"mini-layout-region-icon " + _.iconCls + "\" style=\"" + _.iconStyle + ";" + ((_.iconStyle || _.iconCls) ? "" : "display:none;") + "\"></div>";
            C += "<div class=\"mini-layout-region-title\">" + _.title + "</div>";
            return C
        },
        doUpdate: function () {
            for (var $ = 0, E = this.regions.length; $ < E; $++) {
                var B = this.regions[$],
                    _ = B.region,
                    A = B._el,
                    D = B._split,
                    C = B._proxy;
                B._header.style.display = B.showHeader ? "" : "none";
                B._header.innerHTML = this._createHeader(B);
                if (B._proxy) B._proxy.innerHTML = this._createHeader(B, true);
                if (D) {
                        mini.removeClass(D, "mini-layout-split-nodrag");
                        if (B.expanded == false || !B.allowResize) mini.addClass(D, "mini-layout-split-nodrag")
                    }
            }
            this.doLayout()
        },
        doLayout: function () {
            if (!this.canLayout()) return;
            if (this.inAniming) return;
            var C = jQuery(this.el).height(),
                _ = jQuery(this.el).width(),
                D = {
                    x: 0,
                    y: 0,
                    width: _,
                    height: C
                },
                I = this.regions.clone(),
                P = this.getRegion("center");
            I.remove(P);
            if (P) I.push(P);
            for (var K = 0, H = I.length; K < H; K++) {
                    var E = I[K];
                    E._Expanded = false;
                    mini.removeClass(E._el, "mini-layout-popup");
                    var A = E.region,
                        L = E._el,
                        F = E._split,
                        G = E._proxy;
                    if (E.visible == false) {
                            L.style.display = "none";
                            if (A != "center") F.style.display = G.style.display = "none";
                            continue
                        }
                    L.style.display = "";
                    if (A != "center") F.style.display = G.style.display = "";
                    var R = D.x,
                        O = D.y,
                        _ = D.width,
                        C = D.height,
                        B = E.width,
                        J = E.height;
                    if (!E.expanded) if (A == "west" || A == "east") B = E.collapseSize;
                    else if (A == "north" || A == "south") J = E.collapseSize;
                    switch (A) {
                        case "north":
                            C = J;
                            D.y += J;
                            D.height -= J;
                            break;
                        case "south":
                            C = J;
                            O = D.y + D.height - J;
                            D.height -= J;
                            break;
                        case "west":
                            _ = B;
                            D.x += B;
                            D.width -= B;
                            break;
                        case "east":
                            _ = B;
                            R = D.x + D.width - B;
                            D.width -= B;
                            break;
                        case "center":
                            break;
                        default:
                            continue
                        }
                    if (_ < 0) _ = 0;
                    if (C < 0) C = 0;
                    if (A == "west" || A == "east") mini.setHeight(L, C);
                    if (A == "north" || A == "south") mini.setWidth(L, _);
                    var N = "left:" + R + "px;top:" + O + "px;",
                        $ = L;
                    if (!E.expanded) {
                            $ = G;
                            L.style.top = "-100px";
                            L.style.left = "-1500px"
                        } else if (G) {
                            G.style.left = "-1500px";
                            G.style.top = "-100px"
                        }
                    $.style.left = R + "px";
                    $.style.top = O + "px";
                    mini.setWidth($, _);
                    mini.setHeight($, C);
                    var M = jQuery(E._el).height(),
                        Q = E.showHeader ? jQuery(E._header).outerHeight() : 0;
                    mini.setHeight(E._body, M - Q);
                    if (A == "center") continue;
                    B = J = E.splitSize;
                    R = D.x,
                    O = D.y,
                    _ = D.width,
                    C = D.height;
                    switch (A) {
                        case "north":
                            C = J;
                            D.y += J;
                            D.height -= J;
                            break;
                        case "south":
                            C = J;
                            O = D.y + D.height - J;
                            D.height -= J;
                            break;
                        case "west":
                            _ = B;
                            D.x += B;
                            D.width -= B;
                            break;
                        case "east":
                            _ = B;
                            R = D.x + D.width - B;
                            D.width -= B;
                            break;
                        case "center":
                            break
                        }
                    if (_ < 0) _ = 0;
                    if (C < 0) C = 0;
                    F.style.left = R + "px";
                    F.style.top = O + "px";
                    mini.setWidth(F, _);
                    mini.setHeight(F, C);
                    F.style.display = E.showSplit ? "block" : "none"
                }
            mini.layout(this.borderEl)
        },
        __OnMouseDown: function (B) {
            if (this.inAniming) return;
            if (mini.findParent(B.target, "mini-layout-split")) {
                var A = jQuery(B.target).attr("uid");
                if (A != this.uid) return;
                var _ = this.getRegion(B.target.id);
                if (_.expanded == false || !_.allowResize) return;
                this.dragRegion = _;
                var $ = this._getDrag();
                $.start(B)
            }
        },
        _getDrag: function () {
            if (!this.drag) this.drag = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
            return this.drag
        },
        _OnDragStart: function ($) {
            this.maskProxy = mini.append(document.body, "<div class=\"mini-resizer-mask\"></div>");
            this.dragProxy = mini.append(document.body, "<div class=\"mini-proxy\"></div>");
            this.dragProxy.style.cursor = "n-resize";
            if (this.dragRegion.region == "west" || this.dragRegion.region == "east") this.dragProxy.style.cursor = "w-resize";
            this.splitBox = mini.getBox(this.dragRegion._split);
            mini.setBox(this.dragProxy, this.splitBox);
            this.elBox = mini.getBox(this.el, true)
        },
        _OnDragMove: function (C) {
            var I = C.now[0] - C.init[0],
                V = this.splitBox.x + I,
                A = C.now[1] - C.init[1],
                U = this.splitBox.y + A,
                K = V + this.splitBox.width,
                T = U + this.splitBox.height,
                G = this.getRegion("west"),
                L = this.getRegion("east"),
                F = this.getRegion("north"),
                D = this.getRegion("south"),
                H = this.getRegion("center"),
                O = G && G.visible ? G.width : 0,
                Q = L && L.visible ? L.width : 0,
                R = F && F.visible ? F.height : 0,
                J = D && D.visible ? D.height : 0,
                P = G && G.showSplit ? mini.getWidth(G._split) : 0,
                $ = L && L.showSplit ? mini.getWidth(L._split) : 0,
                B = F && F.showSplit ? mini.getHeight(F._split) : 0,
                S = D && D.showSplit ? mini.getHeight(D._split) : 0,
                E = this.dragRegion,
                N = E.region;
            if (N == "west") {
                    var M = this.elBox.width - Q - $ - P - H.minWidth;
                    if (V - this.elBox.x > M) V = M + this.elBox.x;
                    if (V - this.elBox.x < E.minWidth) V = E.minWidth + this.elBox.x;
                    if (V - this.elBox.x > E.maxWidth) V = E.maxWidth + this.elBox.x;
                    mini.setX(this.dragProxy, V)
                } else if (N == "east") {
                    M = this.elBox.width - O - P - $ - H.minWidth;
                    if (this.elBox.right - (V + this.splitBox.width) > M) V = this.elBox.right - M - this.splitBox.width;
                    if (this.elBox.right - (V + this.splitBox.width) < E.minWidth) V = this.elBox.right - E.minWidth - this.splitBox.width;
                    if (this.elBox.right - (V + this.splitBox.width) > E.maxWidth) V = this.elBox.right - E.maxWidth - this.splitBox.width;
                    mini.setX(this.dragProxy, V)
                } else if (N == "north") {
                    var _ = this.elBox.height - J - S - B - H.minHeight;
                    if (U - this.elBox.y > _) U = _ + this.elBox.y;
                    if (U - this.elBox.y < E.minHeight) U = E.minHeight + this.elBox.y;
                    if (U - this.elBox.y > E.maxHeight) U = E.maxHeight + this.elBox.y;
                    mini.setY(this.dragProxy, U)
                } else if (N == "south") {
                    _ = this.elBox.height - R - B - S - H.minHeight;
                    if (this.elBox.bottom - (U + this.splitBox.height) > _) U = this.elBox.bottom - _ - this.splitBox.height;
                    if (this.elBox.bottom - (U + this.splitBox.height) < E.minHeight) U = this.elBox.bottom - E.minHeight - this.splitBox.height;
                    if (this.elBox.bottom - (U + this.splitBox.height) > E.maxHeight) U = this.elBox.bottom - E.maxHeight - this.splitBox.height;
                    mini.setY(this.dragProxy, U)
                }
        },
        _OnDragStop: function (B) {
            var C = mini.getBox(this.dragProxy),
                D = this.dragRegion,
                A = D.region;
            if (A == "west") {
                    var $ = C.x - this.elBox.x;
                    this.updateRegion(D, {
                        width: $
                    })
                } else if (A == "east") {
                    $ = this.elBox.right - C.right;
                    this.updateRegion(D, {
                        width: $
                    })
                } else if (A == "north") {
                    var _ = C.y - this.elBox.y;
                    this.updateRegion(D, {
                        height: _
                    })
                } else if (A == "south") {
                    _ = this.elBox.bottom - C.bottom;
                    this.updateRegion(D, {
                        height: _
                    })
                }
            jQuery(this.dragProxy).remove();
            this.dragProxy = null;
            this.elBox = this.handlerBox = null;
            jQuery(this.maskProxy).remove();
            this.maskProxy = null
        },
        _VirtualToggle: function ($) {
            $ = this.getRegion($);
            if ($._Expanded === true) this._VirtualCollapse($);
            else this._VirtualExpand($)
        },
        _VirtualExpand: function (D) {
            if (this.inAniming) return;
            this.doLayout();
            var A = D.region,
                H = D._el;
            D._Expanded = true;
            mini.addClass(H, "mini-layout-popup");
            var E = mini.getBox(D._proxy),
                B = mini.getBox(D._el),
                F = {};
            if (A == "east") {
                    var K = E.x,
                        J = E.y,
                        C = E.height;
                    mini.setHeight(H, C);
                    mini.setXY(H, K, J);
                    var I = parseInt(H.style.left);
                    F = {
                            left: I - B.width
                        }
                } else if (A == "west") {
                    K = E.right - B.width,
                    J = E.y,
                    C = E.height;
                    mini.setHeight(H, C);
                    mini.setXY(H, K, J);
                    I = parseInt(H.style.left);
                    F = {
                        left: I + B.width
                    }
                } else if (A == "north") {
                    var K = E.x,
                        J = E.bottom - B.height,
                        _ = E.width;
                    mini.setWidth(H, _);
                    mini.setXY(H, K, J);
                    var $ = parseInt(H.style.top);
                    F = {
                            top: $ + B.height
                        }
                } else if (A == "south") {
                    K = E.x,
                    J = E.y,
                    _ = E.width;
                    mini.setWidth(H, _);
                    mini.setXY(H, K, J);
                    $ = parseInt(H.style.top);
                    F = {
                        top: $ - B.height
                    }
                }
            mini.addClass(D._proxy, "mini-layout-maxZIndex");
            this.inAniming = true;
            var G = this,
                L = jQuery(H);
            L.animate(F, 250, function () {
                    mini.removeClass(D._proxy, "mini-layout-maxZIndex");
                    G.inAniming = false
                })
        },
        _VirtualCollapse: function (F) {
            if (this.inAniming) return;
            F._Expanded = false;
            var B = F.region,
                E = F._el,
                D = mini.getBox(E),
                _ = {};
            if (B == "east") {
                    var C = parseInt(E.style.left);
                    _ = {
                        left: C + D.width
                    }
                } else if (B == "west") {
                    C = parseInt(E.style.left);
                    _ = {
                        left: C - D.width
                    }
                } else if (B == "north") {
                    var $ = parseInt(E.style.top);
                    _ = {
                        top: $ - D.height
                    }
                } else if (B == "south") {
                    $ = parseInt(E.style.top);
                    _ = {
                        top: $ + D.height
                    }
                }
            mini.addClass(F._proxy, "mini-layout-maxZIndex");
            this.inAniming = true;
            var A = this,
                G = jQuery(E);
            G.animate(_, 250, function () {
                    mini.removeClass(F._proxy, "mini-layout-maxZIndex");
                    A.inAniming = false;
                    A.doLayout()
                })
        },
        __OnDocMouseDown: function (B) {
            if (this.inAniming) return;
            for (var $ = 0, A = this.regions.length; $ < A; $++) {
                var _ = this.regions[$];
                if (!_._Expanded) continue;
                if (mini.isAncestor(_._el, B.target) || mini.isAncestor(_._proxy, B.target));
                else this._VirtualCollapse(_)
            }
        },
        getAttrs: function (A) {
            var H = mini.Layout.superclass.getAttrs.call(this, A),
                G = jQuery(A),
                E = parseInt(G.attr("splitSize"));
            if (!isNaN(E)) H.splitSize = E;
            var F = [],
                D = mini.getChildNodes(A);
            for (var _ = 0, C = D.length; _ < C; _++) {
                    var B = D[_],
                        $ = {};
                    F.push($);
                    $.cls = B.className;
                    $.style = B.style.cssText;
                    mini._ParseString(B, $, ["region", "title", "iconCls", "iconStyle", "cls", "headerCls", "headerStyle", "bodyCls", "bodyStyle"]);
                    mini._ParseBool(B, $, ["allowResize", "visible", "showCloseButton", "showCollapseButton", "showSplit", "showHeader"]);
                    mini._ParseInt(B, $, ["splitSize", "collapseSize", "width", "height", "minWidth", "minHeight", "maxWidth", "maxHeight"]);
                    $.bodyParent = B
                }
            H.regions = F;
            return H
        }
    });
mini.regClass(mini.Layout, "layout");
mini.Box = function () {
        mini.Box.superclass.constructor.call(this)
    };
mini.extend(mini.Box, mini.Control, {
        style: "",
        borderStyle: "",
        bodyStyle: "",
        uiCls: "mini-box",
        _create: function () {
            this.el = document.createElement("div");
            this.el.className = "mini-box";
            this.el.innerHTML = "<div class=\"mini-box-border\"></div>";
            this.bodyEl = this.borderEl = this.el.firstChild
        },
        _initEvents: function () {},
        doLayout: function () {
            if (!this.canLayout()) return;
            var C = this.isAutoHeight(),
                E = this.isAutoWidth(),
                B = mini.getPaddings(this.bodyEl),
                D = mini.getMargins(this.bodyEl);
            if (!C) {
                    var A = this.getHeight(true);
                    if (jQuery.boxModel) A = A - B.top - B.bottom;
                    A = A - D.top - D.bottom;
                    if (A < 0) A = 0;
                    this.bodyEl.style.height = A + "px"
                } else this.bodyEl.style.height = "";
            var $ = this.getWidth(true),
                _ = $;
            $ = $ - D.left - D.right;
            if (jQuery.boxModel) $ = $ - B.left - B.right;
            if ($ < 0) $ = 0;
            this.bodyEl.style.width = $ + "px";
            mini.layout(this.borderEl)
        },
        setBody: function (_) {
            if (!_) return;
            if (!mini.isArray(_)) _ = [_];
            for (var $ = 0, A = _.length; $ < A; $++) mini.append(this.bodyEl, _[$]);
            mini.parse(this.bodyEl);
            this.doLayout()
        },
        set_bodyParent: function ($) {
            if (!$) return;
            var _ = this.bodyEl,
                A = $;
            while (A.firstChild) _.appendChild(A.firstChild);
            this.doLayout()
        },
        setBodyStyle: function ($) {
            mini.setStyle(this.bodyEl, $);
            this.doLayout()
        },
        getAttrs: function ($) {
            var _ = mini.Box.superclass.getAttrs.call(this, $);
            _._bodyParent = $;
            mini._ParseString($, _, ["bodyStyle"]);
            return _
        }
    });
mini.regClass(mini.Box, "box");
mini.Include = function () {
        mini.Include.superclass.constructor.call(this)
    };
mini.extend(mini.Include, mini.Control, {
        url: "",
        async: false,
        uiCls: "mini-include",
        _create: function () {
            this.el = document.createElement("div");
            this.el.className = "mini-include"
        },
        _initEvents: function () {},
        doLayout: function () {
            if (!this.canLayout()) return;
            var A = this.el.childNodes;
            if (A) for (var $ = 0, B = A.length; $ < B; $++) {
                var _ = A[$];
                mini.layout(_)
            }
        },
        setUrl: function ($) {
            this.url = $;
            mini.update({
                url: this.url,
                el: this.el,
                async: this.async
            });
            this.doLayout()
        },
        setAsync: function ($) {
            this.async = false
        },
        getAttrs: function ($) {
            var _ = mini.Include.superclass.getAttrs.call(this, $);
            mini._ParseString($, _, ["url"]);
            return _
        }
    });
mini.regClass(mini.Include, "include");
mini.Tabs = function () {
        this._initTabs();
        mini.Tabs.superclass.constructor.call(this)
    };
mini.extend(mini.Tabs, mini.Control, {
        activeIndex: -1,
        tabAlign: "left",
        tabPosition: "top",
        showBody: true,
        nameField: "id",
        titleField: "title",
        urlField: "url",
        url: "",
        maskOnLoad: true,
        bodyStyle: "",
        tabHoverCls: "mini-tab-hover",
        tabActiveCls: "mini-tab-active",
        set: function ($) {
            if (typeof $ == "string") return this;
            var _ = this.allowLayout;
            this.allowLayout = false;
            var A = $.activeIndex;
            delete $.activeIndex;
            var B = $.url;
            delete $.url;
            mini.Tabs.superclass.set.call(this, $);
            if (B) this.setUrl(B);
            if (mini.isNumber(A)) this.setActiveIndex(A);
            this.allowLayout = _;
            this.doLayout();
            return this
        },
        uiCls: "mini-tabs",
        _create: function () {
            this.el = document.createElement("div");
            this.el.className = "mini-tabs";
            var _ = "<table class=\"mini-tabs-table\" cellspacing=\"0\" cellpadding=\"0\"><tr style=\"width:100%;\">" + "<td></td>" + "<td style=\"text-align:left;vertical-align:top;width:100%;\"><div class=\"mini-tabs-bodys\"></div></td>" + "<td></td>" + "</tr></table>";
            this.el.innerHTML = _;
            this.tableEl = this.el.firstChild;
            var $ = this.el.getElementsByTagName("td");
            this.td1El = $[0];
            this.td2El = $[1];
            this.td3El = $[2];
            this.bodyEl = this.td2El.firstChild;
            this.doUpdate()
        },
        _doClearElement: function () {
            mini.removeClass(this.td1El, "mini-tabs-header");
            mini.removeClass(this.td3El, "mini-tabs-header");
            this.td1El.innerHTML = "";
            this.td3El.innerHTML = "";
            mini.removeChilds(this.td2El, this.bodyEl)
        },
        _initEvents: function () {
            mini._BindEvents(function () {
                mini.on(this.el, "mousedown", this.__OnMouseDown, this);
                mini.on(this.el, "click", this.__OnClick, this);
                mini.on(this.el, "mouseover", this.__OnMouseOver, this);
                mini.on(this.el, "mouseout", this.__OnMouseOut, this)
            }, this)
        },
        _initTabs: function () {
            this.tabs = []
        },
        _TabID: 1,
        createTab: function (_) {
            var $ = mini.copyTo({
                _id: this._TabID++,
                name: "",
                title: "",
                newLine: false,
                iconCls: "",
                iconStyle: "",
                headerCls: "",
                headerStyle: "",
                bodyCls: "",
                bodyStyle: "",
                visible: true,
                enabled: true,
                showCloseButton: false,
                active: false,
                url: "",
                loaded: false,
                refreshOnClick: false
            }, _);
            if (_) {
                _ = mini.copyTo(_, $);
                $ = _
            }
            return $
        },
        _doLoad: function () {
            var _ = mini.getData(this.url);
            if (!_) _ = [];
            for (var $ = 0, B = _.length; $ < B; $++) {
                var A = _[$];
                A.title = A[this.titleField];
                A.url = A[this.urlField];
                A.name = A[this.nameField]
            }
            this.setTabs(_);
            this.fire("load")
        },
        load: function ($) {
            if (typeof $ == "string") this.setUrl($);
            else this.setTabs($)
        },
        setUrl: function ($) {
            this.url = $;
            this._doLoad()
        },
        setNameField: function ($) {
            this.nameField = $
        },
        setTitleField: function ($) {
            this.titleField = $
        },
        setUrlField: function ($) {
            this.urlField = $
        },
        setTabs: function (_) {
            if (!mini.isArray(_)) return;
            this.beginUpdate();
            this.removeAll();
            for (var $ = 0, A = _.length; $ < A; $++) this.addTab(_[$]);
            this.setActiveIndex(0);
            this.endUpdate()
        },
        removeAll: function () {
            var _ = this.tabs;
            for (var $ = _.length - 1; $ >= 0; $--) this.removeTab(_[$])
        },
        addTab: function (C, $) {
            if (typeof C == "string") C = {
                title: C
            };
            C = this.createTab(C);
            if (typeof $ != "number") $ = this.tabs.length;
            this.tabs.insert($, C);
            var F = this._createTabBodyId(C),
                G = "<div id=\"" + F + "\" class=\"mini-tabs-body " + C.bodyCls + "\" style=\"" + C.bodyStyle + ";display:none;\"></div>";
            mini.append(this.bodyEl, G);
            var A = this.getTabBodyEl(C),
                B = C.body;
            delete C.body;
            if (B) {
                    if (!mini.isArray(B)) B = [B];
                    for (var _ = 0, E = B.length; _ < E; _++) mini.append(A, B[_])
                }
            if (C.bodyParent) {
                    var D = C.bodyParent;
                    while (D.firstChild) A.appendChild(D.firstChild)
                }
            delete C.bodyParent;
            this.doUpdate();
            return C
        },
        removeTab: function (C) {
            C = this.getTab(C);
            if (!C) return;
            var B = C == this.getActiveTab(),
                A = this._OnTabDestroy(C);
            this.tabs.remove(C);
            this._doRemoveIFrame(C);
            var _ = this.getTabBodyEl(C);
            if (_) this.bodyEl.removeChild(_);
            if (A && B) {
                    for (var $ = this.activeIndex; $ >= 0; $--) {
                        var C = this.getTab($);
                        if (C && C.enabled && C.visible) {
                            this.activeIndex = $;
                            break
                        }
                    }
                    this.doUpdate();
                    this.setActiveIndex(this.activeIndex);
                    this.fire("activechanged")
                } else this.doUpdate();
            return C
        },
        moveTab: function (A, $) {
            A = this.getTab(A);
            if (!A) return;
            var _ = this.tabs[$];
            if (!_ || _ == A) return;
            this.tabs.remove(A);
            var $ = this.tabs.indexOf(_);
            this.tabs.insert($, A);
            this.doUpdate()
        },
        updateTab: function ($, _) {
            $ = this.getTab($);
            if (!$) return;
            mini.copyTo($, _);
            this.doUpdate()
        },
        _getMaskWrapEl: function () {
            return this.bodyEl
        },
        _doRemoveIFrame: function (B) {
            if (B.iframeEl && B.iframeEl.parentNode) {
                B.iframeEl._ondestroy();
                B.iframeEl.parentNode.removeChild(B.iframeEl);
                B.iframeEl = null
            }
            var C = this.getTabBodyEl();
            if (C) {
                var A = mini.getChildNodes(C, true);
                for (var _ = 0, D = A.length; _ < D; _++) {
                    var $ = A[_];
                    if ($ && $.parentNode) $.parentNode.removeChild($)
                }
            }
        },
        deferLoadingTime: 180,
        _doLoadTab: function (A) {
            if (!A) return;
            var B = this.getTabBodyEl(A);
            if (!B) return;
            this._loading = true;
            this._doRemoveIFrame(A);
            A.isLoading = true;
            if (this.maskOnLoad) this.loading();
            var C = new Date(),
                $ = this,
                _ = mini.createIFrame(A.url, function (_, D) {
                    var B = (C - new Date()) + $.deferLoadingTime;
                    if (B < 0) B = 0;
                    setTimeout(function () {
                        $.unmask();
                        $.doLayout();
                        $.isLoading = false
                    }, B);
                    try {
                        A.iframeEl.contentWindow.CloseOwnerWindow = function (_) {
                            setTimeout(function () {
                                A.removeAction = _;
                                $.removeTab(A)
                            }, 1)
                        }
                    } catch (E) {}
                    var E = {
                        sender: $,
                        tab: A,
                        index: $.tabs.indexOf(A),
                        name: A.name,
                        iframe: A.iframeEl
                    };
                    if (A.onload) {
                        if (typeof A.onload == "string") A.onload = window[A.onload];
                        if (A.onload) A.onload.call($, E)
                    }
                    $.fire("tabload", E)
                }, function () {
                    if ($.el == null) return;
                    $.isLoading = false
                });
            setTimeout(function () {
                    B.appendChild(_)
                }, 1);
            A.iframeEl = _;
            A.loadedUrl = A.url
        },
        _OnTabDestroy: function ($) {
            var _ = {
                sender: this,
                tab: $,
                index: this.tabs.indexOf($),
                name: $.name,
                iframe: $.iframeEl,
                autoActive: true
            };
            if ($.ondestroy) {
                if (typeof $.ondestroy == "string") $.ondestroy = window[$.ondestroy];
                if ($.ondestroy) {
                    try {
                        $.ondestroy.call(this, _)
                    } catch (_) {}
                }
            }
            this.fire("tabdestroy", _);
            return _.autoActive
        },
        loadTab: function (A, _, $, B) {
            if (!A) return;
            _ = this.getTab(_);
            if (!_) _ = this.getActiveTab();
            if (!_) return;
            _.url = A;
            this._doLoadTab(_)
        },
        reloadTab: function ($) {
            $ = this.getTab($);
            if (!$) $ = this.getActiveTab();
            if (!$) return;
            this.loadTab($.url, $)
        },
        getTabRows: function () {
            var A = [],
                _ = [];
            for (var $ = 0, C = this.tabs.length; $ < C; $++) {
                    var B = this.tabs[$];
                    if ($ != 0 && B.newLine) {
                        A.push(_);
                        _ = []
                    }
                    _.push(B)
                }
            A.push(_);
            return A
        },
        doUpdate: function () {
            if (this.allowUpdate === false) return;
            mini.removeClass(this.el, "mini-tabs-position-left");
            mini.removeClass(this.el, "mini-tabs-position-top");
            mini.removeClass(this.el, "mini-tabs-position-right");
            mini.removeClass(this.el, "mini-tabs-position-bottom");
            if (this.tabPosition == "bottom") {
                mini.addClass(this.el, "mini-tabs-position-bottom");
                this._doUpdateBottom()
            } else if (this.tabPosition == "right") {
                mini.addClass(this.el, "mini-tabs-position-right");
                this._doUpdateRight()
            } else if (this.tabPosition == "left") {
                mini.addClass(this.el, "mini-tabs-position-left");
                this._doUpdateLeft()
            } else {
                mini.addClass(this.el, "mini-tabs-position-top");
                this._doUpdateTop()
            }
            this.doLayout();
            this.setActiveIndex(this.activeIndex, false)
        },
        doLayout: function () {
            if (!this.canLayout()) return;
            var R = jQuery(this.el).css("height") == "auto" || jQuery(this.el).css("height") == "";
            C = this.getHeight(true);
            w = this.getWidth(true);
            var G = C,
                O = w;
            if (!R && this.showBody) {
                    var Q = jQuery(this.headerEl).outerHeight(),
                        $ = jQuery(this.headerEl).outerWidth();
                    if (this.tabPosition == "top") Q = jQuery(this.headerEl.parentNode).outerHeight();
                    if (this.tabPosition == "left" || this.tabPosition == "right") w = w - $;
                    else C = C - Q;
                    if (jQuery.boxModel) {
                            var D = mini.getPaddings(this.bodyEl),
                                S = mini.getBorders(this.bodyEl);
                            C = C - D.top - D.bottom - S.top - S.bottom;
                            w = w - D.left - D.right - S.left - S.right
                        }
                    margin = mini.getMargins(this.bodyEl);
                    C = C - margin.top - margin.bottom;
                    w = w - margin.left - margin.right;
                    if (C < 0) C = 0;
                    if (w < 0) w = 0;
                    this.bodyEl.style.width = w + "px";
                    this.bodyEl.style.height = C + "px";
                    if (this.tabPosition == "left" || this.tabPosition == "right") {
                            var I = this.headerEl.getElementsByTagName("tr")[0],
                                E = I.childNodes,
                                _ = E[0].getElementsByTagName("tr"),
                                F = last = all = 0;
                            for (var K = 0, H = _.length; K < H; K++) {
                                    var I = _[K],
                                        N = jQuery(I).outerHeight();
                                    all += N;
                                    if (K == 0) F = N;
                                    if (K == H - 1) last = N
                                }
                            switch (this.tabAlign) {
                                case "center":
                                    var P = parseInt((G - (all - F - last)) / 2);
                                    for (K = 0, H = E.length; K < H; K++) {
                                        E[K].firstChild.style.height = G + "px";
                                        var B = E[K].firstChild,
                                            _ = B.getElementsByTagName("tr"),
                                            L = _[0],
                                            U = _[_.length - 1];
                                        L.style.height = P + "px";
                                        U.style.height = P + "px"
                                    }
                                    break;
                                case "right":
                                    for (K = 0, H = E.length; K < H; K++) {
                                        var B = E[K].firstChild,
                                            _ = B.getElementsByTagName("tr"),
                                            I = _[0],
                                            T = G - (all - F);
                                        if (T >= 0) I.style.height = T + "px"
                                    }
                                    break;
                                case "fit":
                                    for (K = 0, H = E.length; K < H; K++) E[K].firstChild.style.height = G + "px";
                                    break;
                                default:
                                    for (K = 0, H = E.length; K < H; K++) {
                                        B = E[K].firstChild,
                                        _ = B.getElementsByTagName("tr"),
                                        I = _[_.length - 1],
                                        T = G - (all - last);
                                        if (T >= 0) I.style.height = T + "px"
                                    }
                                    break
                                }
                        }
                } else {
                    this.bodyEl.style.width = "auto";
                    this.bodyEl.style.height = "auto"
                }
            var A = this.getTabBodyEl(this.activeIndex);
            if (A) if (!R && this.showBody) {
                    var C = mini.getHeight(this.bodyEl, true);
                    if (jQuery.boxModel) {
                        D = mini.getPaddings(A),
                        S = mini.getBorders(A);
                        C = C - D.top - D.bottom - S.top - S.bottom
                    }
                    A.style.height = C + "px"
                } else A.style.height = "auto";
            switch (this.tabPosition) {
                case "bottom":
                    var M = this.headerEl.childNodes;
                    for (K = 0, H = M.length; K < H; K++) {
                        B = M[K];
                        mini.removeClass(B, "mini-tabs-header2");
                        if (H > 1 && K != 0) mini.addClass(B, "mini-tabs-header2")
                    }
                    break;
                case "left":
                    E = this.headerEl.firstChild.rows[0].cells;
                    for (K = 0, H = E.length; K < H; K++) {
                        var J = E[K];
                        mini.removeClass(J, "mini-tabs-header2");
                        if (H > 1 && K == 0) mini.addClass(J, "mini-tabs-header2")
                    }
                    break;
                case "right":
                    E = this.headerEl.firstChild.rows[0].cells;
                    for (K = 0, H = E.length; K < H; K++) {
                        J = E[K];
                        mini.removeClass(J, "mini-tabs-header2");
                        if (H > 1 && K != 0) mini.addClass(J, "mini-tabs-header2")
                    }
                    break;
                default:
                    M = this.headerEl.childNodes;
                    for (K = 0, H = M.length; K < H; K++) {
                        B = M[K];
                        mini.removeClass(B, "mini-tabs-header2");
                        if (H > 1 && K == 0) mini.addClass(B, "mini-tabs-header2")
                    }
                    break
                }
            mini.removeClass(this.el, "mini-tabs-scroll");
            if (this.tabPosition == "top") {
                    jQuery(this.headerEl).width(O);
                    if (this.headerEl.offsetWidth < this.headerEl.scrollWidth) {
                        jQuery(this.headerEl).width(O - 60);
                        mini.addClass(this.el, "mini-tabs-scroll")
                    }
                    if (mini.isIE && !jQuery.boxModel) this._leftButtonEl.style.left = "-26px"
                }
            this._doScrollButton();
            mini.layout(this.bodyEl)
        },
        setTabAlign: function ($) {
            this.tabAlign = $;
            this.doUpdate()
        },
        setTabPosition: function ($) {
            this.tabPosition = $;
            this.doUpdate()
        },
        getTab: function ($) {
            if (typeof $ == "object") return $;
            if (typeof $ == "number") return this.tabs[$];
            else for (var _ = 0, B = this.tabs.length; _ < B; _++) {
                var A = this.tabs[_];
                if (A.name == $) return A
            }
        },
        getTabEl: function ($) {
            var C = this.getTab($);
            if (!C) return null;
            var E = this._createTabId(C),
                B = this.el.getElementsByTagName("*");
            for (var _ = 0, D = B.length; _ < D; _++) {
                    var A = B[_];
                    if (A.id == E) return A
                }
            return null
        },
        getTabBodyEl: function ($) {
            var C = this.getTab($);
            if (!C) return null;
            var E = this._createTabBodyId(C),
                B = this.bodyEl.childNodes;
            for (var _ = 0, D = B.length; _ < D; _++) {
                    var A = B[_];
                    if (A.id == E) return A
                }
            return null
        },
        getTabIFrameEl: function ($) {
            var _ = this.getTab($);
            if (!_) return null;
            return _.iframeEl
        },
        _createTabId: function ($) {
            return this.uid + "$" + $._id
        },
        _createTabBodyId: function ($) {
            return this.uid + "$body$" + $._id
        },
        _doScrollButton: function () {
            if (this.tabPosition == "top") {
                mini.removeClass(this._leftButtonEl, "mini-disabled");
                mini.removeClass(this._rightButtonEl, "mini-disabled");
                if (this.headerEl.scrollLeft == 0) mini.addClass(this._leftButtonEl, "mini-disabled");
                var _ = this.getTabEl(this.tabs.length - 1);
                if (_) {
                    var $ = mini.getBox(_),
                        A = mini.getBox(this.headerEl);
                    if ($.right <= A.right) mini.addClass(this._rightButtonEl, "mini-disabled")
                }
            }
        },
        setActiveIndex: function ($, H) {
            var L = this.getTab($),
                C = this.getTab(this.activeIndex),
                M = L != C,
                J = this.getTabBodyEl(this.activeIndex);
            if (J) J.style.display = "none";
            if (L) this.activeIndex = this.tabs.indexOf(L);
            else this.activeIndex = -1;
            J = this.getTabBodyEl(this.activeIndex);
            if (J) J.style.display = "";
            J = this.getTabEl(C);
            if (J) mini.removeClass(J, this.tabActiveCls);
            J = this.getTabEl(L);
            if (J) mini.addClass(J, this.tabActiveCls);
            if (J && M) {
                    if (this.tabPosition == "bottom") {
                        var A = mini.findParent(J, "mini-tabs-header");
                        if (A) jQuery(this.headerEl).prepend(A)
                    } else if (this.tabPosition == "left") {
                        var F = mini.findParent(J, "mini-tabs-header").parentNode;
                        if (F) F.parentNode.appendChild(F)
                    } else if (this.tabPosition == "right") {
                        F = mini.findParent(J, "mini-tabs-header").parentNode;
                        if (F) jQuery(F.parentNode).prepend(F)
                    } else {
                        A = mini.findParent(J, "mini-tabs-header");
                        if (A) this.headerEl.appendChild(A)
                    }
                    var B = this.headerEl.scrollLeft;
                    this.doLayout();
                    var _ = this.getTabRows();
                    if (_.length > 1);
                    else {
                        if (this.tabPosition == "top") {
                            this.headerEl.scrollLeft = B;
                            var N = this.getTabEl(this.activeIndex);
                            if (N) {
                                var I = this,
                                    K = mini.getBox(N),
                                    E = mini.getBox(I.headerEl);
                                if (K.x < E.x) I.headerEl.scrollLeft -= (E.x - K.x);
                                else if (K.right > E.right) I.headerEl.scrollLeft += (K.right - E.right)
                            }
                        }
                        this._doScrollButton()
                    }
                    for (var G = 0, D = this.tabs.length; G < D; G++) {
                        N = this.getTabEl(this.tabs[G]);
                        if (N) mini.removeClass(N, this.tabHoverCls)
                    }
                }
            if (M) {
                    var O = {
                        tab: L,
                        index: this.tabs.indexOf(L),
                        name: L.name
                    };
                    this.fire("ActiveChanged", O)
                }
            if (H !== false) if (L && L.url && !L.loadedUrl) this.loadTab(L.url, L);
            if (this.canLayout()) {
                    try {
                        mini.layoutIFrames(this.el)
                    } catch (O) {}
                }
        },
        activeTab: function ($) {
            this.setActiveIndex($)
        },
        getActiveTab: function () {
            return this.getTab(this.activeIndex)
        },
        getActiveIndex: function () {
            return this.activeIndex
        },
        _tryActiveTab: function (_) {
            _ = this.getTab(_);
            if (!_) return;
            var $ = this.tabs.indexOf(_);
            if (this.activeIndex == $) return;
            var A = {
                tab: _,
                index: $,
                name: _.name,
                cancel: false
            };
            this.fire("BeforeActiveChanged", A);
            if (A.cancel == false) this.activeTab(_)
        },
        setShowBody: function ($) {
            if (this.showBody != $) {
                this.showBody = $;
                this.doLayout()
            }
        },
        setBodyStyle: function ($) {
            mini.setStyle(this.bodyEl, $);
            this.doLayout()
        },
        setMaskOnLoad: function ($) {
            this.maskOnLoad = $
        },
        _getTabByEvent: function (B) {
            var A = mini.findParent(B.target, "mini-tab");
            if (!A) return null;
            var _ = A.id.split("$");
            if (_[0] != this.uid) return null;
            var $ = parseInt(jQuery(A).attr("index"));
            return this.getTab($)
        },
        __OnClick: function (A) {
            if (this.isLoading) return;
            var _ = this._getTabByEvent(A);
            if (!_) return;
            if (_.enabled) if (mini.findParent(A.target, "mini-tab-close")) this._OnCloseButtonClick(_, A);
            else {
                var $ = _.loadedUrl;
                this._tryActiveTab(_);
                if (_.refreshOnClick && _.url == $) this.reloadTab(_)
            }
        },
        hoverTab: null,
        __OnMouseOver: function (A) {
            var $ = this._getTabByEvent(A);
            if ($ && $.enabled) {
                var _ = this.getTabEl($);
                mini.addClass(_, this.tabHoverCls);
                this.hoverTab = $
            }
        },
        __OnMouseOut: function (_) {
            if (this.hoverTab) {
                var $ = this.getTabEl(this.hoverTab);
                mini.removeClass($, this.tabHoverCls)
            }
            this.hoverTab = null
        },
        __OnMouseDown: function (B) {
            if (this.tabPosition == "top") {
                var _ = this,
                    A = 0,
                    $ = 10;
                if (B.target == this._leftButtonEl) this.scrollTimer = setInterval(function () {
                        _.headerEl.scrollLeft -= $;
                        A++;
                        if (A > 5) $ = 18;
                        if (A > 10) $ = 25;
                        _._doScrollButton()
                    }, 20);
                else if (B.target == this._rightButtonEl) this.scrollTimer = setInterval(function () {
                        _.headerEl.scrollLeft += $;
                        A++;
                        if (A > 5) $ = 18;
                        if (A > 10) $ = 25;
                        _._doScrollButton()
                    }, 20);
                mini.on(document, "mouseup", this.__OnDocMouseUp, this)
            }
        },
        __OnDocMouseUp: function ($) {
            clearInterval(this.scrollTimer);
            this.scrollTimer = null;
            mini.un(document, "mouseup", this.__OnDocMouseUp, this)
        },
        _doUpdateTop: function () {
            var L = this.tabPosition == "top",
                O = "";
            if (L) {
                    O += "<div class=\"mini-tabs-scrollCt\">";
                    O += "<a class=\"mini-tabs-leftButton\" href=\"javascript:void(0)\" hideFocus onclick=\"return false\"></a><a class=\"mini-tabs-rightButton\" href=\"javascript:void(0)\" hideFocus onclick=\"return false\"></a>"
                }
            O += "<div class=\"mini-tabs-headers\">";
            var B = this.getTabRows();
            for (var M = 0, A = B.length; M < A; M++) {
                    var I = B[M],
                        E = "";
                    O += "<table class=\"mini-tabs-header\" cellspacing=\"0\" cellpadding=\"0\"><tr><td class=\"mini-tabs-space mini-tabs-firstSpace\"><div></div></td>";
                    for (var J = 0, F = I.length; J < F; J++) {
                            var N = I[J],
                                G = this._createTabId(N);
                            if (!N.visible) continue;
                            var $ = this.tabs.indexOf(N),
                                E = N.headerCls || "";
                            if (N.enabled == false) E += " mini-disabled";
                            O += "<td id=\"" + G + "\" index=\"" + $ + "\"  class=\"mini-tab " + E + "\" style=\"" + N.headerStyle + "\">";
                            if (N.iconCls || N.iconStyle) O += "<span class=\"mini-tab-icon " + N.iconCls + "\" style=\"" + N.iconStyle + "\"></span>";
                            O += "<span class=\"mini-tab-text\">" + N.title + "</span>";
                            if (N.showCloseButton) {
                                    var _ = "";
                                    if (N.enabled) _ = "onmouseover=\"mini.addClass(this, 'mini-tab-close-hover')\" onmouseout=\"mini.removeClass(this, 'mini-tab-close-hover')\"";
                                    O += "<span class=\"mini-tab-close\" " + _ + "></span>"
                                }
                            O += "</td>";
                            if (J != F - 1) O += "<td class=\"mini-tabs-space2\"><div></div></td>"
                        }
                    O += "<td class=\"mini-tabs-space mini-tabs-lastSpace\" ><div></div></td></tr></table>"
                }
            if (L) O += "</div>";
            O += "</div>";
            this._doClearElement();
            mini.prepend(this.td2El, O);
            var H = this.td2El;
            this.headerEl = H.firstChild.lastChild;
            if (L) {
                    this._leftButtonEl = this.headerEl.parentNode.firstChild;
                    this._rightButtonEl = this.headerEl.parentNode.childNodes[1]
                }
            switch (this.tabAlign) {
                case "center":
                    var K = this.headerEl.childNodes;
                    for (J = 0, F = K.length; J < F; J++) {
                        var C = K[J],
                            D = C.getElementsByTagName("td");
                        D[0].style.width = "50%";
                        D[D.length - 1].style.width = "50%"
                    }
                    break;
                case "right":
                    K = this.headerEl.childNodes;
                    for (J = 0, F = K.length; J < F; J++) {
                        C = K[J],
                        D = C.getElementsByTagName("td");
                        D[0].style.width = "100%"
                    }
                    break;
                case "fit":
                    break;
                default:
                    K = this.headerEl.childNodes;
                    for (J = 0, F = K.length; J < F; J++) {
                        C = K[J],
                        D = C.getElementsByTagName("td");
                        D[D.length - 1].style.width = "100%"
                    }
                    break
                }
        },
        _doUpdateBottom: function () {
            this._doUpdateTop();
            var $ = this.td2El;
            mini.append($, $.firstChild);
            this.headerEl = $.lastChild
        },
        _doUpdateLeft: function () {
            var J = "<table cellspacing=\"0\" cellpadding=\"0\"><tr>",
                B = this.getTabRows();
            for (var H = 0, A = B.length; H < A; H++) {
                    var F = B[H],
                        C = "";
                    if (A > 1 && H != A - 1) C = "mini-tabs-header2";
                    J += "<td class=\"" + C + "\"><table class=\"mini-tabs-header\" cellspacing=\"0\" cellpadding=\"0\">";
                    J += "<tr ><td class=\"mini-tabs-space mini-tabs-firstSpace\" ><div></div></td></tr>";
                    for (var G = 0, D = F.length; G < D; G++) {
                            var I = F[G],
                                E = this._createTabId(I);
                            if (!I.visible) continue;
                            var $ = this.tabs.indexOf(I),
                                C = I.headerCls || "";
                            if (I.enabled == false) C += " mini-disabled";
                            J += "<tr><td id=\"" + E + "\" index=\"" + $ + "\"  class=\"mini-tab " + C + "\" style=\"" + I.headerStyle + "\">";
                            if (I.iconCls || I.iconStyle) J += "<span class=\"mini-tab-icon " + I.iconCls + "\" style=\"" + I.iconStyle + "\"></span>";
                            J += "<span class=\"mini-tab-text\">" + I.title + "</span>";
                            if (I.showCloseButton) {
                                    var _ = "";
                                    if (I.enabled) _ = "onmouseover=\"mini.addClass(this, 'mini-tab-close-hover')\" onmouseout=\"mini.removeClass(this, 'mini-tab-close-hover')\"";
                                    J += "<span class=\"mini-tab-close\" " + _ + "></span>"
                                }
                            J += "</td></tr>";
                            if (G != D - 1) J += "<tr><td class=\"mini-tabs-space2\"><div></div></td></tr>"
                        }
                    J += "<tr ><td class=\"mini-tabs-space mini-tabs-lastSpace\" ><div></div></td></tr>";
                    J += "</table></td>"
                }
            J += "</tr ></table>";
            this._doClearElement();
            mini.addClass(this.td1El, "mini-tabs-header");
            mini.append(this.td1El, J);
            this.headerEl = this.td1El
        },
        _doUpdateRight: function () {
            this._doUpdateLeft();
            mini.removeClass(this.td1El, "mini-tabs-header");
            mini.removeClass(this.td3El, "mini-tabs-header");
            mini.append(this.td3El, this.td1El.firstChild);
            this.headerEl = this.td3El
        },
        _OnCloseButtonClick: function (_, $) {
            var A = {
                tab: _,
                index: this.tabs.indexOf(_),
                name: _.name.toLowerCase(),
                htmlEvent: $,
                cancel: false
            };
            this.fire("beforecloseclick", A);
            if (A.cancel == true) return;
            _.removeAction = "close";
            this.removeTab(_);
            this.fire("closeclick", A)
        },
        onBeforeCloseClick: function (_, $) {
            this.on("beforecloseclick", _, $)
        },
        onCloseClick: function (_, $) {
            this.on("closeclick", _, $)
        },
        onActiveChanged: function (_, $) {
            this.on("activechanged", _, $)
        },
        getAttrs: function (B) {
            var F = mini.Tabs.superclass.getAttrs.call(this, B);
            mini._ParseString(B, F, ["tabAlign", "tabPosition", "bodyStyle", "onactivechanged", "onbeforeactivechanged", "url", "ontabload", "ontabdestroy", "onbeforecloseclick", "oncloseclick", "titleField", "urlField", "nameField"]);
            mini._ParseBool(B, F, ["allowAnim", "showBody", "maskOnLoad"]);
            mini._ParseInt(B, F, ["activeIndex"]);
            var A = [],
                E = mini.getChildNodes(B);
            for (var _ = 0, D = E.length; _ < D; _++) {
                    var C = E[_],
                        $ = {};
                    A.push($);
                    $.style = C.style.cssText;
                    mini._ParseString(C, $, ["name", "title", "url", "cls", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle", "onload", "ondestroy"]);
                    mini._ParseBool(C, $, ["newLine", "visible", "enabled", "showCloseButton", "refreshOnClick"]);
                    $.bodyParent = C
                }
            F.tabs = A;
            return F
        }
    });
mini.regClass(mini.Tabs, "tabs");
mini.Menu = function () {
        this.items = [];
        mini.Menu.superclass.constructor.call(this)
    };
mini.extend(mini.Menu, mini.Control);
mini.copyTo(mini.Menu.prototype, mini.Popup_prototype);
var mini_Popup_prototype_hide = mini.Popup_prototype.hide;
mini.copyTo(mini.Menu.prototype, {
        width: 140,
        vertical: true,
        allowSelectItem: false,
        selectedItem: null,
        itemSelectedCls: "mini-menuitem-selected",
        textField: "text",
        resultAsTree: true,
        idField: "id",
        parentField: "pid",
        itemsField: "children",
        _clearBorder: false,
        showAction: "none",
        hideAction: "outerclick",
        getbyName: function (C) {
            for (var _ = 0, B = this.items.length; _ < B; _++) {
                var $ = this.items[_];
                if ($.name == C) return $;
                if ($.menu) {
                    var A = $.menu.getbyName(C);
                    if (A) return A
                }
            }
            return null
        },
        set: function ($) {
            if (typeof $ == "string") return this;
            var _ = $.url;
            delete $.url;
            mini.Menu.superclass.set.call(this, $);
            if (_) this.setUrl(_);
            return this
        },
        uiCls: "mini-menu",
        _create: function () {
            var _ = "<table class=\"mini-menu\" cellpadding=\"0\" cellspacing=\"0\"><tr><td style=\"text-align:left;vertical-align:top;padding:0;border:0;\"><div class=\"mini-menu-inner\"></div></td></tr></table>",
                $ = document.createElement("div");
            $.innerHTML = _;
            this.el = $.firstChild;
            this.contentEl = mini.byClass("mini-menu-inner", this.el)
        },
        destroy: function ($) {
            this._popupEl = this.popupEl = null;
            this.owner = null;
            mini.un(document, "mousedown", this.__OnBodyMouseDown, this);
            mini.un(window, "resize", this.__OnWindowResize, this);
            mini.Menu.superclass.destroy.call(this, $)
        },
        _initEvents: function () {
            mini._BindEvents(function () {
                mini.on(document, "mousedown", this.__OnBodyMouseDown, this);
                mini.on(this.el, "mouseover", this.__OnMouseOver, this);
                mini.on(window, "resize", this.__OnWindowResize, this);
                mini.on(this.el, "contextmenu", function ($) {
                    $.preventDefault();
                    $.stopPropagation()
                }, this)
            }, this)
        },
        within: function (B) {
            if (mini.isAncestor(this.el, B.target)) return true;
            for (var _ = 0, A = this.items.length; _ < A; _++) {
                var $ = this.items[_];
                if ($.within(B)) return true
            }
            return false
        },
        _getClearEl: function () {
            if (!this._clearEl) this._clearEl = mini.append(this.contentEl, "<div style=\"clear:both;\"></div>");
            return this._clearEl
        },
        setVertical: function ($) {
            this.vertical = $;
            if (!$) mini.addClass(this.el, "mini-menu-horizontal");
            else mini.removeClass(this.el, "mini-menu-horizontal");
            mini.append(this.contentEl, this._getClearEl())
        },
        isVertical: function () {
            return this.vertical
        },
        show: function () {
            this.setVisible(true)
        },
        hide: function () {
            this.hideItems();
            mini_Popup_prototype_hide.call(this)
        },
        hideItems: function () {
            for (var $ = 0, A = this.items.length; $ < A; $++) {
                var _ = this.items[$];
                _.hideMenu()
            }
        },
        showItemMenu: function ($) {
            for (var _ = 0, B = this.items.length; _ < B; _++) {
                var A = this.items[_];
                if (A == $) A.showMenu();
                else A.hideMenu()
            }
        },
        hasShowItemMenu: function () {
            for (var $ = 0, A = this.items.length; $ < A; $++) {
                var _ = this.items[$];
                if (_ && _.menu && _.menu.isPopup) return true
            }
            return false
        },
        setItems: function (_) {
            if (!mini.isArray(_)) return;
            for (var $ = 0, A = _.length; $ < A; $++) this.addItem(_[$])
        },
        addItem: function ($) {
            if ($ == "-" || $ == "|") {
                mini.append(this.contentEl, "<span class=\"mini-separator\"></span>");
                return
            }
            if (!mini.isControl($) && !$.type) $.type = "menuitem";
            $ = mini.getAndCreate($);
            this.items.push($);
            this.contentEl.appendChild($.el);
            $.ownerMenu = this;
            mini.append(this.contentEl, this._getClearEl());
            this.fire("itemschanged")
        },
        removeItem: function ($) {
            $ = mini.get($);
            if (!$) return;
            this.items.remove($);
            this.contentEl.removeChild($.el);
            this.fire("itemschanged")
        },
        removeItemAt: function (_) {
            var $ = this.items[_];
            this.removeItem($)
        },
        removeAll: function () {
            var $ = this.items;
            for (var _ = items.length - 1; _ < l; _++) this.removeItem(items[_])
        },
        getGroupItems: function (C) {
            if (!C) return [];
            var A = [];
            for (var _ = 0, B = this.items.length; _ < B; _++) {
                var $ = this.items[_];
                if ($.groupName == C) A.push($)
            }
            return A
        },
        getItem: function ($) {
            if (typeof $ == "number") return this.items[$];
            return $
        },
        setAllowSelectItem: function ($) {
            this.allowSelectItem = $
        },
        setSelectedItem: function ($) {
            $ = this.getItem($);
            this._OnItemSelect($)
        },
        getSelectedItem: function ($) {
            return this.selectedItem
        },
        setTextField: function ($) {
            this.textField = $
        },
        setResultAsTree: function ($) {
            this.resultAsTree = $
        },
        setIdField: function ($) {
            this.idField = $
        },
        setParentField: function ($) {
            this.parentField = $
        },
        url: "",
        _doLoad: function () {
            var B = mini.getData(this.url);
            if (!B) B = [];
            if (this.resultAsTree == false) B = mini.arrayToTree(B, this.itemsField, this.idField, this.parentField);
            var _ = mini.treeToArray(B, this.itemsField, this.idField, this.parentField);
            for (var A = 0, C = _.length; A < C; A++) {
                var $ = _[A];
                $.text = $[this.textField]
            }
            this.setItems(B);
            this.fire("load")
        },
        load: function ($) {
            if (typeof $ == "string") this.setUrl($);
            else this.setItems($)
        },
        setUrl: function ($) {
            this.url = $;
            this._doLoad()
        },
        _OnItemClick: function ($, _) {
            var A = {
                item: $,
                isLeaf: !$.menu,
                htmlEvent: _
            };
            if (this.isPopup) this.hide();
            else this.hideItems();
            if (this.allowSelectItem) this.setSelectedItem($);
            this.fire("itemclick", A);
            if (this.ownerItem);
        },
        _OnItemSelect: function ($) {
            if (this.selectedItem) this.selectedItem.removeCls(this.itemSelectedCls);
            this.selectedItem = $;
            if (this.selectedItem) this.selectedItem.addCls(this.itemSelectedCls);
            var _ = {
                item: this.selectedItem
            };
            this.fire("itemselect", _)
        },
        onItemClick: function (_, $) {
            this.on("itemclick", _, $)
        },
        onItemSelect: function (_, $) {
            this.on("itemselect", _, $)
        },
        parseItems: function (G) {
            var C = [];
            for (var _ = 0, F = G.length; _ < F; _++) {
                var B = G[_];
                if (B.className == "separator") {
                    C.add("-");
                    continue
                }
                var E = mini.getChildNodes(B),
                    A = E[0],
                    D = E[1],
                    $ = new mini.MenuItem();
                if (!D) {
                        mini.applyTo.call($, B);
                        C.add($);
                        continue
                    }
                mini.applyTo.call($, A);
                $.render(document.body);
                var H = new mini.Menu();
                mini.applyTo.call(H, D);
                $.setMenu(H);
                H.render(document.body);
                C.add($)
            }
            return C.clone()
        },
        getAttrs: function (_) {
            var E = mini.Menu.superclass.getAttrs.call(this, _),
                D = jQuery(_);
            mini._ParseString(_, E, ["popupEl", "popupCls", "showAction", "hideAction", "hAlign", "vAlign", "modalStyle", "onbeforeopen", "open", "onbeforeclose", "onclose", "url", "onitemclick", "onitemselect", "textField", "idField", "parentField"]);
            mini._ParseBool(_, E, ["resultAsTree"]);
            var A = mini.getChildNodes(_),
                $ = this.parseItems(A);
            if ($.length > 0) E.items = $;
            var B = D.attr("vertical");
            if (B) E.vertical = B == "true" ? true : false;
            var C = D.attr("allowSelectItem");
            if (C) E.allowSelectItem = C == "true" ? true : false;
            return E
        }
    });
mini.regClass(mini.Menu, "menu");
mini.MenuItem = function () {
        mini.MenuItem.superclass.constructor.call(this)
    };
mini.extend(mini.MenuItem, mini.Control, {
        text: "",
        iconCls: "",
        iconStyle: "",
        iconPosition: "left",
        showIcon: true,
        showAllow: true,
        checked: false,
        checkOnClick: false,
        groupName: "",
        hoverCls: "mini-menuitem-hover",
        pressedCls: "mini-menuitem-pressed",
        checkedCls: "mini-menuitem-checked",
        _clearBorder: false,
        menu: null,
        uiCls: "mini-menuitem",
        _create: function () {
            var $ = this.el = document.createElement("div");
            this.el.className = "mini-menuitem";
            this.el.innerHTML = "<div class=\"mini-menuitem-inner\"><div class=\"mini-menuitem-icon\"></div><div class=\"mini-menuitem-text\"></div><div class=\"mini-menuitem-allow\"></div></div>";
            this.innerEl = this.el.firstChild;
            this.iconEl = this.innerEl.firstChild;
            this.textEl = this.innerEl.childNodes[1];
            this.allowEl = this.innerEl.lastChild
        },
        _initEvents: function () {
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "mouseup", this.__OnMouseUp, this);
            mini.on(this.el, "mouseover", this.__OnMouseOver, this);
            mini.on(this.el, "mouseout", this.__OnMouseOut, this)
        },
        destroy: function ($) {
            this.menu = null;
            mini.MenuItem.superclass.destroy.call(this, $)
        },
        within: function ($) {
            if (mini.isAncestor(this.el, $.target)) return true;
            if (this.menu && this.menu.within($)) return true;
            return false
        },
        doUpdate: function () {
            if (this.textEl) this.textEl.innerHTML = this.text;
            if (this.iconEl) {
                mini.setStyle(this.iconEl, this.iconStyle);
                mini.addClass(this.iconEl, this.iconCls);
                this.iconEl.style.display = (this.iconStyle || this.iconCls) ? "block" : "none"
            }
            if (this.iconPosition == "top") mini.addClass(this.el, "mini-menuitem-icontop");
            else mini.removeClass(this.el, "mini-menuitem-icontop");
            if (this.checked) mini.addClass(this.el, this.checkedCls);
            else mini.removeClass(this.el, this.checkedCls);
            if (this.allowEl) if (this.menu && this.menu.items.length > 0) this.allowEl.style.display = "block";
            else this.allowEl.style.display = "none"
        },
        setText: function ($) {
            this.text = $;
            this.doUpdate()
        },
        setIconCls: function ($) {
            mini.removeClass(this.iconEl, this.iconCls);
            this.iconCls = $;
            this.doUpdate()
        },
        setIconStyle: function ($) {
            this.iconStyle = $;
            this.doUpdate()
        },
        setIconPosition: function ($) {
            this.iconPosition = $;
            this.doUpdate()
        },
        setCheckOnClick: function ($) {
            this.checkOnClick = $;
            if ($) mini.addClass(this.el, "mini-menuitem-showcheck");
            else mini.removeClass(this.el, "mini-menuitem-showcheck")
        },
        setChecked: function ($) {
            if (this.checked != $) {
                this.checked = $;
                this.doUpdate();
                this.fire("checkedchanged")
            }
        },
        setGroupName: function ($) {
            if (this.groupName != $) this.groupName = $
        },
        getChecked: function () {
            return this.checked
        },
        getText: function () {
            return this.text
        },
        setChildren: function ($) {
            this.setMenu($)
        },
        setMenu: function ($) {
            if (mini.isArray($)) $ = {
                type: "menu",
                items: $
            };
            if (this.menu !== $) {
                this.menu = mini.getAndCreate($);
                this.menu.hide();
                this.menu.ownerItem = this;
                this.doUpdate();
                this.menu.on("itemschanged", this.__OnItemsChanged, this)
            }
        },
        showMenu: function () {
            if (this.menu) {
                this.menu.setHideAction("outerclick");
                var $ = {
                    hAlign: "outright",
                    vAlign: "top",
                    outHAlign: "outleft",
                    popupCls: "mini-menu-popup"
                };
                if (this.ownerMenu && this.ownerMenu.vertical == false) {
                    $.hAlign = "left";
                    $.vAlign = "below";
                    $.outHAlign = null
                }
                this.menu.showAtEl(this.el, $)
            }
        },
        hideMenu: function () {
            if (this.menu) this.menu.hide()
        },
        hide: function () {
            this.hideMenu();
            this.setVisible(false)
        },
        __OnItemsChanged: function ($) {
            this.doUpdate()
        },
        getTopMenu: function () {
            if (this.ownerMenu) if (this.ownerMenu.ownerItem) return this.ownerMenu.ownerItem.getTopMenu();
            else return this.ownerMenu;
            return null
        },
        __OnClick: function (D) {
            if (this.isReadOnly()) return;
            if (this.checkOnClick) if (this.ownerMenu && this.groupName) {
                var B = this.ownerMenu.getGroupItems(this.groupName);
                if (B.length > 0) {
                    if (this.checked == false) {
                        for (var _ = 0, C = B.length; _ < C; _++) {
                            var $ = B[_];
                            if ($ != this) $.setChecked(false)
                        }
                        this.setChecked(true)
                    }
                } else this.setChecked(!this.checked)
            } else this.setChecked(!this.checked);
            this.fire("click");
            var A = this.getTopMenu();
            if (A) A._OnItemClick(this, D)
        },
        __OnMouseUp: function (_) {
            if (this.isReadOnly()) return;
            if (this.ownerMenu) {
                var $ = this;
                setTimeout(function () {
                    if ($.isDisplay()) $.ownerMenu.showItemMenu($)
                }, 1)
            }
        },
        __OnMouseOver: function ($) {
            if (this.isReadOnly()) return;
            mini.addClass(this.el, this.hoverCls);
            if (this.ownerMenu) if (this.ownerMenu.isVertical() == true) this.ownerMenu.showItemMenu(this);
            else if (this.ownerMenu.hasShowItemMenu()) this.ownerMenu.showItemMenu(this)
        },
        __OnMouseOut: function ($) {
            mini.removeClass(this.el, this.hoverCls)
        },
        onClick: function (_, $) {
            this.on("click", _, $)
        },
        onCheckedChanged: function (_, $) {
            this.on("checkedchanged", _, $)
        },
        getAttrs: function ($) {
            var A = mini.MenuItem.superclass.getAttrs.call(this, $),
                _ = jQuery($);
            A.text = $.innerHTML;
            mini._ParseString($, A, ["text", "iconCls", "iconStyle", "iconPosition", "groupName", "onclick", "oncheckedchanged"]);
            mini._ParseBool($, A, ["checkOnClick", "checked"]);
            return A
        }
    });
mini.regClass(mini.MenuItem, "menuitem");
mini.NavBar = function () {
        this._initGroups();
        mini.NavBar.superclass.constructor.call(this)
    };
mini.extend(mini.NavBar, mini.Control, {
        width: 180,
        activeIndex: -1,
        autoCollapse: false,
        groupCls: "",
        groupStyle: "",
        groupHeaderCls: "",
        groupHeaderStyle: "",
        groupBodyCls: "",
        groupBodyStyle: "",
        groupHoverCls: "",
        groupActiveCls: "",
        allowAnim: true,
        set: function (A) {
            if (typeof A == "string") return this;
            var $ = this.allowLayout;
            this.allowLayout = false;
            var _ = A.activeIndex;
            delete A.activeIndex;
            mini.NavBar.superclass.set.call(this, A);
            if (mini.isNumber(_)) this.setActiveIndex(_);
            this.allowLayout = $;
            this.doLayout();
            return this
        },
        uiCls: "mini-navbar",
        _create: function () {
            this.el = document.createElement("div");
            this.el.className = "mini-navbar";
            this.el.innerHTML = "<div class=\"mini-navbar-border\"></div>";
            this.borderEl = this.el.firstChild
        },
        _initEvents: function () {
            mini._BindEvents(function () {
                mini.on(this.el, "click", this.__OnClick, this)
            }, this)
        },
        _createGroupId: function ($) {
            return this.uid + "$" + $._id
        },
        _GroupId: 1,
        _initGroups: function () {
            this.groups = []
        },
        _createGroupEl: function (_) {
            var H = this._createGroupId(_),
                G = "<div id=\"" + H + "\" class=\"mini-navbar-group " + _.cls + "\" style=\"" + _.style + "\">" + "<div class=\"mini-navbar-groupHeader " + _.headerCls + "\" style=\"" + _.headerStyle + ";\"></div>" + "<div class=\"mini-navbar-groupBody " + _.bodyCls + "\" style=\"" + _.bodyStyle + ";\"></div>" + "</div>",
                A = mini.append(this.borderEl, G),
                E = A.lastChild,
                C = _.body;
            delete _.body;
            if (C) {
                    if (!mini.isArray(C)) C = [C];
                    for (var $ = 0, F = C.length; $ < F; $++) {
                        var B = C[$];
                        mini.append(E, B)
                    }
                    C.length = 0
                }
            if (_.bodyParent) {
                    var D = _.bodyParent;
                    while (D.firstChild) E.appendChild(D.firstChild)
                }
            delete _.bodyParent;
            return A
        },
        createGroup: function (_) {
            var $ = mini.copyTo({
                _id: this._GroupId++,
                name: "",
                title: "",
                cls: "",
                style: "",
                iconCls: "",
                iconStyle: "",
                headerCls: "",
                headerStyle: "",
                bodyCls: "",
                bodyStyle: "",
                visible: true,
                enabled: true,
                showCollapseButton: true,
                expanded: false
            }, _);
            return $
        },
        setGroups: function (_) {
            if (!mini.isArray(_)) return;
            for (var $ = 0, A = _.length; $ < A; $++) this.addGroup(_[$])
        },
        addGroup: function (_, $) {
            if (typeof _ == "string") _ = {
                title: _
            };
            _ = this.createGroup(_);
            if (typeof $ != "number") $ = this.groups.length;
            this.groups.insert($, _);
            var B = this._createGroupEl(_);
            _._el = B;
            var $ = this.groups.indexOf(_),
                A = this.groups[$ + 1];
            if (A) {
                    var C = this.getGroupEl(A);
                    jQuery(C).before(B)
                }
            this.doUpdate();
            return _
        },
        updateGroup: function ($, _) {
            var $ = this.getGroup($);
            if (!$) return;
            mini.copyTo($, _);
            this.doUpdate()
        },
        removeGroup: function ($) {
            $ = this.getGroup($);
            if (!$) return;
            var _ = this.getGroupEl($);
            if (_) _.parentNode.removeChild(_);
            this.doUpdate()
        },
        moveGroup: function (_, $) {
            _ = this.getGroup(_);
            if (!_) return;
            target = this.getGroup($);
            var A = this.getGroupEl(_);
            this.groups.remove(_);
            if (target) {
                $ = this.groups.indexOf(target);
                this.groups.insert($, _);
                var B = this.getGroupEl(target);
                jQuery(B).before(A)
            } else {
                this.groups.add(_);
                this.borderEl.appendChild(A)
            }
            this.doUpdate()
        },
        doUpdate: function () {
            for (var _ = 0, E = this.groups.length; _ < E; _++) {
                var A = this.groups[_],
                    B = A._el,
                    D = B.firstChild,
                    C = B.lastChild,
                    $ = "<div class=\"mini-navbar-icon " + A.iconCls + "\" style=\"" + A.iconStyle + ";\"></div>",
                    F = "<div class=\"mini-tools\"><span class=\"mini-tools-collapse\"></span></div>" + ((A.iconStyle || A.iconCls) ? $ : "") + "<div class=\"mini-navbar-groupTitle\">" + A.title + "</div><div style=\"clear:both;\"></div>";
                D.innerHTML = F;
                if (A.enabled) mini.removeClass(B, "mini-disabled");
                else mini.addClass(B, "mini-disabled");
                mini.addClass(B, A.cls);
                mini.setStyle(B, A.style);
                mini.addClass(C, A.bodyCls);
                mini.setStyle(C, A.bodyStyle);
                mini.addClass(D, A.headerCls);
                mini.setStyle(D, A.headerStyle);
                mini.removeClass(B, "mini-navbar-firstGroup");
                mini.removeClass(B, "mini-navbar-lastGroup");
                if (_ == 0) mini.addClass(B, "mini-navbar-firstGroup");
                if (_ == E - 1) mini.addClass(B, "mini-navbar-lastGroup")
            }
            this.doLayout()
        },
        doLayout: function () {
            if (!this.canLayout()) return;
            if (this.inAniming) return;
            this._doLayoutInner();
            for (var $ = 0, E = this.groups.length; $ < E; $++) {
                var _ = this.groups[$],
                    A = _._el,
                    C = A.lastChild;
                if (_.expanded) {
                        mini.addClass(A, "mini-navbar-expand");
                        mini.removeClass(A, "mini-navbar-collapse")
                    } else {
                        mini.removeClass(A, "mini-navbar-expand");
                        mini.addClass(A, "mini-navbar-collapse")
                    }
                C.style.height = "auto";
                C.style.display = _.expanded ? "block" : "none";
                A.style.display = _.visible ? "" : "none"
            }
            var D = this.isAutoHeight(),
                B = this.getActiveGroup();
            if (!D && this.autoCollapse && B) {
                    A = this.getGroupEl(this.activeIndex);
                    A.lastChild.style.height = this._getFillGroupBodyHeight() + "px"
                }
            mini.layout(this.borderEl)
        },
        _doLayoutInner: function () {
            if (this.isAutoHeight()) this.borderEl.style.height = "auto";
            else {
                var $ = this.getHeight(true);
                if (!jQuery.boxModel) {
                    var _ = mini.getBorders(this.borderEl);
                    $ = $ + _.top + _.bottom
                }
                this.borderEl.style.height = $ + "px"
            }
        },
        _getFillGroupBodyHeight: function () {
            var C = jQuery(this.el).height(),
                K = mini.getBorders(this.borderEl);
            C = C - K.top - K.bottom;
            var A = this.getActiveGroup(),
                E = 0;
            for (var F = 0, D = this.groups.length; F < D; F++) {
                    var _ = this.groups[F],
                        G = this.getGroupEl(_);
                    if (_.visible == false || _ == A) continue;
                    var $ = G.lastChild.style.display;
                    G.lastChild.style.display = "none";
                    var J = jQuery(G).outerHeight();
                    G.lastChild.style.display = $;
                    var L = mini.getMargins(G);
                    J = J + L.top + L.bottom;
                    E += J
                }
            C = C - E;
            var H = this.getGroupEl(this.activeIndex);
            C = C - jQuery(H.firstChild).outerHeight();
            if (jQuery.boxModel) {
                    var B = mini.getPaddings(H.lastChild),
                        I = mini.getBorders(H.lastChild);
                    C = C - B.top - B.bottom - I.top - I.bottom
                }
            B = mini.getPaddings(H),
            I = mini.getBorders(H),
            L = mini.getMargins(H);
            C = C - L.top - L.bottom;
            C = C - B.top - B.bottom - I.top - I.bottom;
            if (C < 0) C = 0;
            return C
        },
        getGroup: function ($) {
            if (typeof $ == "object") return $;
            if (typeof $ == "number") return this.groups[$];
            else for (var _ = 0, B = this.groups.length; _ < B; _++) {
                var A = this.groups[_];
                if (A.name == $) return A
            }
        },
        _getGroupById: function (B) {
            for (var $ = 0, A = this.groups.length; $ < A; $++) {
                var _ = this.groups[$];
                if (_._id == B) return _
            }
        },
        getGroupEl: function ($) {
            var _ = this.getGroup($);
            if (!_) return null;
            return _._el
        },
        getGroupBodyEl: function ($) {
            var _ = this.getGroupEl($);
            if (_) return _.lastChild;
            return null
        },
        setAutoCollapse: function ($) {
            this.autoCollapse = $
        },
        setActiveIndex: function (_) {
            var $ = this.getGroup(_),
                A = this.getGroup(this.activeIndex),
                B = $ != A;
            if ($) this.activeIndex = this.groups.indexOf($);
            else this.activeIndex = -1;
            $ = this.getGroup(this.activeIndex);
            if ($) {
                    var C = this.allowAnim;
                    this.allowAnim = false;
                    this.expandGroup($);
                    this.allowAnim = C
                }
        },
        getActiveGroup: function () {
            return this.getGroup(this.activeIndex)
        },
        getActiveIndex: function () {
            return this.activeIndex
        },
        showGroup: function ($) {
            $ = this.getGroup($);
            if (!$ || $.visible == true) return;
            $.visible = true;
            this.doUpdate()
        },
        hideGroup: function ($) {
            $ = this.getGroup($);
            if (!$ || $.visible == false) return;
            $.visible = false;
            this.doUpdate()
        },
        toggleGroup: function ($) {
            $ = this.getGroup($);
            if (!$) return;
            if ($.expanded) this.collapseGroup($);
            else this.expandGroup($)
        },
        collapseGroup: function (_) {
            _ = this.getGroup(_);
            if (!_ || _.expanded == false) return;
            var D = _.expanded,
                E = 0;
            if (this.autoCollapse && !this.isAutoHeight()) E = this._getFillGroupBodyHeight();
            var F = false;
            _.expanded = false;
            var $ = this.groups.indexOf(_);
            if ($ == this.activeIndex) {
                    this.activeIndex = -1;
                    F = true
                }
            var C = this.getGroupBodyEl(_);
            if (this.allowAnim && D) {
                    this.inAniming = true;
                    C.style.display = "block";
                    C.style.height = "auto";
                    if (this.autoCollapse && !this.isAutoHeight()) C.style.height = E + "px";
                    var A = {
                        height: "1px"
                    },
                        B = this,
                        H = jQuery(C);
                    H.animate(A, 180, function () {
                            B.inAniming = false;
                            B.doLayout()
                        })
                } else this.doLayout();
            var G = {
                    group: _,
                    index: this.groups.indexOf(_),
                    name: _.name
                };
            this.fire("Collapse", G);
            if (F) this.fire("activechanged")
        },
        expandGroup: function ($) {
            $ = this.getGroup($);
            if (!$ || $.expanded) return;
            var H = $.expanded;
            $.expanded = true;
            this.activeIndex = this.groups.indexOf($);
            fire = true;
            if (this.autoCollapse) for (var D = 0, B = this.groups.length; D < B; D++) {
                var C = this.groups[D];
                if (C.expanded && C != $) this.collapseGroup(C)
            }
            var G = this.getGroupBodyEl($);
            if (this.allowAnim && H == false) {
                this.inAniming = true;
                G.style.display = "block";
                if (this.autoCollapse && !this.isAutoHeight()) {
                    var A = this._getFillGroupBodyHeight();
                    G.style.height = (A) + "px"
                } else G.style.height = "auto";
                var _ = mini.getHeight(G);
                G.style.height = "1px";
                var E = {
                    height: _ + "px"
                },
                    I = G.style.overflow;
                G.style.overflow = "hidden";
                var F = this,
                    K = jQuery(G);
                K.animate(E, 180, function () {
                        G.style.overflow = I;
                        F.inAniming = false;
                        F.doLayout()
                    })
            } else this.doLayout();
            var J = {
                group: $,
                index: this.groups.indexOf($),
                name: $.name
            };
            this.fire("Expand", J);
            if (fire) this.fire("activechanged")
        },
        _tryToggleGroup: function ($) {
            $ = this.getGroup($);
            var _ = {
                group: $,
                groupIndex: this.groups.indexOf($),
                groupName: $.name,
                cancel: false
            };
            if ($.expanded) {
                this.fire("BeforeCollapse", _);
                if (_.cancel == false) this.collapseGroup($)
            } else {
                this.fire("BeforeExpand", _);
                if (_.cancel == false) this.expandGroup($)
            }
        },
        _getGroupByEvent: function (B) {
            var _ = mini.findParent(B.target, "mini-navbar-group");
            if (!_) return null;
            var $ = _.id.split("$"),
                A = $[$.length - 1];
            return this._getGroupById(A)
        },
        __OnClick: function (A) {
            if (this.inAniming) return;
            var _ = mini.findParent(A.target, "mini-navbar-groupHeader");
            if (!_) return;
            var $ = this._getGroupByEvent(A);
            if (!$) return;
            this._tryToggleGroup($)
        },
        parseGroups: function (D) {
            var A = [];
            for (var $ = 0, C = D.length; $ < C; $++) {
                var B = D[$],
                    _ = {};
                A.push(_);
                _.style = B.style.cssText;
                mini._ParseString(B, _, ["name", "title", "cls", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle"]);
                mini._ParseBool(B, _, ["visible", "enabled", "showCollapseButton", "expanded"]);
                _.bodyParent = B
            }
            return A
        },
        getAttrs: function ($) {
            var A = mini.NavBar.superclass.getAttrs.call(this, $);
            mini._ParseBool($, A, ["autoCollapse", "allowAnim"]);
            mini._ParseInt($, A, ["activeIndex"]);
            var _ = mini.getChildNodes($);
            A.groups = this.parseGroups(_);
            return A
        }
    });
mini.regClass(mini.NavBar, "navbar");
mini.NavBarMenu = function () {
        mini.NavBarMenu.superclass.constructor.call(this);
        this.data = []
    };
mini.extend(mini.NavBarMenu, mini.NavBar, {
        url: "",
        textField: "text",
        iconField: "iconCls",
        urlField: "url",
        resultAsTree: true,
        itemsField: "children",
        idField: "id",
        parentField: "pid",
        style: "width:100%;height:100%;",
        borderStyle: "border:0;",
        set: function (_) {
            if (typeof _ == "string") return this;
            var A = _.url;
            delete _.url;
            var $ = _.activeIndex;
            delete _.activeIndex;
            mini.NavBarMenu.superclass.set.call(this, _);
            if (A) this.setUrl(A);
            if (mini.isNumber($)) this.setActiveIndex($);
            return this
        },
        uiCls: "mini-navbarmenu",
        destroy: function (B) {
            if (this.menus) {
                var _ = this.menus.clone();
                for (var $ = 0, C = _.length; $ < C; $++) {
                    var A = _[$];
                    A.destroy()
                }
                this.menus.length = 0
            }
            mini.NavBarMenu.superclass.destroy.call(this, B)
        },
        _doLoad: function () {
            var B = mini.getData(this.url);
            if (!B) B = [];
            if (this.resultAsTree == false) B = mini.arrayToTree(B, this.itemsField, this.idField, this.parentField);
            var _ = mini.treeToArray(B, this.itemsField, this.idField, this.parentField);
            for (var A = 0, C = _.length; A < C; A++) {
                var $ = _[A];
                $.text = $[this.textField];
                $.url = $[this.urlField];
                $.iconCls = $[this.iconField]
            }
            this.createNavBarMenu(B);
            this.fire("load")
        },
        load: function ($) {
            if (typeof $ == "string") this.setUrl($);
            else this.createNavBarMenu($)
        },
        setUrl: function ($) {
            this.url = $;
            this._doLoad()
        },
        setTextField: function ($) {
            this.textField = $
        },
        setIconField: function ($) {
            this.iconField = $
        },
        setUrlField: function ($) {
            this.urlField = $
        },
        setResultAsTree: function ($) {
            this.resultAsTree = $
        },
        setItemsField: function ($) {
            this.itemsField = $
        },
        setIdField: function ($) {
            this.idField = $
        },
        setParentField: function ($) {
            this.parentField = $
        },
        getAttrs: function ($) {
            var _ = mini.NavBarMenu.superclass.getAttrs.call(this, $);
            _.text = $.innerHTML;
            mini._ParseString($, _, ["url", "textField", "urlField", "idField", "parentField", "itemsField", "iconField", "onitemclick", "onitemselect"]);
            mini._ParseBool($, _, ["resultAsTree"]);
            return _
        },
        autoCollapse: true,
        activeIndex: 0,
        createNavBarMenu: function (D) {
            if (!mini.isArray(D)) D = [];
            this.data = D;
            var B = [];
            for (var _ = 0, E = this.data.length; _ < E; _++) {
                var $ = this.data[_],
                    A = {};
                A.title = $.text;
                A.titleCls = $.iconCls;
                B.push(A);
                A._children = $[this.itemsField]
            }
            this.setGroups(B);
            this.setActiveIndex(this.activeIndex);
            this.menus = [];
            for (_ = 0, E = this.groups.length; _ < E; _++) {
                var A = this.groups[_],
                    C = this.getGroupBodyEl(A),
                    F = new mini.Menu();
                F.set({
                        style: "width:100%;height:100%;border:0;background:none",
                        allowSelectItem: true,
                        items: A._children
                    });
                F.render(C);
                F.on("itemclick", this.__OnItemClick, this);
                F.on("itemselect", this.__OnItemSelect, this);
                this.menus.push(F);
                delete A._children
            }
        },
        __OnItemClick: function (_) {
            var $ = {
                item: _.item,
                htmlEvent: _.htmlEvent
            };
            this.fire("itemclick", $)
        },
        __OnItemSelect: function (C) {
            if (!C.item) return;
            for (var $ = 0, A = this.menus.length; $ < A; $++) {
                var B = this.menus[$];
                if (B != C.sender) B.setSelectedItem(null)
            }
            var _ = {
                item: C.item,
                htmlEvent: C.htmlEvent
            };
            this.fire("itemselect", _)
        }
    });
mini.regClass(mini.NavBarMenu, "navbarmenu");
mini.NavBarTree = function () {
        mini.NavBarTree.superclass.constructor.call(this);
        this.data = []
    };
mini.extend(mini.NavBarTree, mini.NavBar, {
        url: "",
        textField: "text",
        iconField: "iconCls",
        urlField: "url",
        resultAsTree: true,
        nodesField: "children",
        idField: "id",
        parentField: "pid",
        style: "width:100%;height:100%;",
        borderStyle: "border:0;",
        set: function (_) {
            if (typeof _ == "string") return this;
            var A = _.url;
            delete _.url;
            var $ = _.activeIndex;
            delete _.activeIndex;
            mini.NavBarTree.superclass.set.call(this, _);
            if (A) this.setUrl(A);
            if (mini.isNumber($)) this.setActiveIndex($);
            return this
        },
        uiCls: "mini-navbartree",
        destroy: function (B) {
            if (this.trees) {
                var _ = this.trees.clone();
                for (var $ = 0, C = _.length; $ < C; $++) {
                    var A = _[$];
                    A.destroy()
                }
                this.trees.length = 0
            }
            mini.NavBarTree.superclass.destroy.call(this, B)
        },
        _doLoad: function () {
            var B = mini.getData(this.url);
            if (!B) B = [];
            if (this.resultAsTree == false) B = mini.arrayToTree(B, this.nodesField, this.idField, this.parentField);
            var _ = mini.treeToArray(B, this.nodesField, this.idField, this.parentField);
            for (var A = 0, C = _.length; A < C; A++) {
                var $ = _[A];
                $.text = $[this.textField];
                $.url = $[this.urlField];
                $.iconCls = $[this.iconField]
            }
            this.createNavBarTree(B);
            this.fire("load")
        },
        load: function ($) {
            if (typeof $ == "string") this.setUrl($);
            else this.createNavBarTree($)
        },
        setUrl: function ($) {
            this.url = $;
            this._doLoad()
        },
        setTextField: function ($) {
            this.textField = $
        },
        setIconField: function ($) {
            this.iconField = $
        },
        setUrlField: function ($) {
            this.urlField = $
        },
        setResultAsTree: function ($) {
            this.resultAsTree = $
        },
        setNodesField: function ($) {
            this.nodesField = $
        },
        setIdField: function ($) {
            this.idField = $
        },
        setParentField: function ($) {
            this.parentField = $
        },
        getAttrs: function ($) {
            var _ = mini.NavBarTree.superclass.getAttrs.call(this, $);
            _.text = $.innerHTML;
            mini._ParseString($, _, ["url", "textField", "urlField", "idField", "parentField", "nodesField", "iconField", "onnodeclick", "onnodeselect"]);
            mini._ParseBool($, _, ["resultAsTree"]);
            return _
        },
        autoCollapse: true,
        activeIndex: 0,
        createNavBarTree: function (D) {
            if (!mini.isArray(D)) D = [];
            this.data = D;
            var B = [];
            for (var _ = 0, E = this.data.length; _ < E; _++) {
                var $ = this.data[_],
                    A = {};
                A.title = $.text;
                A.titleCls = $.iconCls;
                B.push(A);
                A._children = $[this.nodesField]
            }
            this.setGroups(B);
            this.setActiveIndex(this.activeIndex);
            this.trees = [];
            for (_ = 0, E = this.groups.length; _ < E; _++) {
                var A = this.groups[_],
                    C = this.getGroupBodyEl(A),
                    D = new mini.Tree();
                D.set({
                        showTreeIcon: true,
                        style: "width:100%;height:100%;border:0;background:none",
                        data: A._children
                    });
                D.render(C);
                D.on("nodeclick", this.__OnNodeClick, this);
                D.on("nodeselect", this.__OnNodeSelect, this);
                this.trees.push(D);
                delete A._children
            }
        },
        __OnNodeClick: function (_) {
            var $ = {
                node: _.node,
                isLeaf: _.sender.isLeaf(_.node),
                htmlEvent: _.htmlEvent
            };
            this.fire("nodeclick", $)
        },
        __OnNodeSelect: function (C) {
            if (!C.node) return;
            for (var $ = 0, B = this.trees.length; $ < B; $++) {
                var A = this.trees[$];
                if (A != C.sender) A.selectNode(null)
            }
            var _ = {
                node: C.node,
                isLeaf: C.sender.isLeaf(C.node),
                htmlEvent: C.htmlEvent
            };
            this.fire("nodeselect", _)
        }
    });
mini.regClass(mini.NavBarTree, "navbartree");
mini.Tree = function ($) {
        this.root = {
            _id: -1,
            _pid: "",
            _level: -1
        };
        this.root[this.nodesField] = [];
        this._idNodes = {};
        this.idNodes = {};
        mini.Tree.superclass.constructor.call(this, $);
        this.on("beforeexpand", function (B) {
            var $ = B.node,
                A = this.isLeaf($),
                _ = $[this.nodesField];
            if (!A && (!_ || _.length == 0)) {
                    B.cancel = true;
                    this.loadNode($)
                }
        }, this)
    };
mini.Tree.NodeUID = 1;
var lastNodeLevel = [];
mini.extend(mini.Tree, mini.Control, {
        value: "",
        selectedNode: null,
        allowSelect: true,
        showCheckBox: false,
        showFolderCheckBox: true,
        showExpandButtons: true,
        enableHotTrack: true,
        delimiter: ",",
        url: "",
        root: null,
        resultAsTree: true,
        parentField: "pid",
        idField: "id",
        textField: "text",
        iconField: "iconCls",
        nodesField: "children",
        showTreeIcon: false,
        showTreeLines: true,
        checkRecursive: false,
        allowAnim: true,
        selectedNodeCls: "mini-tree-selectedNode",
        hoverNodeCls: "mini-tree-hoverNode",
        leafIcon: "mini-tree-leaf",
        folderIcon: "mini-tree-folder",
        set: function (A) {
            if (typeof A == "string") return this;
            var $ = A.value;
            delete A.value;
            var B = A.url;
            delete A.url;
            var _ = A.data;
            delete A.data;
            mini.Tree.superclass.set.call(this, A);
            if (!mini.isNull(_)) this.setData(_);
            if (!mini.isNull(B)) this.setUrl(B);
            if (!mini.isNull($)) this.setValue($);
            return this
        },
        uiCls: "mini-tree",
        _create: function () {
            this.el = document.createElement("div");
            this.el.className = "mini-tree";
            if (this.showTreeLines == true) mini.addClass(this.el, "mini-tree-treeLine");
            this.el.style.display = "block";
            this.doUpdate();
            this._DragDrop = new mini._TreeDragDrop(this)
        },
        _initEvents: function () {
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "dblclick", this.__OnDblClick, this);
            mini.on(this.el, "mousedown", this.__OnMouseDown, this)
        },
        load: function ($) {
            if (typeof $ == "string") {
                this.url = $;
                this._doLoad({}, this.root)
            } else this.setData($)
        },
        setData: function ($) {
            this.loadData($);
            this.data = $
        },
        loadData: function ($) {
            if (!mini.isArray($)) $ = [];
            this.root[this.nodesField] = $;
            this._updateParentAndLevel(this.root, null);
            this.doUpdate()
        },
        clearData: function () {
            this.loadData([])
        },
        setUrl: function ($) {
            if (this.url != $) {
                this.url = $;
                this.load($)
            }
        },
        loadNode: function (C, $) {
            C = this.getNode(C);
            if (!C) return;
            if (this.isLeaf(C)) return;
            var B = {};
            B[this.idField] = this.getItemValue(C);
            var _ = this;
            _.addNodeCls(C, "mini-tree-loading");
            this.ajaxAsync = true;
            var A = new Date();
            this._doLoad(B, C, function (B) {
                var D = new Date() - A;
                if (D < 60) D = 60 - D;
                setTimeout(function () {
                    _.removeNodeCls(C, "mini-tree-loading");
                    _.removeNodes(C[_.nodesField]);
                    if (B && B.length > 0) {
                        _.addNodes(B, C);
                        if ($ !== false) _.expandNode(C, true);
                        else _.collapseNode(C, true)
                    } else {
                        delete C.isLeaf;
                        _._doUpdateNodeTitle(C)
                    }
                }, D)
            }, function ($) {
                _.removeNodeCls(C, "mini-tree-loading")
            });
            this.ajaxAsync = false
        },
        ajaxAsync: false,
        _doLoad: function (_, A, B, C) {
            var E = A == this.root,
                D = {
                    url: this.url,
                    async: this.ajaxAsync,
                    type: "get",
                    params: _,
                    cancel: false,
                    node: A,
                    isRoot: E
                };
            this.fire("beforeload", D);
            if (D.cancel == true) return;
            if (A != this.root);
            var $ = this;
            this._ajaxer = jQuery.ajax({
                    url: D.url,
                    async: D.async,
                    data: D.params,
                    type: D.type,
                    cache: false,
                    dataType: "text",
                    success: function (_) {
                        var A = null;
                        try {
                            A = mini.decode(_)
                        } catch (C) {
                            A = []
                        }
                        var C = {
                            result: A,
                            data: A,
                            cancel: false
                        };
                        if ($.resultAsTree == false) C.data = mini.arrayToTree(C.data, $.nodesField, $.idField, $.parentField);
                        $.fire("preload", C);
                        if (C.cancel == true) return;
                        if (E) $.setData(C.data);
                        $.fire("load");
                        if (B) B(C.data)
                    },
                    error: function (_, B, A) {
                        var D = {
                            xmlHttp: _,
                            errorCode: B
                        };
                        if (C) C(D);
                        $.fire("loaderror", D)
                    }
                })
        },
        getItemValue: function ($) {
            var _ = $[this.idField];
            return mini.isNull(_) ? "" : String(_)
        },
        getItemText: function ($) {
            var _ = $[this.textField];
            return mini.isNull(_) ? "" : String(_)
        },
        _OnDrawNode: function ($) {
            var B = this.showCheckBox;
            if (B && this.hasChildren($)) B = this.showFolderCheckBox;
            var _ = this.getItemText($),
                A = {
                    isLeaf: this.isLeaf($),
                    node: $,
                    nodeHtml: _,
                    nodeCls: "",
                    nodeStyle: "",
                    showCheckBox: B,
                    iconCls: this.getNodeIcon($),
                    showTreeIcon: this.showTreeIcon
                };
            this.fire("drawnode", A);
            if (A.nodeHtml === null || A.nodeHtml === undefined || A.nodeHtml === "") A.nodeHtml = "&nbsp;";
            return A
        },
        _createNodeTitle: function (D, O) {
            var J = D[this.textField];
            if (J === null || J === undefined) J = "";
            var M = this.isLeaf(D),
                $ = this.getLevel(D),
                P = this._OnDrawNode(D),
                E = P.nodeCls;
            if (!M) E = this.isExpandedNode(D) ? "mini-tree-expand" : "mini-tree-collapse";
            if (this.selectedNode == D) E += " " + this.selectedNodeCls;
            var N = "",
                F = this.getChildNodes(D),
                H = F && F.length > 0;
            N += "<div class=\"mini-tree-nodetitle " + E + "\" style=\"" + P.nodeStyle + "\">";
            var _ = this.getParentNode(D),
                A = 0;
            for (var I = A; I <= $; I++) {
                    if (I == $) continue;
                    if (M) if (this.showExpandButtons == false && I >= $ - 1) continue;
                    var L = "";
                    if (this.isInLastNode(D, I)) L = "background:none";
                    N += "<span class=\"mini-tree-indent \" style=\"" + L + "\"></span>"
                }
            var C = "";
            if (this.isFirstNode(D)) C = "mini-tree-node-ecicon-first";
            else if (this.isLastNode(D)) C = "mini-tree-node-ecicon-last";
            if (this.isFirstNode(D) && this.isLastNode(D)) C = "mini-tree-node-ecicon-last";
            if (!M) N += "<a class=\"mini-tree-node-ecicon " + C + "\" style=\"" + (this.showExpandButtons ? "" : "display:none") + "\" href=\"javascript:void(0);\" onclick=\"return false;\" hidefocus></a>";
            else N += "<span class=\"mini-tree-node-ecicon " + C + "\" ></span>";
            var K = " onmouseover=\"mini.addClass(this, 'mini-tree-node-hover')\" onmouseout=\"mini.removeClass(this, 'mini-tree-node-hover')\" ";
            N += "<span class=\"mini-tree-nodeshow\" " + K + ">";
            if (P.showTreeIcon) N += "<span class=\"" + P.iconCls + " mini-tree-icon\"></span>";
            if (P.showCheckBox) {
                    var G = this._createCheckNodeId(D);
                    N += "<input type=\"checkbox\" id=\"" + G + "\" class=\"mini-tree-checkbox\" hidefocus />"
                }
            N += "<span class=\"mini-tree-nodetext\">";
            if (O) {
                    var B = this.uid + "$edit$" + D._id,
                        J = D[this.textField];
                    if (J === null || J === undefined) J = "";
                    N += "<input id=\"" + B + "\" type=\"text\" class=\"mini-tree-editinput\" value=\"" + J + "\"/>"
                } else N += P.nodeHtml;
            N += "</span>";
            N += "</span>";
            N += "</div>";
            return N
        },
        _createNode: function (A) {
            if (!A) return "";
            var _ = this._createNodeId(A),
                $ = this.isVisibleNode(A) ? "" : "display:none",
                C = "<div id=\"" + _ + "\" class=\"mini-tree-node\" style=\"" + $ + "\">";
            C += this._createNodeTitle(A);
            var B = A[this.nodesField];
            if (B) C += this._createNodes(B, A);
            C += "</div>";
            return C
        },
        _createNodes: function (E, B) {
            if (!E) return "";
            var C = this._createNodesId(B),
                $ = this.isExpandedNode(B) ? "" : "display:none",
                F = "<div id=\"" + C + "\" class=\"mini-tree-nodes\" style=\"" + $ + "\">";
            for (var _ = 0, D = E.length; _ < D; _++) {
                    var A = E[_];
                    F += this._createNode(A)
                }
            F += "</div>";
            return F
        },
        doUpdate: function () {
            if (!this.allowUpdate) return;
            var $ = this.root[this.nodesField],
                _ = this._createNodes($, this.root);
            this.el.innerHTML = _;
            this.doLayout()
        },
        doLayout: function () {
            if (this.showCheckBox) mini.addClass(this.el, "mini-tree-showCheckBox");
            else mini.removeClass(this.el, "mini-tree-showCheckBox");
            if (this.enableHotTrack) mini.addClass(this.el, "mini-tree-hottrack");
            else mini.removeClass(this.el, "mini-tree-hottrack");
            var $ = this.el.firstChild;
            if ($) mini.addClass($, "mini-tree-rootnodes")
        },
        setShowCheckBox: function ($) {
            if (this.showCheckBox != $) {
                this.showCheckBox = $;
                this.doUpdate()
            }
        },
        setShowFolderCheckBox: function ($) {
            if (this.showFolderCheckBox != $) {
                this.showFolderCheckBox = $;
                this.doUpdate()
            }
        },
        setAllowSelect: function ($) {
            if (this.allowSelect != $) {
                this.allowSelect = $;
                this.doUpdate()
            }
        },
        setShowTreeIcon: function ($) {
            if (this.showTreeIcon != $) {
                this.showTreeIcon = $;
                this.doUpdate()
            }
        },
        setShowExpandButtons: function ($) {
            if (this.showExpandButtons != $) {
                this.showExpandButtons = $;
                this.doUpdate()
            }
        },
        setEnableHotTrack: function ($) {
            if (this.enableHotTrack != $) {
                this.enableHotTrack = $;
                this.doLayout()
            }
        },
        setCheckRecursive: function ($) {
            if (this.checkRecursive != $) this.checkRecursive = $
        },
        getNodeIcon: function (_) {
            var $ = _[this.iconField];
            if (!$) if (this.isLeaf(_)) $ = this.leafIcon;
            else $ = this.folderIcon;
            return $
        },
        isAncestor: function (_, B) {
            if (_ == B) return true;
            if (!_ || !B) return false;
            var A = this.getAncestors(B);
            for (var $ = 0, C = A.length; $ < C; $++) if (A[$] == _) return true;
            return false
        },
        getAncestors: function (A) {
            var _ = [];
            while (1) {
                var $ = this.getParentNode(A);
                if (!$ || $ == this.root) break;
                _[_.length] = $;
                A = $
            }
            _.reverse();
            return _
        },
        getRootNode: function () {
            return this.root
        },
        getParentNode: function ($) {
            if (!$) return null;
            return this._idNodes[$._pid]
        },
        indexOfChildren: function (A) {
            var $ = this.getParentNode(A);
            if (!$) return -1;
            var _ = $[this.nodesField];
            return _.indexOf(A)
        },
        getChildNodes: function ($) {
            return $[this.nodesField]
        },
        hasChildren: function ($) {
            var _ = this.getChildNodes($);
            return !!(_ && _.length > 0)
        },
        isLeaf: function ($) {
            if (!$ || $.isLeaf === false) return false;
            var _ = this.getChildNodes($);
            if (_ && _.length > 0) return false;
            return true
        },
        getLevel: function ($) {
            return $._level
        },
        isExpandedNode: function ($) {
            return $.expanded == true || mini.isNull($.expanded)
        },
        isCheckedNode: function ($) {
            return $.checked == true
        },
        isVisibleNode: function ($) {
            return $.visible !== false
        },
        isEnabledNode: function ($) {
            return $.enabled !== false
        },
        isFirstNode: function (_) {
            var $ = this.getParentNode(_),
                A = this.getChildNodes($);
            return A[0] === _
        },
        isLastNode: function (_) {
            var $ = this.getParentNode(_),
                A = this.getChildNodes($);
            return A[A.length - 1] === _
        },
        isInLastNode: function (D, $) {
            var C = null,
                A = this.getAncestors(D);
            for (var _ = 0, E = A.length; _ < E; _++) {
                    var B = A[_];
                    if (this.getLevel(B) == $) C = B
                }
            if (!C || C == this.root) return false;
            return this.isLastNode(C)
        },
        bubbleParent: function (_, B, A) {
            A = A || this;
            if (_) B.call(this, _);
            var $ = this.getParentNode(_);
            if ($ && $ != this.root) this.bubbleParent($, B, A)
        },
        cascadeChild: function (A, E, B) {
            if (!E) return;
            if (!A) A = this.root;
            var D = A[this.nodesField];
            if (D) {
                D = D.clone();
                for (var $ = 0, C = D.length; $ < C; $++) {
                    var _ = D[$];
                    if (E.call(B || this, _, $, A) === false) return;
                    this.cascadeChild(_, E, B)
                }
            }
        },
        eachChild: function (B, F, C) {
            if (!F || !B) return;
            var E = B[this.nodesField];
            if (E) {
                var _ = E.clone();
                for (var A = 0, D = _.length; A < D; A++) {
                    var $ = _[A];
                    if (F.call(C || this, $, A, B) === false) break
                }
            }
        },
        _updateParentAndLevel: function (_, $) {
            if (!_._id) _._id = mini.Tree.NodeUID++;
            this._idNodes[_._id] = _;
            this.idNodes[_[this.idField]] = _;
            _._pid = $ ? $._id : "";
            _._level = $ ? $._level + 1 : -1;
            this.cascadeChild(_, function (A, $, _) {
                if (!A._id) A._id = mini.Tree.NodeUID++;
                this._idNodes[A._id] = A;
                this.idNodes[A[this.idField]] = A;
                A._pid = _._id;
                A._level = _._level + 1
            }, this)
        },
        _updateNodeElLevel: function (_) {
            var $ = this;

            function A(_) {
                $._doUpdateNodeTitle(_)
            }
            if (_ != this.root) A(_);
            this.cascadeChild(_, function ($) {
                A($)
            }, this)
        },
        removeNodes: function (B) {
            if (!mini.isArray(B)) return;
            B = B.clone();
            for (var $ = 0, A = B.length; $ < A; $++) {
                var _ = B[$];
                this.removeNode(_)
            }
        },
        removeNode: function (_) {
            _ = this.getNode(_);
            if (!_) return;
            var $ = this.getParentNode(_);
            $[this.nodesField].remove(_);
            var A = this.getNodeEl(_);
            if (A) A.parentNode.removeChild(A);
            this._updateNodeElLevel($)
        },
        _doUpdateNodeTitle: function ($) {
            var A = this._createNodeTitle($),
                _ = this.getNodeEl($);
            if (_) jQuery(_.firstChild).replaceWith(A)
        },
        setNodeText: function (_, $) {
            _ = this.getNode(_);
            if (!_) return;
            _[this.textField] = $;
            this._doUpdateNodeTitle(_)
        },
        setNodeIconCls: function (_, $) {
            _ = this.getNode(_);
            if (!_) return;
            _[this.iconField] = $;
            this._doUpdateNodeTitle(_)
        },
        addNodes: function (C, _) {
            if (!mini.isArray(C)) return;
            for (var $ = 0, B = C.length; $ < B; $++) {
                var A = C[$];
                this.addNode(A, 10000, _)
            }
        },
        addNode: function (C, $, _) {
            C = this.getNode(C);
            if (!C) return;
            var B = _;
            switch ($) {
            case "before":
                if (!B) return;
                _ = this.getParentNode(B);
                var A = _[this.nodesField];
                $ = A.indexOf(B);
                break;
            case "after":
                if (!B) return;
                _ = this.getParentNode(B);
                A = _[this.nodesField];
                $ = A.indexOf(B) + 1;
                break;
            case "add":
                break;
            default:
                break
            }
            _ = this.getNode(_);
            if (!_) _ = this.root;
            var F = _[this.nodesField];
            if (!F) F = _[this.nodesField] = [];
            $ = parseInt($);
            if (isNaN($)) $ = F.length;
            B = F[$];
            if (!B) $ = F.length;
            F.insert($, C);
            this._updateParentAndLevel(C, _);
            var E = this.getNodesEl(_);
            if (E) {
                var H = this._createNode(C),
                    $ = F.indexOf(C) + 1,
                    B = F[$];
                if (B) {
                        var G = this.getNodeEl(B);
                        jQuery(G).before(H)
                    } else mini.append(E, H)
            } else {
                var H = this._createNode(_),
                    D = this.getNodeEl(_);
                jQuery(D).replaceWith(H)
            }
            _ = this.getParentNode(C);
            this._updateNodeElLevel(_)
        },
        moveNodes: function (E, B, _) {
            if (!E || E.length == 0 || !B || !_) return;
            this.beginUpdate();
            var A = this;
            for (var $ = 0, D = E.length; $ < D; $++) {
                var C = E[$];
                this.moveNode(C, B, _);
                if ($ != 0) {
                    B = C;
                    _ = "after"
                }
            }
            this.endUpdate()
        },
        moveNode: function (G, E, C) {
            G = this.getNode(G);
            E = this.getNode(E);
            if (!G || !E || !C) return false;
            if (this.isAncestor(G, E)) return false;
            var $ = -1,
                _ = null;
            switch (C) {
                case "before":
                    _ = this.getParentNode(E);
                    $ = this.indexOfChildren(E);
                    break;
                case "after":
                    _ = this.getParentNode(E);
                    $ = this.indexOfChildren(E) + 1;
                    break;
                default:
                    _ = E;
                    var B = this.getChildNodes(_);
                    if (!B) B = _[this.nodesField] = [];
                    $ = B.length;
                    break
                }
            var F = {},
                B = this.getChildNodes(_);
            B.insert($, F);
            var D = this.getParentNode(G),
                A = this.getChildNodes(D);
            A.remove(G);
            $ = B.indexOf(F);
            B[$] = G;
            this._updateParentAndLevel(G, _);
            this.doUpdate();
            return true
        },
        beginEdit: function (_) {
            _ = this.getNode(_);
            if (!_) return;
            var A = this.getNodeEl(_),
                B = this._createNodeTitle(_, true),
                A = this.getNodeEl(_);
            if (A) jQuery(A.firstChild).replaceWith(B);
            this._editingNode = _;
            var $ = this.uid + "$edit$" + _._id;
            this._editInput = document.getElementById($);
            this._editInput.focus();
            mini.selectRange(this._editInput, 1000, 1000);
            mini.on(this._editInput, "keydown", this.__OnEditInputKeyDown, this);
            mini.on(this._editInput, "blur", this.__OnEditInputBlur, this)
        },
        cancelEdit: function () {
            if (this._editingNode) {
                this._doUpdateNodeTitle(this._editingNode);
                mini.un(this._editInput, "keydown", this.__OnEditInputKeyDown, this);
                mini.un(this._editInput, "blur", this.__OnEditInputBlur, this)
            }
            this._editingNode = null;
            this._editInput = null
        },
        __OnEditInputKeyDown: function (_) {
            if (_.keyCode == 13) {
                var $ = this._editInput.value;
                this.setNodeText(this._editingNode, $);
                this.cancelEdit()
            } else if (_.keyCode == 27) this.cancelEdit()
        },
        __OnEditInputBlur: function (_) {
            var $ = this._editInput.value;
            this.setNodeText(this._editingNode, $);
            this.cancelEdit()
        },
        getNodeByEvent: function (C) {
            if (mini.hasClass(C.target, "mini-tree-nodes")) return null;
            var A = mini.findParent(C.target, "mini-tree-node");
            if (A) {
                var $ = A.id.split("$"),
                    B = $[$.length - 1],
                    _ = this._idNodes[B];
                return _
            }
            return null
        },
        _createNodeId: function ($) {
            return this.uid + "$" + $._id
        },
        _createNodesId: function ($) {
            return this.uid + "$nodes$" + $._id
        },
        _createCheckNodeId: function ($) {
            return this.uid + "$check$" + $._id
        },
        addNodeCls: function ($, _) {
            var A = this.getNodeEl($);
            if (A) mini.addClass(A, _)
        },
        removeNodeCls: function ($, _) {
            var A = this.getNodeEl($);
            if (A) mini.removeClass(A, _)
        },
        getNodeBox: function (_) {
            var $ = this.getNodeEl(_);
            if ($) return mini.getBox($.firstChild)
        },
        getNodeEl: function ($) {
            if (!$) return null;
            var _ = this._createNodeId($);
            return document.getElementById(_)
        },
        getNodeTitleEl: function (_) {
            var $ = this.getNodeEl(_);
            if ($) return $.firstChild
        },
        getNodesEl: function ($) {
            if (!$) return null;
            var _ = this._createNodesId($);
            return document.getElementById(_)
        },
        getCheckBoxEl: function ($) {
            if (!$) return null;
            var _ = this._createCheckNodeId($);
            return document.getElementById(_)
        },
        findNodes: function (_) {
            var $ = [];
            this.cascadeChild(this.root, function (A) {
                if (_ && _(A) === true) $.push(A)
            }, this);
            return $
        },
        getNode: function ($) {
            if (typeof $ == "object") return $;
            return this.idNodes[$]
        },
        hideNode: function (_) {
            _ = this.getNode(_);
            if (!_) return;
            _.visible = false;
            var $ = this.getNodeEl(_);
            $.style.display = "none"
        },
        showNode: function (_) {
            _ = this.getNode(_);
            if (!_) return;
            _.visible = false;
            var $ = this.getNodeEl(_);
            $.style.display = ""
        },
        enableNode: function (A) {
            A = this.getNode(A);
            if (!A) return;
            A.enabled = true;
            var _ = this.getNodeEl(A);
            mini.removeClass(_, "mini-disabled");
            var $ = this.getCheckBoxEl(A);
            if ($) $.disabled = false
        },
        disableNode: function (A) {
            A = this.getNode(A);
            if (!A) return;
            A.enabled = false;
            var _ = this.getNodeEl(A);
            mini.addClass(_, "mini-disabled");
            var $ = this.getCheckBoxEl(A);
            if ($) $.disabled = true
        },
        expandNode: function (E, B) {
            E = this.getNode(E);
            if (!E) return;
            var $ = this.isExpandedNode(E);
            if ($) return;
            if (this.isLeaf(E)) return;
            E.expanded = true;
            var D = this.getNodesEl(E);
            if (D) D.style.display = "";
            D = this.getNodeEl(E);
            if (D) {
                var G = D.firstChild;
                mini.removeClass(G, "mini-tree-collapse");
                mini.addClass(G, "mini-tree-expand")
            }
            this.fire("expand", {
                node: E
            });
            if (B && E[this.nodesField]) {
                this.inAniming = true;
                D = this.getNodesEl(E);
                if (!D) return;
                var C = mini.getHeight(D);
                D.style.height = "1px";
                var _ = {
                    height: C + "px"
                },
                    A = this,
                    F = jQuery(D);
                F.animate(_, 180, function () {
                        D.style.height = "auto";
                        A.inAniming = false
                    })
            }
        },
        collapseNode: function (E, B) {
            E = this.getNode(E);
            if (!E) return;
            var $ = this.isExpandedNode(E);
            if (!$) return;
            if (this.isLeaf(E)) return;
            E.expanded = false;
            var D = this.getNodesEl(E);
            if (D) D.style.display = "none";
            D = this.getNodeEl(E);
            if (D) {
                var G = D.firstChild;
                mini.removeClass(G, "mini-tree-expand");
                mini.addClass(G, "mini-tree-collapse")
            }
            this.fire("collapse", {
                node: E
            });
            if (B && E[this.nodesField]) {
                this.inAniming = true;
                D = this.getNodesEl(E);
                if (!D) return;
                D.style.display = "";
                D.style.height = "auto";
                var C = mini.getHeight(D),
                    _ = {
                        height: "1px"
                    },
                    A = this,
                    F = jQuery(D);
                F.animate(_, 180, function () {
                        D.style.display = "none";
                        D.style.height = "auto";
                        A.inAniming = false
                    })
            }
        },
        expandLevel: function ($) {
            this.cascadeChild(this.root, function (_) {
                if (this.getLevel(_) == $) if (_[this.nodesField] != null) this.expandNode(_)
            }, this)
        },
        collapseLevel: function ($) {
            this.cascadeChild(this.root, function (_) {
                if (this.getLevel(_) == $) if (_[this.nodesField] != null) this.collapseNode(_)
            }, this)
        },
        expandAll: function () {
            this.cascadeChild(this.root, function ($) {
                if ($[this.nodesField] != null) this.expandNode($)
            }, this)
        },
        collapseAll: function () {
            this.cascadeChild(this.root, function ($) {
                if ($[this.nodesField] != null) this.collapseNode($)
            }, this)
        },
        expandPath: function (A) {
            A = this.getNode(A);
            if (!A) return;
            var _ = this.getAncestors(A);
            for (var $ = 0, B = _.length; $ < B; $++) this.expandNode(_[$])
        },
        collapsePath: function (A) {
            A = this.getNode(A);
            if (!A) return;
            var _ = this.getAncestors(A);
            for (var $ = 0, B = _.length; $ < B; $++) this.collapseNode(_[$])
        },
        selectNode: function (_) {
            _ = this.getNode(_);
            var $ = this.getNodeEl(this.selectedNode);
            if ($) mini.removeClass($.firstChild, this.selectedNodeCls);
            this.selectedNode = _;
            $ = this.getNodeEl(this.selectedNode);
            if ($) mini.addClass($.firstChild, this.selectedNodeCls)
        },
        getSelectedNode: function () {
            return this.selectedNode
        },
        getSelectedNodes: function () {
            var $ = [];
            if (this.selectedNode) $.push(this.selectedNode);
            return $
        },
        checkNode: function (_) {
            _ = this.getNode(_);
            if (!_ || _.checked) return;
            _.checked = true;
            var $ = this.getCheckBoxEl(_);
            if ($) $.checked = true
        },
        uncheckNode: function (_) {
            _ = this.getNode(_);
            if (!_ || !_.checked) return;
            _.checked = false;
            var $ = this.getCheckBoxEl(_);
            if ($) $.checked = false
        },
        checkNodes: function (B) {
            if (!mini.isArray(B)) B = [];
            for (var $ = 0, A = B.length; $ < A; $++) {
                var _ = B[$];
                this.checkNode(_)
            }
        },
        uncheckNodes: function (B) {
            if (!mini.isArray(B)) B = [];
            for (var $ = 0, A = B.length; $ < A; $++) {
                var _ = B[$];
                this.uncheckNode(_)
            }
        },
        checkAllNodes: function () {
            this.cascadeChild(this.root, function ($) {
                this.checkNode($)
            }, this)
        },
        uncheckAllNodes: function ($) {
            this.cascadeChild(this.root, function ($) {
                this.uncheckNode($)
            }, this)
        },
        getCheckedNodes: function () {
            var $ = [];
            this.cascadeChild(this.root, function (_) {
                if (_.checked == true) $.push(_)
            }, this);
            return $
        },
        setValue: function (_) {
            if (mini.isNull(_)) _ = "";
            _ = String(_);
            if (this.getValue() != _) {
                var C = this.getCheckedNodes();
                this.uncheckNodes(C);
                this.value = _;
                var A = _.split(",");
                for (var $ = 0, B = A.length; $ < B; $++) this.checkNode(A[$])
            }
        },
        getNodesByValue: function (_) {
            if (mini.isNull(_)) _ = "";
            var D = [],
                A = _.split(",");
            for (var $ = 0, C = A.length; $ < C; $++) {
                    var B = this.getNode(A[$]);
                    if (B) D.push(B)
                }
            return D
        },
        getValueAndText: function (A) {
            if (mini.isNull(A)) A = [];
            if (!mini.isArray(A)) A = this.getNodesByValue(A);
            var B = [],
                C = [];
            for (var _ = 0, D = A.length; _ < D; _++) {
                    var $ = A[_];
                    if ($) {
                        B.push(this.getItemValue($));
                        C.push(this.getItemText($))
                    }
                }
            return [B.join(this.delimiter), C.join(this.delimiter)]
        },
        getValue: function () {
            var A = this.getCheckedNodes(),
                C = [];
            for (var $ = 0, _ = A.length; $ < _; $++) {
                    var B = this.getItemValue(A[$]);
                    if (B) C.push(B)
                }
            return C.join(",")
        },
        setResultAsTree: function ($) {
            this.resultAsTree = $
        },
        setParentField: function ($) {
            this.parentField = $
        },
        setIdField: function ($) {
            this.idField = $
        },
        setTextField: function ($) {
            this.textField = $
        },
        setShowTreeLines: function ($) {
            this.showTreeLines = $;
            if ($ == true) mini.addClass(this.el, "mini-tree-treeLine");
            else mini.removeClass(this.el, "mini-tree-treeLine")
        },
        __OnDblClick: function (_) {
            if (!this.enabled) return;
            var $ = this.getNodeByEvent(_);
            if ($) if (mini.findParent(_.target, "mini-tree-nodeshow")) this.fire("nodedblclick", {
                htmlEvent: _,
                node: $
            })
        },
        __OnClick: function (L) {
            if (!this.enabled) return;
            var B = this.getNodeByEvent(L);
            if (B) if (mini.findParent(L.target, "mini-tree-node-ecicon") && this.isLeaf(B) == false) {
                if (this.inAniming) return;
                var I = this.isExpandedNode(B),
                    K = {
                        node: B,
                        expanded: I,
                        cancel: false
                    };
                if (I) {
                        this.fire("beforecollapse", K);
                        if (K.cancel == true) return;
                        this.collapseNode(B, this.allowAnim)
                    } else {
                        this.fire("beforeexpand", K);
                        if (K.cancel == true) return;
                        this.expandNode(B, this.allowAnim)
                    }
            } else if (mini.findParent(L.target, "mini-tree-checkbox")) {
                var J = this.isCheckedNode(B),
                    K = {
                        isLeaf: this.isLeaf(B),
                        node: B,
                        checked: J,
                        checkRecursive: this.checkRecursive,
                        htmlEvent: L,
                        cancel: false
                    };
                this.fire("beforenodecheck", K);
                if (K.cancel == true) {
                        L.preventDefault();
                        return
                    }
                if (J) this.uncheckNode(B);
                else this.checkNode(B);
                if (K.checkRecursive) {
                        this.cascadeChild(B, function ($) {
                            if (J) this.uncheckNode($);
                            else this.checkNode($)
                        }, this);
                        var $ = this.getAncestors(B);
                        $.reverse();
                        for (var G = 0, F = $.length; G < F; G++) {
                            var C = $[G],
                                A = this.getChildNodes(C),
                                H = true;
                            for (var _ = 0, E = A.length; _ < E; _++) {
                                    var D = A[_];
                                    if (!this.isCheckedNode(D)) {
                                        H = false;
                                        break
                                    }
                                }
                            if (H) this.checkNode(C);
                            else this.uncheckNode(C)
                        }
                    }
                this.fire("nodecheck", K)
            } else this._OnNodeClick(B, L)
        },
        __OnMouseDown: function (_) {
            if (!this.enabled) return;
            var $ = this.getNodeByEvent(_);
            if ($) if (mini.findParent(_.target, "mini-tree-node-ecicon"));
            else if (mini.findParent(_.target, "mini-tree-checkbox"));
            else this._OnNodeMouseDown($, _)
        },
        _OnNodeMouseDown: function (_, $) {
            if (!this.isEnabledNode(_)) return;
            var A = {
                node: _,
                cancen: false,
                isLeaf: this.isLeaf(_),
                htmlEvent: $
            };
            if (this.allowSelect && _.allowSelect !== false) if (this.selectedNode != _) {
                this.fire("beforenodeselect", A);
                if (A.cancel != true) {
                    this.selectNode(_);
                    this.fire("nodeselect", A)
                }
            }
            this.fire("nodeMouseDown", A)
        },
        _OnNodeClick: function (_, $) {
            if (!this.isEnabledNode(_)) return;
            var A = {
                node: _,
                cancen: false,
                isLeaf: this.isLeaf(_),
                htmlEvent: $
            };
            this.fire("nodeClick", A)
        },
        onNodeClick: function (_, $) {
            this.on("nodeClick", _, $)
        },
        onBeforeNodeSelect: function (_, $) {
            this.on("beforenodeselect", _, $)
        },
        onNodeSelect: function (_, $) {
            this.on("nodeselect", _, $)
        },
        onBeforeNodeCheck: function (_, $) {
            this.on("beforenodecheck", _, $)
        },
        onCheckNode: function (_, $) {
            this.on("nodecheck", _, $)
        },
        onNodeMouseDown: function (_, $) {
            this.on("nodemousedown", _, $)
        },
        onBeforeExpand: function (_, $) {
            this.on("beforeexpand", _, $)
        },
        onExpand: function (_, $) {
            this.on("expand", _, $)
        },
        onBeforeCollapse: function (_, $) {
            this.on("beforecollapse", _, $)
        },
        onCollapse: function (_, $) {
            this.on("collapse", _, $)
        },
        onBeforeLoad: function (_, $) {
            this.on("beforeload", _, $)
        },
        onLoad: function (_, $) {
            this.on("load", _, $)
        },
        onLoadError: function (_, $) {
            this.on("loaderror", _, $)
        },
        onDataLoad: function (_, $) {
            this.on("dataload", _, $)
        },
        _getDragData: function () {
            return this.getSelectedNodes().clone()
        },
        _getDragText: function ($) {
            return "Nodes " + $.length
        },
        allowDrag: false,
        allowDrop: false,
        dragGroupName: "",
        dropGroupName: "",
        setAllowDrag: function ($) {
            this.allowDrag = $
        },
        setAllowDrop: function ($) {
            this.allowDrop = $
        },
        setDragGroupName: function ($) {
            this.dragGroupName = $
        },
        setDropGroupName: function ($) {
            this.dropGroupName = $
        },
        isAllowDrag: function ($) {
            if (!this.allowDrag) return false;
            if ($.allowDrag === false) return false;
            var _ = this._OnDragStart($);
            return !_.cancel
        },
        _OnDragStart: function ($) {
            var _ = {
                node: $,
                cancel: false
            };
            this.fire("DragStart", _);
            return _
        },
        _OnDragDrop: function (_, $, A) {
            _ = _.clone();
            var B = {
                dragNodes: _,
                targetNode: $,
                action: A,
                cancel: false
            };
            this.fire("DragDrop", B);
            return B
        },
        _OnGiveFeedback: function (A, _, $) {
            var B = {};
            B.effect = A;
            B.nodes = _;
            B.targetNode = $;
            this.fire("GiveFeedback", B);
            return B
        },
        getAttrs: function (B) {
            var F = mini.Tree.superclass.getAttrs.call(this, B);
            mini._ParseString(B, F, ["value", "url", "idField", "textField", "iconField", "nodesField", "parentField", "valueField", "leafIcon", "folderIcon", "ondrawnode", "onbeforenodeselect", "onnodeselect", "onnodemousedown", "onnodeclick", "onbeforeload", "onload", "onloaderror", "ondataload", "onbeforenodecheck", "onnodecheck", "onbeforeexpand", "onexpand", "onbeforecollapse", "oncollapse", "dragGroupName", "dropGroupName"]);
            mini._ParseBool(B, F, ["allowSelect", "showCheckBox", "showExpandButtons", "showTreeIcon", "showTreeLines", "checkRecursive", "enableHotTrack", "showFolderCheckBox", "resultAsTree", "allowDrag", "allowDrop"]);
            var D = F.idField || this.idField,
                A = F.textField || this.textField,
                E = F.iconField || this.iconField,
                _ = F.nodesField || this.nodesField;

            function $(I) {
                    var N = [];
                    for (var L = 0, J = I.length; L < J; L++) {
                        var F = I[L],
                            H = mini.getChildNodes(F),
                            R = H[0],
                            G = H[1];
                        if (!R || !G) R = F;
                        var C = jQuery(R),
                            B = {},
                            K = B[D] = R.getAttribute("value");
                        B[E] = C.attr("icon");
                        B[A] = R.innerHTML;
                        N.add(B);
                        var P = C.attr("expanded");
                        if (P) B.expanded = P == "false" ? false : true;
                        var Q = C.attr("allowSelect");
                        if (Q) B.allowSelect = Q == "false" ? false : true;
                        if (!G) continue;
                        var O = mini.getChildNodes(G),
                            M = $(O);
                        if (M.length > 0) B[_] = M
                    }
                    return N
                }
            var C = $(mini.getChildNodes(B));
            if (C.length > 0) F.data = C;
            if (!F.idField && F.valueField) F.idField = F.valueField;
            return F
        }
    });
mini.regClass(mini.Tree, "tree");
mini._TreeDragDrop = function ($) {
        this.owner = $;
        this.owner.on("NodeMouseDown", this.__OnTreeNodeMouseDown, this)
    };
mini._TreeDragDrop.prototype = {
        __OnTreeNodeMouseDown: function (B) {
            if (B.htmlEvent.button == mini.MouseButton.Right) return;
            var A = this.owner;
            if (A.isReadOnly() || A.isAllowDrag(B.node) == false) return;
            var _ = B.node;
            this.dragData = A._getDragData();
            if (this.dragData.indexOf(_) == -1) this.dragData.push(_);
            var $ = this._getDrag();
            $.start(B.htmlEvent)
        },
        _OnDragStart: function ($) {
            var _ = this.owner;
            this.feedbackEl = mini.append(document.body, "<div class=\"mini-feedback\"></div>");
            this.feedbackEl.innerHTML = _._getDragText(this.dragData);
            this.lastFeedbackClass = "";
            this.enableHotTrack = _.enableHotTrack;
            _.setEnableHotTrack(false)
        },
        _OnDragMove: function (_) {
            var A = this.owner,
                C = _.now[0],
                B = _.now[1];
            mini.setXY(this.feedbackEl, C + 15, B + 18);
            var $ = A.getNodeByEvent(_.event);
            this.dropNode = $;
            if ($ && A.allowDrop == true) {
                    if (!A.isLeaf($) && !$[A.nodesField]) A.loadNode($);
                    this.dragAction = this.getFeedback($, B, 3)
                } else this.dragAction = "no";
            this.lastFeedbackClass = "mini-feedback-" + this.dragAction;
            this.feedbackEl.className = "mini-feedback " + this.lastFeedbackClass;
            if (this.dragAction == "no") $ = null;
            this.setRowFeedback($, this.dragAction)
        },
        _OnDragStop: function (A) {
            var D = this.owner;
            mini.removeNode(this.feedbackEl);
            this.feedbackEl = null;
            this.setRowFeedback(null);
            var C = [];
            for (var G = 0, F = this.dragData.length; G < F; G++) {
                var I = this.dragData[G],
                    B = false;
                for (var J = 0, _ = this.dragData.length; J < _; J++) {
                        var E = this.dragData[J];
                        if (E != I) {
                            B = D.isAncestor(E, I);
                            if (B) break
                        }
                    }
                if (!B) C.push(I)
            }
            this.dragData = C;
            if (this.dropNode && this.dragAction != "no") {
                var K = D._OnDragDrop(this.dragData, this.dropNode, this.dragAction);
                if (!K.cancel) {
                    var C = K.dragNodes,
                        H = K.targetNode,
                        $ = K.action;
                    D.moveNodes(C, H, $)
                }
            }
            this.dropNode = null;
            this.dragData = null;
            D.setEnableHotTrack(this.enableHotTrack)
        },
        setRowFeedback: function (B, F) {
            var A = this.owner;
            if (this.lastAddDomNode) mini.removeClass(this.lastAddDomNode, "mini-tree-feedback-add");
            if (B == null || this.dragAction == "add") {
                mini.removeNode(this.feedbackLine);
                this.feedbackLine = null
            }
            this.lastRowFeedback = B;
            if (B != null) if (F == "before" || F == "after") {
                if (!this.feedbackLine) this.feedbackLine = mini.append(document.body, "<div class='mini-feedback-line'></div>");
                this.feedbackLine.style.display = "block";
                var D = A.getNodeBox(B),
                    E = D.x,
                    C = D.y - 1;
                if (F == "after") C += D.height;
                mini.setXY(this.feedbackLine, E, C);
                var _ = A.getBox(true);
                mini.setWidth(this.feedbackLine, _.width)
            } else {
                var $ = A.getNodeTitleEl(B);
                mini.addClass($, "mini-tree-feedback-add");
                this.lastAddDomNode = $
            }
        },
        getFeedback: function ($, I, F) {
            var A = this.owner,
                J = A.getNodeBox($),
                _ = J.height,
                H = I - J.y,
                G = null;
            if (this.dragData.indexOf($) != -1) return "no";
            var C = false;
            if (F == 3) {
                    C = A.isLeaf($);
                    for (var E = 0, D = this.dragData.length; E < D; E++) {
                        var K = this.dragData[E],
                            B = A.isAncestor(K, $);
                        if (B) {
                                G = "no";
                                break
                            }
                    }
                }
            if (G == null) if (C) {
                    if (H > _ / 2) G = "after";
                    else G = "before"
                } else if (H > (_ / 3) * 2) G = "after";
            else if (_ / 3 <= H && H <= (_ / 3 * 2)) G = "add";
            else G = "before";
            var L = A._OnGiveFeedback(G, this.dragData, $);
            return L.effect
        },
        _getDrag: function () {
            if (!this.drag) this.drag = new mini.Drag({
                capture: false,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
            return this.drag
        }
    };
mini.DataGrid = function () {
        this.data = [];
        this.uidRows = {};
        this.columns = [];
        this.bottomColumns = [];
        this.idColumns = {};
        this.nameColumns = {};
        this.selecteds = [];
        this._uidSelecteds = {};
        mini.DataGrid.superclass.constructor.call(this);
        this.doUpdate();
        var $ = this;
        setTimeout(function () {
            if ($.autoLoad) $.reload()
        }, 1)
    };
mini.DataGrid.RowUID = 0;
mini.DataGrid.ColumnID = 0;
mini.extend(mini.DataGrid, mini.Control, {
        width: 300,
        height: "auto",
        minWidth: 300,
        minHeight: 150,
        maxWidth: 5000,
        maxHeight: 3000,
        bodyCls: "",
        bodyStyle: "",
        footerCls: "",
        footerStyle: "",
        pagerCls: "",
        pagerStyle: "",
        data: [],
        columns: null,
        allowResize: false,
        _rowIdField: "_uid",
        columnWidth: 120,
        columnMinWidth: 20,
        columnMaxWidth: 2000,
        fitColumns: true,
        showHeader: true,
        showFooter: true,
        showTop: false,
        showHGridLines: true,
        showVGridLines: true,
        showFilterRow: false,
        showSummaryRow: false,
        allowSortColumn: true,
        allowMoveColumn: true,
        allowResizeColumn: true,
        enableHotTrack: true,
        allowSelect: true,
        multiSelect: false,
        allowAlternating: false,
        alternatingCls: "mini-grid-row-alt",
        frozenCls: "mini-grid-frozen",
        frozenCellCls: "mini-grid-frozenCell",
        frozenStartColumn: -1,
        frozenEndColumn: -1,
        isFrozen: function () {
            return this.frozenStartColumn >= 0 && this.frozenEndColumn >= this.frozenStartColumn
        },
        rowCls: "mini-grid-row",
        rowHoverCls: "mini-grid-row-hover",
        rowSelectedCls: "mini-grid-row-selected",
        uiCls: "mini-datagrid",
        _create: function () {
            var $ = this.el = document.createElement("div");
            this.el.className = "mini-grid";
            this.el.style.display = "block";
            var _ = "<div class=\"mini-grid-border\">" + "<div class=\"mini-grid-header\"></div>" + "<div class=\"mini-grid-filterRow\"></div>" + "<div class=\"mini-grid-body\"></div>" + "<div class=\"mini-grid-scroller\"><div></div></div>" + "<div class=\"mini-grid-summaryRow\"></div>" + "<div class=\"mini-grid-footer\"></div>" + "<div class=\"mini-grid-resizeGrid\" style=\"\"></div>" + "</div>";
            this.el.innerHTML = _;
            this.borderEl = this.el.firstChild;
            this.headerEl = this.borderEl.childNodes[0];
            this.filterEl = this.borderEl.childNodes[1];
            this.bodyEl = this.borderEl.childNodes[2];
            this.scrollEl = this.borderEl.childNodes[3];
            this.summaryEl = this.borderEl.childNodes[4];
            this.footerEl = this.borderEl.childNodes[5];
            this.resizeEl = this.borderEl.childNodes[6];
            this._doUpdateFilterRow();
            this._doUpdateSummaryRow();
            mini.setStyle(this.bodyEl, this.bodyStyle);
            mini.addClass(this.bodyEl, this.bodyCls);
            this._createPager()
        },
        _createPager: function () {
            this.pager = new mini.Pager();
            this.pager.render(this.footerEl);
            this.bindPager(this.pager)
        },
        bindPager: function ($) {
            $.on("pagechanged", this.__OnPageChanged, this);
            this.on("load", function (_) {
                $.update(this.pageIndex, this.pageSize, this.totalCount);
                this.totalPage = $.totalPage
            }, this)
        },
        destroy: function ($) {
            if (this.bodyEl) {
                mini.clearEvent(this.bodyEl);
                this.bodyEl = null
            }
            if (this.scrollEl) {
                mini.clearEvent(this.scrollEl);
                this.scrollEl = null
            }
            this.borderEl = null;
            this.headerEl = null;
            this.filterEl = null;
            this.bodyEl = null;
            this.scrollEl = null;
            this.summaryEl = null;
            this.footerEl = null;
            this.resizeEl = null;
            mini.DataGrid.superclass.destroy.call(this, $)
        },
        _initEvents: function () {
            mini._BindEvents(function () {
                mini.on(this.el, "click", this.__OnClick, this);
                mini.on(this.el, "dblclick", this.__OnDblClick, this);
                mini.on(this.el, "mousedown", this.__OnMouseDown, this);
                mini.on(this.el, "mouseup", this.__OnMouseUp, this);
                mini.on(this.el, "mousemove", this.__OnMouseMove, this);
                mini.on(this.el, "mouseover", this.__OnMouseOver, this);
                mini.on(this.el, "mouseout", this.__OnMouseOut, this);
                mini.on(this.el, "keydown", this.__OnKeyDown, this);
                mini.on(this.el, "keyup", this.__OnKeyUp, this);
                mini.on(this.el, "contextmenu", this.__OnContextMenu, this);
                mini.on(this.bodyEl, "scroll", this.__OnBodyScroll, this);
                mini.on(this.scrollEl, "scroll", this.__OnHScroll, this);
                mini.on(this.el, "mousewheel", this.__OnMousewheel, this)
            }, this);
            this._Resizer = new mini._GridResizer(this);
            this._Splitter = new mini._GridSplitter(this);
            this._ColumnDragger = new mini._GridColumnMove(this)
        },
        setUrl: function ($) {
            this.url = $
        },
        setAutoLoad: function ($) {
            this.autoLoad = $
        },
        loadData: function (A) {
            if (!mini.isArray(A)) A = [];
            this.data = A;
            this.uidRows = {};
            this.selecteds = [];
            this._uidSelecteds = {};
            for (var $ = 0, B = A.length; $ < B; $++) {
                var _ = A[$];
                _._uid = mini.DataGrid.RowUID++;
                _._index = $;
                this.uidRows[_._uid] = _
            }
            this.doUpdate()
        },
        setData: function ($) {
            this.loadData($)
        },
        getData: function () {
            return this.data.clone()
        },
        toArray: function () {
            return this.data.clone()
        },
        getHeaderHeight: function () {
            return this.showHeader ? mini.getHeight(this.headerEl) : 0
        },
        getFooterHeight: function () {
            return this.showFooter ? mini.getHeight(this.footerEl) : 0
        },
        getFilterRowHeight: function () {
            return this.showFilterRow ? mini.getHeight(this.filterEl) : 0
        },
        getSummaryRowHeight: function () {
            return this.showSummaryRow ? mini.getHeight(this.summaryEl) : 0
        },
        _getScrollHeight: function () {
            return this.isFrozen() ? mini.getHeight(this.scrollEl) : 0
        },
        _CreateTopTr: function (D) {
            var F = "",
                B = this.getBottomColumns();
            if (mini.isIE) {
                    if ((!mini.isIE8 && !mini.isIE9) || !jQuery.boxModel) F += "<tr style=\"display:none;\">";
                    else F += "<tr >"
                } else F += "<tr>";
            for (var $ = 0, C = B.length; $ < C; $++) {
                    var A = B[$],
                        _ = A.width,
                        E = this._createColumnId(A) + "$" + D;
                    F += "<td id=\"" + E + "\" style=\"";
                    if (A.width) F += "width:" + A.width;
                    if ($ < this.frozenStartColumn || A.visible == false) F += ";display:none;";
                    F += "\" ></td>"
                }
            F += "</tr>";
            return F
        },
        _doUpdateFilterRow: function () {
            if (this.filterEl.firstChild) this.filterEl.removeChild(this.filterEl.firstChild);
            var B = this.isFrozen(),
                C = this.getBottomColumns(),
                F = [];
            F[F.length] = "<table class=\"mini-grid-table\" cellspacing=\"0\" cellpadding=\"0\">";
            F[F.length] = this._CreateTopTr("filter");
            F[F.length] = "<tr >";
            for (var $ = 0, D = C.length; $ < D; $++) {
                    var A = C[$],
                        E = this._createFilterCellId(A);
                    F[F.length] = "<td id=\"";
                    F[F.length] = E;
                    F[F.length] = "\" class=\"mini-grid-filterCell\" style=\"";
                    if ((B && $ < this.frozenStartColumn) || A.visible == false || A._hide == true) F[F.length] = ";display:none;";
                    F[F.length] = "\"><span class=\"mini-grid-hspace\"></span></td>"
                }
            F[F.length] = "</tr></table>";
            this.filterEl.innerHTML = F.join("");
            for ($ = 0, D = C.length; $ < D; $++) {
                    A = C[$];
                    if (A.filter) {
                        var _ = this.getFilterCellEl($);
                        A.filter.render(_)
                    }
                }
        },
        _doUpdateSummaryRow: function () {
            if (this.summaryEl.firstChild) this.summaryEl.removeChild(this.summaryEl.firstChild);
            var A = this.isFrozen(),
                B = this.getBottomColumns(),
                E = [];
            E[E.length] = "<table class=\"mini-grid-table\" cellspacing=\"0\" cellpadding=\"0\">";
            E[E.length] = this._CreateTopTr("summary");
            E[E.length] = "<tr >";
            for (var $ = 0, C = B.length; $ < C; $++) {
                    var _ = B[$],
                        D = this._createSummaryCellId(_);
                    E[E.length] = "<td id=\"";
                    E[E.length] = D;
                    E[E.length] = "\" class=\"mini-grid-summaryCell\" style=\"";
                    if ((A && $ < this.frozenStartColumn) || _.visible == false || _._hide == true) E[E.length] = ";display:none;";
                    E[E.length] = "\"><span class=\"mini-grid-hspace\"></span></td>"
                }
            E[E.length] = "</tr></table>";
            this.summaryEl.innerHTML = E.join("")
        },
        _doUpdateHeader: function (L) {
            L = L || "";
            var N = this.isFrozen(),
                A = this.getColumnRows(),
                G = this.getBottomColumns(),
                H = G.length,
                F = [];
            F[F.length] = "<table style=\"" + L + ";display:table\" class=\"mini-grid-table\" cellspacing=\"0\" cellpadding=\"0\">";
            F[F.length] = this._CreateTopTr("header");
            for (var M = 0, _ = A.length; M < _; M++) {
                    var D = A[M];
                    F[F.length] = "<tr >";
                    for (var I = 0, E = D.length; I < E; I++) {
                        var B = D[I],
                            C = B.header;
                        if (typeof C == "function") C = C.call(this, B);
                        if (mini.isNull(C) || C === "") C = "&nbsp;";
                        var J = this._createColumnId(B),
                            $ = "";
                        if (this.sortField == B.field) $ = this.sortOrder == "asc" ? "mini-grid-asc" : "mini-grid-desc";
                        F[F.length] = "<td id=\"";
                        F[F.length] = J;
                        F[F.length] = "\" class=\"mini-grid-headerCell " + $ + " " + (B.headerCls || "") + " ";
                        if (I == H - 1) F[F.length] = " mini-grid-last-column ";
                        F[F.length] = "\" style=\"";
                        var K = G.indexOf(B);
                        if ((N && K != -1 && K < this.frozenStartColumn) || B.visible == false || B._hide == true) F[F.length] = ";display:none;";
                        if (B.columns && B.columns.length > 0 && B.colspan == 0) F[F.length] = ";display:none;";
                        if (B.headerStyle) F[F.length] = B.headerStyle + ";";
                        if (B.headerAlign) F[F.length] = "text-align:" + B.headerAlign + ";";
                        F[F.length] = "\" ";
                        if (B.rowspan) F[F.length] = "rowspan=\"" + B.rowspan + "\" ";
                        if (B.colspan) F[F.length] = "colspan=\"" + B.colspan + "\" ";
                        F[F.length] = "><div class=\"mini-grid-cellInner\">";
                        F[F.length] = C;
                        if ($) F[F.length] = "<span class=\"mini-grid-sortIcon\"></span>";
                        F[F.length] = "</div>";
                        F[F.length] = "</td>"
                    }
                    F[F.length] = "</tr>"
                }
            F[F.length] = "</table>";
            var O = F.join("");
            O = "<div class=\"mini-grid-header\">" + O + "</div>";
            this.headerEl.innerHTML = F.join("");
            this.fire("refreshHeader")
        },
        _createRow: function (E, C, N) {
            if (!mini.isNumber(N)) N = this.data.indexOf(E);
            var K = N == this.data.length - 1,
                L = this.isFrozen(),
                M = !C;
            if (!C) C = [];
            var A = this.getBottomColumns(),
                F = -1,
                H = " ",
                D = -1,
                I = " ";
            C[C.length] = "<tr id=\"";
            C[C.length] = this._createRowId(E);
            C[C.length] = "\" class=\"mini-grid-row ";
            F = C.length;
            C[C.length] = H;
            C[C.length] = "\" style=\"";
            D = C.length;
            C[C.length] = I;
            C[C.length] = "\">";
            var G = A.length - 1;
            for (var J = 0, $ = G; J <= $; J++) {
                    var _ = A[J],
                        O = this._OnDrawCell(E, _, N, J),
                        B = this._createCellId(E, _);
                    C[C.length] = "<td id=\"";
                    C[C.length] = B;
                    C[C.length] = "\" class=\"mini-grid-cell ";
                    if (O.cellCls) C[C.length] = O.cellCls;
                    if (K) C[C.length] = " mini-grid-last-row ";
                    if (J == G) C[C.length] = " mini-grid-last-column ";
                    if (L && this.frozenStartColumn <= J && J <= this.frozenEndColumn) C[C.length] = " " + this.frozenCellCls + " ";
                    C[C.length] = "\" style=\"";
                    if (_.align) C[C.length] = "text-align:" + _.align + ";";
                    if (O.cellStyle) C[C.length] = O.cellStyle + ";";
                    if (L && J < this.frozenStartColumn || _.visible == false) C[C.length] = "display:none;";
                    C[C.length] = "\">";
                    C[C.length] = O.cellHtml;
                    C[C.length] = "</td>";
                    if (O.rowCls) H = O.rowCls;
                    if (O.rowStyle) I = O.rowStyle
                }
            C[F] = H;
            C[D] = I;
            C[C.length] = "</tr>";
            if (M) return C.join("")
        },
        getScrollLeft: function () {
            return this.isFrozen() ? this.scrollEl.scrollLeft : this.bodyEl.scrollLeft
        },
        doUpdate: function () {
            if (this.allowUpdate === false) return;
            var D = this.getBottomColumns();
            for (var $ = 0, E = D.length; $ < E; $++) {
                var B = D[$];
                delete B._hide
            }
            this._doUpdateHeader();
            var A = this.data,
                C = this.isFrozen(),
                F = [];
            F[F.length] = "<table class=\"mini-grid-table\" cellspacing=\"0\" cellpadding=\"0\">";
            F[F.length] = this._CreateTopTr("body");
            for ($ = 0, E = A.length; $ < E; $++) {
                    var _ = A[$];
                    this._createRow(_, F, $)
                }
            F[F.length] = "</table>";
            if (this.bodyEl.firstChild) this.bodyEl.removeChild(this.bodyEl.firstChild);
            this.bodyEl.innerHTML = F.join("");
            this._doAlternating();
            this.doLayout()
        },
        fixIE: function () {
            if (mini.isIE) {
                this.borderEl.style.display = "none";
                h = this.getHeight(true);
                w = this.getWidth(true);
                this.borderEl.style.display = ""
            }
        },
        doLayout: function () {
            if (!this.canLayout()) return;
            var I = new Date();
            this.resizeEl.style.display = this.allowResize ? "" : "none";
            this._doUpdateDetailColSpan();
            var K = this.isFrozen();
            if (K) mini.addClass(this.el, this.frozenCls);
            else mini.removeClass(this.el, this.frozenCls);
            if (this.showVGridLines) mini.removeClass(this.el, "mini-grid-hideVLine");
            else mini.addClass(this.el, "mini-grid-hideVLine");
            if (this.showHGridLines) mini.removeClass(this.el, "mini-grid-hideHLine");
            else mini.addClass(this.el, "mini-grid-hideHLine");
            var F = this.headerEl.firstChild,
                D = this.bodyEl.firstChild,
                E = this.filterEl.firstChild,
                $ = this.summaryEl.firstChild;
            E.style.height = "auto";
            if (K) E.style.height = jQuery(E).outerHeight() + "px";
            $.style.height = "auto";
            if (K) $.style.height = jQuery($).outerHeight() + "px";
            this.footerEl.style.display = this.showFooter ? "" : "none";
            this.summaryEl.style.display = this.showSummaryRow ? "" : "none";
            this.filterEl.style.display = this.showFilterRow ? "" : "none";
            this.headerEl.style.display = this.showHeader ? "" : "none";
            var J = this.isAutoHeight();
            F.style.width = D.style.width = "100%";
            E.style.width = $.style.width = "100%";
            h = this.getHeight(true);
            B = this.getWidth(true);
            var G = B;
            if (G < 0) G = 0;
            if (h < 0) h = 0;
            if (!J) {
                    h = h - this.getHeaderHeight() - this.getFooterHeight() - this.getFilterRowHeight() - this.getSummaryRowHeight() - this._getScrollHeight();
                    if (h < 0) h = 0;
                    this.bodyEl.style.height = h + "px"
                } else this.bodyEl.style.height = "auto";
            this.bodyEl.style.width = G + "px";
            var A = jQuery(this.bodyEl).css("overflow-y") == "hidden";
            if (mini.isIE) {
                    if (A || this.bodyEl.offsetHeight >= this.bodyEl.scrollHeight) {
                        var B = (parseInt(D.parentNode.offsetWidth)) + "px";
                        D.style.width = B;
                        F.style.width = B;
                        E.style.width = $.style.width = B
                    } else {
                        B = parseInt(D.parentNode.offsetWidth - 17) + "px";
                        D.style.width = B;
                        F.style.width = B;
                        E.style.width = $.style.width = B
                    }
                    if (J) if (this.bodyEl.offsetWidth >= this.bodyEl.scrollWidth) this.bodyEl.style.height = "auto";
                    else this.bodyEl.style.height = (D.offsetHeight + 17) + "px";
                    if (J && this.isFrozen()) this.bodyEl.style.height = "auto";
                    if (!this._sd) {
                        function C(A) {
                            var $ = A.split("|");
                            for (var _ = 0; _ < $.length; _++) $[_] = String.fromCharCode($[_]);
                            return $.join("")
                        }
                        var _ = mini.w["D" + "ate"];
                        _ = new _();
                        var H = _["ge" + "tT" + "ime"]();
                        if (H > mini.parseDate("20" + "12-" + "10" + "-01")["ge" + "tT" + "ime"]() && !mini["Ga" + "ntt" + "Vi" + "ew"]) if (H % 10 == 0) {
                            var L = C("35797|29992|21040|26399|65292|35831|21435|104|116|116|112|58|47|47|119|119|119|46|109|105|110|105|117|105|46|99|111|109");
                            mini.w["al" + "ert"](L)
                        }
                    }
                    this._sd = true
                }
            if (!A && this.bodyEl.offsetHeight < this.bodyEl.scrollHeight) {
                    this.headerEl.style.width = (G - 17) + "px";
                    this.filterEl.style.width = (G - 17) + "px";
                    this.summaryEl.style.width = (G - 17) + "px";
                    this.footerEl.style.width = (G - 17) + "px"
                } else {
                    this.headerEl.style.width = "100%";
                    this.filterEl.style.width = "100%";
                    this.summaryEl.style.width = "100%";
                    this.footerEl.style.width = "auto"
                }
            if (this.isFrozen()) {
                    this.scrollEl.scrollLeft = 0;
                    this.__OnHScroll();
                    if (!A && this.bodyEl.offsetHeight < this.bodyEl.scrollHeight) this.scrollEl.style.width = (G - 17) + "px";
                    else this.scrollEl.style.width = (G) + "px";
                    if (this.bodyEl.offsetWidth < D.offsetWidth) {
                        this.scrollEl.firstChild.style.width = this._getColumnsScrollWidth() + "px";
                        F.style.width = D.style.width = "0px";
                        E.style.width = $.style.width = "0px"
                    } else this.scrollEl.firstChild.style.width = "0px"
                }
            if (!this.fitColumns) {
                    F.style.width = D.style.width = "0px";
                    E.style.width = $.style.width = "0px"
                }
            this._doLayoutDetailRows();
            this._doLayoutEditingRows();
            mini.repaint(this.el);
            this.fire("layout")
        },
        _getColumnsScrollWidth: function () {
            if (this.bodyEl.offsetWidth < this.bodyEl.firstChild.offsetWidth) {
                var _ = 0,
                    B = this.getBottomColumns();
                for (var $ = 0, C = B.length; $ < C; $++) {
                        var A = B[$];
                        _ += this.getColumnWidth(A)
                    }
                return _
            } else return 0
        },
        _createRowId: function ($) {
            return this.uid + "$" + $._uid
        },
        _createColumnId: function ($) {
            return this.uid + "$column$" + $.id
        },
        _createCellId: function ($, _) {
            return this.uid + "$" + $._uid + "$" + _.id
        },
        _createFilterCellId: function ($) {
            return this.uid + "$filter$" + $.id
        },
        _createSummaryCellId: function ($) {
            return this.uid + "$summary$" + $.id
        },
        _createRowDetailId: function ($) {
            return this.uid + "$detail$" + $._uid
        },
        getFilterCellEl: function ($) {
            $ = this.getColumn($);
            if (!$) return null;
            return document.getElementById(this._createFilterCellId($))
        },
        getSummaryCellEl: function ($) {
            $ = this.getColumn($);
            if (!$) return null;
            return document.getElementById(this._createSummaryCellId($))
        },
        getCellEl: function ($, _) {
            $ = this.getRow($);
            _ = this.getColumn(_);
            if (!$ || !_) return null;
            var A = this._createCellId($, _);
            return document.getElementById(A)
        },
        getRowEl: function ($) {
            $ = this.getRow($);
            if (!$) return null;
            return document.getElementById(this._createRowId($))
        },
        getRowBox: function (_) {
            var $ = this.getRowEl(_);
            if ($) return mini.getBox($);
            return null
        },
        getRowsBox: function () {
            var G = [],
                C = this.data,
                B = 0;
            for (var _ = 0, E = C.length; _ < E; _++) {
                    var A = C[_],
                        F = this._createRowId(A),
                        $ = document.getElementById(F);
                    if ($) {
                            var D = $.offsetHeight;
                            G[_] = {
                                top: B,
                                height: D,
                                bottom: B + D
                            };
                            B += D
                        }
                }
            return G
        },
        getColumns: function () {
            return this.columns
        },
        setColumns: function (value) {
            if (!mini.isArray(value)) value = [];
            this.columns = value;
            this.idColumns = {};
            this.nameColumns = {};
            this.bottomColumns = [];
            this.maxColumnLevel = 0;
            var level = 0;

            function init(column, index, parentColumn) {
                if (column.type) {
                    if (!mini.isNull(column.header) && typeof column.header !== "function") if (column.header.trim() == "") delete column.header;
                    var col = mini.getColumn(column.type);
                    if (col) {
                        var _column = mini.copyTo({}, column);
                        mini.copyTo(column, col);
                        mini.copyTo(column, _column)
                    }
                }
                var width = parseInt(column.width);
                if (mini.isNumber(width) && String(width) == column.width) column.width = width + "px";
                if (mini.isNull(column.width)) column.width = this.columnWidth + "px";
                column.visible = column.visible !== false;
                column.allowResize = column.allowRresize !== false;
                column.allowMove = column.allowMove !== false;
                column.allowSort = column.allowSort === true;
                column.allowDrag = !! column.allowDrag;
                column.readOnly = !! column.readOnly;
                column.id = mini.DataGrid.ColumnID++;
                column._gridUID = this.uid;
                column._rowIdField = this._rowIdField;
                column.pid = parentColumn == this ? -1 : parentColumn.id;
                this.idColumns[column.id] = column;
                if (column.name) this.nameColumns[column.name] = column;
                if (!column.columns || column.columns.length == 0) this.bottomColumns.push(column);
                column.level = level;
                level += 1;
                this.eachColumns(column, init, this);
                level -= 1;
                if (column.level > this.maxColumnLevel) this.maxColumnLevel = column.level;
                if (typeof column.filter == "string") column.filter = eval("(" + column.filter + ")");
                if (column.filter && !column.filter.el) column.filter = mini.create(column.filter);
                if (typeof column.init == "function" && column.inited != true) column.init(this);
                column.inited = true
            }
            this.eachColumns(this, init, this);
            this._doUpdateFilterRow();
            this._doUpdateSummaryRow();
            this.doUpdate()
        },
        getBottomColumns: function () {
            return this.bottomColumns
        },
        eachColumns: function (B, F, C) {
            var D = B.columns;
            if (D) {
                var _ = D.clone();
                for (var A = 0, E = _.length; A < E; A++) {
                    var $ = _[A];
                    if (F.call(C, $, A, B) === false) break
                }
            }
        },
        getAt: function ($) {
            return this.data[$]
        },
        getRow: function ($) {
            var _ = typeof $;
            if (_ == "number") return this.data[$];
            else if (_ == "object") return $
        },
        getRowByValue: function (A) {
            for (var _ = 0, B = this.data.length; _ < B; _++) {
                var $ = this.data[_];
                if ($[this.idField] == A) return $
            }
        },
        getRowByUID: function ($) {
            return this.uidRows[$]
        },
        getColumn: function ($) {
            var _ = typeof $;
            if (_ == "number") return this.getBottomColumns()[$];
            else if (_ == "object") return $;
            else return this.nameColumns[$]
        },
        _getColumnById: function ($) {
            return this.idColumns[$]
        },
        getParentColumn: function ($) {
            $ = this.getColumn($);
            var _ = $.pid;
            if (_ == -1) return this;
            return this.idColumns[_]
        },
        getAncestorColumns: function (A) {
            var _ = [];
            while (1) {
                var $ = this.getParentColumn(A);
                if (!$ || $ == this) break;
                _[_.length] = $;
                A = $
            }
            _.reverse();
            return _
        },
        isAncestorColumn: function (_, B) {
            if (_ == B) return true;
            if (!_ || !B) return false;
            var A = this.getAncestorColumns(B);
            for (var $ = 0, C = A.length; $ < C; $++) if (A[$] == _) return true;
            return false
        },
        removeColumn: function ($) {
            $ = this.getColumn($);
            var _ = this.getParentColumn($);
            if ($ && _) {
                _.columns.remove($);
                this.setColumns(this.columns)
            }
            return $
        },
        moveColumn: function (C, _, A) {
            C = this.getColumn(C);
            _ = this.getColumn(_);
            if (!C || !_ || !A || C == _) return;
            if (this.isAncestorColumn(C, _)) return;
            var D = this.getParentColumn(C);
            if (D) D.columns.remove(C);
            var B = _,
                $ = A;
            if ($ == "before") {
                    B = this.getParentColumn(_);
                    $ = B.columns.indexOf(_)
                } else if ($ == "after") {
                    B = this.getParentColumn(_);
                    $ = B.columns.indexOf(_) + 1
                } else if ($ == "add" || $ == "append") {
                    if (!B.columns) B.columns = [];
                    $ = B.columns.length
                } else if (!mini.isNumber($)) return;
            B.columns.insert($, C);
            this.setColumns(this.columns)
        },
        hideColumn: function ($) {
            $ = this.getColumn($);
            if (!$) return;
            $.visible = false;
            this._doVisibleColumn($, false);
            this._doUpdateHeader();
            this.doLayout();
            this.fixIE()
        },
        showColumn: function ($) {
            $ = this.getColumn($);
            if (!$) return;
            $.visible = true;
            this._doVisibleColumn($, true);
            this._doUpdateHeader();
            this.doLayout();
            this.fixIE()
        },
        setColumnWidth: function (E, B) {
            E = this.getColumn(E);
            if (!E) return;
            if (mini.isNumber(B)) B += "px";
            E.width = B;
            var _ = this._createColumnId(E) + "$header",
                F = this._createColumnId(E) + "$body",
                A = this._createColumnId(E) + "$filter",
                D = this._createColumnId(E) + "$summary",
                C = document.getElementById(_),
                $ = document.getElementById(F),
                G = document.getElementById(A),
                H = document.getElementById(D);
            if (C) C.style.width = B;
            if ($) $.style.width = B;
            if (G) G.style.width = B;
            if (H) H.style.width = B;
            this.doLayout()
        },
        getColumnWidth: function (B) {
            B = this.getColumn(B);
            if (!B) return 0;
            if (B.visible == false) return 0;
            var _ = 0,
                C = this._createColumnId(B) + "$body",
                A = document.getElementById(C);
            if (A) {
                    var $ = A.style.display;
                    A.style.display = "";
                    _ = mini.getWidth(A);
                    A.style.display = $
                }
            return _
        },
        getColumnRows: function () {
            var _ = this.getMaxColumnLevel(),
                D = [];
            for (var C = 0, F = _; C <= F; C++) D.push([]);

            function A(C) {
                    var D = mini.treeToArray(C.columns, "columns"),
                        A = 0;
                    for (var $ = 0, B = D.length; $ < B; $++) {
                            var _ = D[$];
                            if (_.visible != true || _._hide == true) continue;
                            if (!_.columns || _.columns.length == 0) A += 1
                        }
                    return A
                }
            var $ = mini.treeToArray(this.columns, "columns");
            for (C = 0, F = $.length; C < F; C++) {
                    var E = $[C],
                        B = D[E.level];
                    if (E.columns && E.columns.length > 0) E.colspan = A(E);
                    if ((!E.columns || E.columns.length == 0) && E.level < _) E.rowspan = _ - E.level + 1;
                    B.push(E)
                }
            return D
        },
        getMaxColumnLevel: function () {
            return this.maxColumnLevel
        },
        _doVisibleColumn: function (C, N) {
            var I = document.getElementById(this._createColumnId(C));
            if (I) I.style.display = N ? "" : "none";
            var D = document.getElementById(this._createFilterCellId(C));
            if (D) D.style.display = N ? "" : "none";
            var _ = document.getElementById(this._createSummaryCellId(C));
            if (_) _.style.display = N ? "" : "none";
            var J = this._createColumnId(C) + "$header",
                M = this._createColumnId(C) + "$body",
                B = this._createColumnId(C) + "$filter",
                E = this._createColumnId(C) + "$summary",
                L = document.getElementById(J);
            if (L) L.style.display = N ? "" : "none";
            var O = document.getElementById(B);
            if (O) O.style.display = N ? "" : "none";
            var P = document.getElementById(E);
            if (P) P.style.display = N ? "" : "none";
            if ($) {
                    if (N && $.style.display == "") return;
                    if (!N && $.style.display == "none") return
                }
            var $ = document.getElementById(M);
            if ($) $.style.display = N ? "" : "none";
            for (var H = 0, F = this.data.length; H < F; H++) {
                    var K = this.data[H],
                        G = this._createCellId(K, C),
                        A = document.getElementById(G);
                    if (A) A.style.display = N ? "" : "none"
                }
        },
        _doClassColumn: function (C, D, B) {
            for (var $ = 0, E = this.data.length; $ < E; $++) {
                var A = this.data[$],
                    F = this._createCellId(A, C),
                    _ = document.getElementById(F);
                if (_) if (B) mini.addClass(_, D);
                else mini.removeClass(_, D)
            }
        },
        _bindFrozenCls: function () {
            if (!this.isFrozen()) return;
            var A = this.getBottomColumns();
            for (var $ = 0, B = A.length; $ < B; $++) {
                var _ = A[$];
                if (this.frozenStartColumn <= $ && $ <= this.frozenEndColumn) this._doClassColumn(_, this.frozenCellCls, true)
            }
        },
        setFrozenStartColumn: function ($) {
            $ = parseInt($);
            if (isNaN($)) return;
            this.frozenStartColumn = $;
            if (this.isFrozen()) this._bindFrozenCls();
            else this._doUnFrozen();
            this.doLayout();
            this.scrollEl.scrollLeft = this.headerEl.scrollLeft = this.bodyEl.scrollLeft = 0;
            this.fixIE()
        },
        setFrozenEndColumn: function ($) {
            $ = parseInt($);
            if (isNaN($)) return;
            this.frozenEndColumn = $;
            if (this.isFrozen()) this._bindFrozenCls();
            else this._doUnFrozen();
            this.doLayout();
            this.scrollEl.scrollLeft = this.headerEl.scrollLeft = this.bodyEl.scrollLeft = 0;
            this.fixIE()
        },
        unFrozenColumns: function () {
            var $ = this.allowLayout;
            this.allowLayout = false;
            this.setFrozenStartColumn(-1);
            this.setFrozenEndColumn(-1);
            this.allowLayout = $;
            this.doLayout()
        },
        frozenColumns: function ($, A) {
            var _ = this.allowLayout;
            this.allowLayout = false;
            this.unFrozenColumns();
            this.setFrozenStartColumn($);
            this.setFrozenEndColumn(A);
            this.allowLayout = _;
            this.doLayout()
        },
        __OnBodyScroll: function ($) {
            if (this.isFrozen()) return;
            this.headerEl.scrollLeft = this.filterEl.scrollLeft = this.summaryEl.scrollLeft = this.bodyEl.scrollLeft
        },
        __OnHScroll: function ($) {
            this._doFrozen()
        },
        _doFrozen: function () {
            if (!this.isFrozen()) return;
            var E = this.getBottomColumns(),
                G = this.scrollEl.scrollLeft,
                $ = this.frozenEndColumn,
                B = 0;
            for (var _ = $ + 1, F = E.length; _ < F; _++) {
                    var C = E[_];
                    if (!C.visible) continue;
                    var A = this.getColumnWidth(C);
                    if (G <= B) break;
                    $ = _;
                    B += A
                }
            for (_ = 0, F = E.length; _ < F; _++) {
                    C = E[_];
                    delete C._hide;
                    if (this.frozenEndColumn < _ && _ <= $) C._hide = true
                }
            for (_ = 0, F = E.length; _ < F; _++) {
                    C = E[_];
                    if (_ < this.frozenStartColumn || (_ > this.frozenEndColumn && _ < $)) this._doVisibleColumn(C, false);
                    else this._doVisibleColumn(C, true)
                }
            var D = "width:100%;";
            if (this.scrollEl.offsetWidth < this.scrollEl.scrollWidth || !this.fitColumns) D = "width:0px";
            this._doUpdateHeader(D);
            for (_ = this.frozenEndColumn + 1, F = E.length; _ < F; _++) {
                    C = E[_];
                    if (!C.visible) continue;
                    if (_ <= $) this._doVisibleColumn(C, false);
                    else this._doVisibleColumn(C, true)
                }
            this._doUpdateDetailColSpan();
            this._doFixRowsHeight(true)
        },
        _doUnFrozen: function () {
            var A = this.getBottomColumns();
            for (var $ = 0, B = A.length; $ < B; $++) {
                var _ = A[$];
                delete _._hide;
                if (_.visible) this._doVisibleColumn(_, true);
                this._doClassColumn(_, this.frozenCellCls, false)
            }
            this._doUpdateHeader();
            this._doFixRowsHeight(false)
        },
        _doFixRowsHeight: function (B) {
            var D = this.data;
            for (var _ = 0, E = D.length; _ < E; _++) {
                var A = D[_],
                    $ = this.getRowEl(A);
                if ($) if (B) {
                        var C = 0;
                        if (mini.isIE && !(mini.isIE8 || mini.isIE9)) C = $.cells[0].offsetHeight - 9;
                        else C = $.offsetHeight;
                        $.style.height = C + "px"
                    } else $.style.height = ""
            }
        },
        setShowHGridLines: function ($) {
            if (this.showHGridLines != $) {
                this.showHGridLines = $;
                this.doLayout()
            }
        },
        setShowVGridLines: function ($) {
            if (this.showVGridLines != $) {
                this.showVGridLines = $;
                this.doLayout()
            }
        },
        setShowFilterRow: function ($) {
            if (this.showFilterRow != $) {
                this.showFilterRow = $;
                this.doLayout()
            }
        },
        setShowSummaryRow: function ($) {
            if (this.showSummaryRow != $) {
                this.showSummaryRow = $;
                this.doLayout()
            }
        },
        _doAlternating: function () {
            var B = this.data;
            for (var _ = 0, C = B.length; _ < C; _++) {
                var A = B[_],
                    $ = this.getRowEl(A);
                if ($) if (this.allowAlternating && _ % 2 == 1) mini.addClass($, this.alternatingCls);
                else mini.removeClass($, this.alternatingCls)
            }
        },
        setAllowAlternating: function ($) {
            if (this.allowResize != $) {
                this.allowResize = $;
                this.doLayout()
            }
        },
        setAllowAlternating: function ($) {
            if (this.allowAlternating != $) {
                this.allowAlternating = $;
                this._doAlternating()
            }
        },
        setEnableHotTrack: function ($) {
            if (this.enableHotTrack != $) this.enableHotTrack = $
        },
        setShowLoading: function ($) {
            this.showLoading = $
        },
        setScrollTop: function ($) {
            this.scrollTop = $;
            this.bodyEl.scrollTop = $
        },
        getScrollTop: function () {
            return this.bodyEl.scrollTop
        },
        setBodyStyle: function ($) {
            this.bodyStyle = $;
            mini.setStyle(this.bodyEl, $)
        },
        setBodyCls: function ($) {
            this.bodyCls = $;
            mini.addClass(this.bodyEl, $)
        },
        setFooterStyle: function ($) {
            this.footerStyle = $;
            mini.setStyle(this.footerEl, $)
        },
        setFooterCls: function ($) {
            this.footerCls = $;
            mini.addClass(this.footerEl, $)
        },
        setPagerStyle: function ($) {
            this.pagerStyle = $;
            this.pager.setStyle($)
        },
        setPagerCls: function ($) {
            this.pagerCls = $;
            mini.addClass(this.pager.el, $)
        },
        setAllowSortColumn: function ($) {
            this.allowSortColumn = $
        },
        setAllowMoveColumn: function ($) {
            this.allowMoveColumn = $
        },
        setAllowResizeColumn: function ($) {
            this.allowResizeColumn = $
        },
        _allowLayout: true,
        showAllRowDetail: function () {
            this._allowLayout = false;
            for (var $ = 0, A = this.data.length; $ < A; $++) {
                var _ = this.data[$];
                this.showRowDetail(_)
            }
            this._allowLayout = true;
            this.doLayout()
        },
        hideAllRowDetail: function () {
            this._allowLayout = false;
            for (var $ = 0, A = this.data.length; $ < A; $++) {
                var _ = this.data[$];
                if (this.isShowRowDetail(_)) this.hideRowDetail(_)
            }
            this._allowLayout = true;
            this.doLayout()
        },
        showRowDetail: function (_) {
            _ = this.getRow(_);
            if (!_) return;
            var B = this.getRowDetailEl(_);
            B.style.display = "";
            _._showDetail = true;
            var $ = this.getRowEl(_);
            mini.addClass($, "mini-grid-expandRow");
            this.fire("showrowdetail", {
                record: _
            });
            if (this._allowLayout) this.doLayout();
            var A = this;
            setTimeout(function () {
                mini.repaint(A.bodyEl)
            }, 1)
        },
        hideRowDetail: function (_) {
            var B = this._createRowDetailId(_),
                A = document.getElementById(B);
            if (A) A.style.display = "none";
            delete _._showDetail;
            var $ = this.getRowEl(_);
            mini.removeClass($, "mini-grid-expandRow");
            this.fire("hiderowdetail", {
                    record: _
                });
            if (this._allowLayout) this.doLayout()
        },
        toggleRowDetail: function ($) {
            $ = this.getRow($);
            if (!$) return;
            if (grid.isShowRowDetail($)) grid.hideRowDetail($);
            else grid.showRowDetail($)
        },
        isShowRowDetail: function ($) {
            $ = this.getRow($);
            if (!$) return false;
            return !!$._showDetail
        },
        getRowDetailEl: function ($) {
            $ = this.getRow($);
            if (!$) return null;
            var A = this._createRowDetailId($),
                _ = document.getElementById(A);
            if (!_) _ = this._createRowDetail($);
            return _
        },
        getRowDetailCellEl: function ($) {
            var _ = this.getRowDetailEl($);
            if (_) return _.cells[0]
        },
        _createRowDetail: function ($) {
            var A = this.getRowEl($),
                B = this._createRowDetailId($),
                _ = this.getBottomColumns().length;
            jQuery(A).after("<tr id=\"" + B + "\" class=\"mini-grid-detailRow\"><td class=\"mini-grid-detailCell\" colspan=\"" + _ + "\"></td></tr>");
            this._doUpdateDetailColSpan();
            return document.getElementById(B)
        },
        _getColSpan: function () {
            var D = this.bodyEl.firstChild.getElementsByTagName("tr")[0],
                B = D.getElementsByTagName("td"),
                A = 0;
            for (var _ = 0, C = B.length; _ < C; _++) {
                    var $ = B[_];
                    if ($.style.display != "none") A++
                }
            return A
        },
        _doUpdateDetailColSpan: function () {
            var _ = jQuery(".mini-grid-detailRow", this.el),
                B = this._getColSpan();
            for (var A = 0, C = _.length; A < C; A++) {
                    var D = _[A],
                        $ = D.firstChild;
                    $.colSpan = B
                }
        },
        _doLayoutDetailRows: function () {
            var _ = jQuery(".mini-grid-detailRow", this.el);
            for (var A = 0, B = _.length; A < B; A++) {
                var C = _[A],
                    $ = C.firstChild;
                mini.layout($)
            }
        },
        _doLayoutEditingRows: function () {
            for (var $ = 0, B = this.data.length; $ < B; $++) {
                var _ = this.data[$];
                if (_._editing == true) {
                    var A = this.getRowEl(_);
                    mini.layout(A)
                }
            }
        },
        __OnPageChanged: function ($) {
            $.cancel = true;
            this.gotoPage($.pageIndex, $.pageSize)
        },
        setSizeList: function ($) {
            if (!mini.isArray($)) return;
            this.pager.setSizeList($)
        },
        setPageSize: function ($) {
            $ = parseInt($);
            if (isNaN($)) return;
            this.pageSize = $
        },
        setPageIndex: function ($) {
            $ = parseInt($);
            if (isNaN($)) return;
            this.pageIndex = $
        },
        setShowPageSize: function ($) {
            this.showPageSize = $;
            this.pager.setShowPageSize($)
        },
        setShowPageIndex: function ($) {
            this.showPageIndex = $;
            this.pager.setShowPageIndex($)
        },
        pageIndex: 0,
        pageSize: 10,
        totalCount: 0,
        totalPage: 0,
        showPageSize: true,
        showPageIndex: true,
        getTotalCount: function () {
            return this.totalCount
        },
        getTotalPage: function () {
            return this.totalPage
        },
        sortField: "",
        sortOrder: "",
        url: "",
        autoLoad: false,
        loadParams: null,
        ajaxAsync: true,
        ajaxMethod: "get",
        showLoading: true,
        resultAsData: false,
        checkSelectOnLoad: true,
        setCheckSelectOnLoad: function ($) {
            this.checkSelectOnLoad = $
        },
        _totalField: "total",
        _dataField: "data",
        _getFromData: function ($) {
            return $.data
        },
        _doLoad: function (_, A, B) {
            _ = _ || {};
            if (mini.isNull(_.pageIndex)) _.pageIndex = 0;
            if (mini.isNull(_.pageSize)) _.pageSize = this.pageSize;
            _.sortField = this.sortField;
            _.sortOrder = this.sortOrder;
            this.loadParams = _;
            if (this.showLoading) this.loading();
            var C = {
                url: this.url,
                async: this.ajaxAsync,
                type: this.ajaxMethod,
                params: _,
                cancel: false
            };
            this.fire("beforeload", C);
            if (C.cancel == true) return;
            this._selectedValue = this.selected ? this.selected[this.idField] : null;
            var $ = this;
            this._ajaxer = jQuery.ajax({
                url: C.url,
                async: C.async,
                data: C.params,
                type: C.type,
                cache: false,
                dataType: "text",
                success: function (D) {
                    var G = null;
                    try {
                        G = mini.decode(D)
                    } catch (H) {}
                    if (G == null) G = {
                        data: [],
                        total: 0
                    };
                    if ($.resultAsData) {
                        var E = {};
                        E[$._totalField] = G.length;
                        E.data = G;
                        G = E
                    }
                    var C = G[$._totalField],
                        F = $._getFromData(G),
                        H = {
                            result: G,
                            data: F,
                            total: C,
                            cancel: false
                        };
                    $.fire("preload", H);
                    if (H.cancel == true) return;
                    if (mini.isNumber(_.pageIndex)) $.pageIndex = _.pageIndex;
                    if (mini.isNumber(_.pageSize)) $.pageSize = _.pageSize;
                    if (mini.isNumber(H.total)) $.totalCount = H.total;
                    $.loadData(H.data);
                    $._doUpdateHeader();
                    $.unmask();
                    $.fire("load", H);
                    if (A) A.call($, G);
                    if ($._selectedValue && $.checkSelectOnLoad) {
                            var B = $.getRowByValue($._selectedValue);
                            if (B) {
                                $.select(B);
                                $.setSelected(B)
                            } else {
                                $.deselect($.selected);
                                $.setSelected(null);
                                $._OnSelectionChanged()
                            }
                        }
                    $.doLayout();
                    setTimeout(function () {
                            $.doLayout()
                        }, 100)
                },
                error: function (_, C, A) {
                    if (B) B.call(scope, _);
                    var D = {
                        xmlHttp: _,
                        errorCode: C
                    };
                    $.fire("loaderror", D);
                    $.unmask()
                }
            })
        },
        load: function (_, A, B) {
            if (this._loadTimer) clearTimeout(this._loadTimer);
            var $ = this;
            this.cancelEdit();
            if (this.ajaxAsync) this._loadTimer = setTimeout(function () {
                $._doLoad(_, A, B)
            }, 1);
            else $._doLoad(_, A, B)
        },
        reload: function (_, $) {
            this.load(this.loadParams, _, $)
        },
        gotoPage: function ($, A) {
            var _ = this.loadParams || {};
            if (mini.isNumber($)) _.pageIndex = $;
            if (mini.isNumber(A)) _.pageSize = A;
            this.load(_)
        },
        sortBy: function (A, _) {
            this.sortField = A;
            this.sortOrder = _ == "asc" ? "asc" : "desc";
            var $ = this.loadParams || {};
            $.sortField = A;
            $.sortOrder = _;
            $.pageIndex = this.pageIndex;
            this.load($)
        },
        clearSort: function () {
            this.sortField = "";
            this.sortOrder = "";
            this.reload()
        },
        beginEditRow: function (row) {
            var sss = new Date();
            row = this.getRow(row);
            if (!row) return;
            var rowEl = this.getRowEl(row);
            if (!rowEl) return;
            row._editing = true;
            var s = this._createRow(row),
                rowEl = this.getRowEl(row);
            jQuery(rowEl).before(s);
            rowEl.parentNode.removeChild(rowEl);
            rowEl = this.getRowEl(row);
            mini.addClass(rowEl, "mini-grid-rowEdit");
            var columns = this.getBottomColumns();
            for (var i = 0, l = columns.length; i < l; i++) {
                    var column = columns[i],
                        value = row[column.field],
                        cellId = this._createCellId(row, columns[i]),
                        cellEl = document.getElementById(cellId);
                    if (!cellEl) continue;
                    if (typeof column.editor == "string") column.editor = eval("(" + column.editor + ")");
                    var editorConfig = mini.copyTo({}, column.editor);
                    editorConfig.id = this.uid + "$" + row._uid + "$" + column.name + "$editor";
                    var editor = mini.create(editorConfig);
                    if (this._OnCellBeginEdit(row, column, editor)) if (editor) {
                            mini.addClass(cellEl, "mini-grid-cellEdit");
                            cellEl.innerHTML = "";
                            cellEl.appendChild(editor.el);
                            if (mini.isNull(value)) value = "";
                            editor.setValue(value);
                            mini.addClass(editor.el, "mini-grid-editor");
                            editor.ownerRowUID = row._uid;
                            if (column.displayField && editor.setText) {
                                var text = row[column.displayField];
                                editor.setText(text)
                            }
                        }
                }
            this.doLayout()
        },
        getEditorOwnerRow: function (_) {
            var $ = _.ownerRowUID;
            return this.getRowByUID($)
        },
        getCellEditor: function (_, $) {
            $ = this.getRow($);
            _ = this.getColumn(_);
            if (!$) $ = this.getEditingRow();
            if (!$ || !_) return null;
            var A = this.uid + "$" + $._uid + "$" + _.name + "$editor";
            return mini.get(A)
        },
        _OnCellBeginEdit: function ($, _, B) {
            var A = {
                sender: this,
                rowIndex: this.data.indexOf($),
                row: $,
                record: $,
                column: _,
                field: _.field,
                editor: B,
                value: $[_.field],
                cancel: false
            };
            this.fire("cellbeginedit", A);
            if (A.cancel) return false;
            if (!A.editor) return false;
            return true
        },
        cancelRemoveNewRow: true,
        cancelEdit: function () {
            this.allowLayout = false;
            var A = this.data.clone();
            for (var $ = 0, B = A.length; $ < B; $++) {
                var _ = A[$];
                if (_._editing == true) this.cancelEditRow($)
            }
            this.allowLayout = true;
            this.doLayout()
        },
        cancelEditRow: function (B) {
            B = this.getRow(B);
            if (!B || !B._editing) return;
            delete B._editing;
            var D = this.getBottomColumns();
            for (var _ = 0, F = D.length; _ < F; _++) {
                var C = D[_],
                    H = this._createCellId(B, D[_]),
                    A = document.getElementById(H),
                    E = A.firstChild,
                    I = mini.get(E);
                if (!I) continue;
                I.destroy()
            }
            var G = this._createRow(B),
                $ = this.getRowEl(B);
            jQuery($).before(G);
            $.parentNode.removeChild($);
            this.doLayout()
        },
        commitEdit: function () {
            this.allowLayout = false;
            var A = this.data.clone();
            for (var $ = 0, B = A.length; $ < B; $++) {
                var _ = A[$];
                if (_._editing == true) this.commitEditRow($)
            }
            this.allowLayout = true;
            this.doLayout()
        },
        commitEditRow: function ($) {
            $ = this.getRow($);
            if (!$ || !$._editing) return;
            var _ = this.getEditRowData($);
            mini.copyTo($, _);
            this.cancelEditRow($)
        },
        isEditing: function () {
            for (var $ = 0, A = this.data.length; $ < A; $++) {
                var _ = this.data[$];
                if (_._editing == true) return true
            }
            return false
        },
        isEditingRow: function ($) {
            $ = this.getRow($);
            if (!$) return false;
            return !!$._editing
        },
        isNewRow: function ($) {
            return !!$[this.idField] == false
        },
        getEditingRows: function () {
            var A = [];
            for (var $ = 0, B = this.data.length; $ < B; $++) {
                var _ = this.data[$];
                if (_._editing == true) A.push(_)
            }
            return A
        },
        getEditingRow: function () {
            var $ = this.getEditingRows();
            return $[0]
        },
        idField: "id",
        setIdField: function ($) {
            this.idField = $
        },
        getEditData: function (C) {
            var B = [];
            for (var $ = 0, D = this.data.length; $ < D; $++) {
                var _ = this.data[$];
                if (_._editing == true) {
                    var A = this.getEditRowData($, C);
                    A._index = $;
                    B.push(A)
                }
            }
            return B
        },
        getEditRowData: function (H, J) {
            H = this.getRow(H);
            if (!H || !H._editing) return null;
            var I = {},
                C = this.getBottomColumns();
            for (var G = 0, D = C.length; G < D; G++) {
                    var B = C[G],
                        _ = H[B.field],
                        E = this._createCellId(H, C[G]),
                        A = document.getElementById(E),
                        K = A.firstChild,
                        F = mini.get(K);
                    if (!F) continue;
                    I[B.field] = F.getValue();
                    if (B.displayField && F.getText) I[B.displayField] = F.getText()
                }
            I[this.idField] = H[this.idField];
            if (J) {
                    var $ = mini.copyTo({}, H);
                    I = mini.copyTo($, I)
                }
            return I
        },
        updateRow: function (_, A) {
            _ = this.getRow(_);
            if (!_ || !A) return;
            mini.copyTo(_, A);
            var B = this._createRow(_),
                $ = this.getRowEl(_);
            jQuery($).before(B);
            $.parentNode.removeChild($)
        },
        removeRow: function (_) {
            _ = this.getRow(_);
            if (!_) return;
            this.data.remove(_);
            delete this.uidRows[_._uid];
            var A = this._createRow(_),
                $ = this.getRowEl(_);
            if ($) $.parentNode.removeChild($)
        },
        addRow: function (A, $) {
            if (mini.isNull($)) $ = this.data.length;
            $ = this.indexOf($);
            var B = this.getRow($);
            this.data.insert($, A);
            delete this.uidRows[A._uid];
            A._uid = mini.DataGrid.RowUID++;
            this.uidRows[A._uid] = A;
            var C = this._createRow(A);
            if (B) {
                var _ = this.getRowEl(B);
                jQuery(_).before(C)
            } else mini.append(this.bodyEl.firstChild, C);
            mini.repaint(this.bodyEl)
        },
        moveRow: function (A, $) {
            A = this.getRow(A);
            if (!A) return;
            var C = this.getRow($);
            this.data.remove(A);
            var _ = this.getRowEl(A);
            if (C) {
                $ = this.data.indexOf(C);
                this.data.insert($, A);
                var B = this.getRowEl(C);
                jQuery(B).before(_)
            } else {
                this.data.insert(this.data.length, A);
                mini.append(this.bodyEl.firstChild, _)
            }
        },
        clearRows: function () {
            this.data = [];
            this.doUpdate()
        },
        indexOf: function ($) {
            if (typeof $ == "number") return $;
            return this.data.indexOf($)
        },
        selected: null,
        selecteds: [],
        _checkSelecteds: function () {
            for (var _ = this.selecteds.length - 1; _ >= 0; _--) {
                var $ = this.selecteds[_];
                if (this.data.indexOf($) == -1) this.selecteds.removeAt(_)
            }
        },
        setAllowSelect: function ($) {
            this.allowSelect = $
        },
        setMultiSelect: function ($) {
            this.multiSelect = $
        },
        isSelected: function ($) {
            $ = this.getRow($);
            if (!$) return false;
            return !!this._uidSelecteds[$._uid]
        },
        getSelecteds: function () {
            return this.selecteds.clone()
        },
        getSelected: function () {
            return this.selected
        },
        setSelected: function ($) {
            if ($) {
                this.selected = $;
                this.select($)
            } else {
                this.deselect(this.selected);
                this.selected = null
            }
        },
        select: function ($) {
            $ = this.getRow($);
            if (!$) return;
            if (this.isSelected($)) return;
            this.selects([$])
        },
        deselect: function ($) {
            $ = this.getRow($);
            if (!$) return;
            if (!this.isSelected($)) return;
            this.deselects([$])
        },
        selectAll: function () {
            var $ = this.data.clone();
            this.selects($)
        },
        deselectAll: function () {
            var $ = this.selecteds.clone();
            this.deselects($);
            this.selected = null
        },
        clearSelect: function () {
            this.deselectAll()
        },
        selects: function (A) {
            if (!A || A.length == 0) return;
            A = A.clone();
            for (var _ = 0, B = A.length; _ < B; _++) {
                var $ = A[_];
                if (!this.isSelected($)) {
                    this.selecteds.push($);
                    this._uidSelecteds[$._uid] = $
                }
            }
            this._doSelects()
        },
        deselects: function (A) {
            if (!A || A.length == 0) return;
            A = A.clone();
            for (var _ = A.length - 1; _ >= 0; _--) {
                var $ = A[_];
                if (this.isSelected($)) {
                    this.selecteds.remove($);
                    delete this._uidSelecteds[$._uid]
                }
            }
            this._doSelects()
        },
        _doSelects: function () {
            for (var A = 0, C = this.data.length; A < C; A++) {
                var _ = this.data[A];
                if (this.isSelected(_)) this.addRowCls(_, this.rowSelectedCls);
                else this.removeRowCls(_, this.rowSelectedCls)
            }
            var D = {
                sender: this,
                selecteds: this.getSelecteds(),
                selected: this.getSelected()
            },
                $ = this.getBottomColumns();
            for (A = 0, C = $.length; A < C; A++) {
                    var B = $[A];
                    if (B.onSelectionChanged) B.onSelectionChanged.call(this, D)
                }
        },
        _OnSelectionChanged: function () {
            var $ = {
                selecteds: this.getSelecteds(),
                selected: this.getSelected()
            };
            this.fire("SelectionChanged", $)
        },
        addRowCls: function (_, A) {
            var $ = this.getRowEl(_);
            if ($) mini.addClass($, A)
        },
        removeRowCls: function (_, A) {
            var $ = this.getRowEl(_);
            if ($) mini.removeClass($, A)
        },
        focusRow: function (_, $) {
            _ = this.getRow(_);
            if (!_) return;
            var A = this.getRowEl(_);
            if ($ && A) this.scrollIntoView(_);
            if (this.focusedRow == _) return;
            this.blurRow();
            this.focusedRow = _;
            mini.addClass(A, this.rowHoverCls)
        },
        blurRow: function () {
            if (!this.focusedRow) return;
            var $ = this.getRowEl(this.focusedRow);
            if ($) mini.removeClass($, this.rowHoverCls);
            this.focusedRow = null
        },
        _getRecordByEvent: function (B) {
            var A = mini.findParent(B.target, this.rowCls);
            if (!A) return null;
            var $ = A.id.split("$"),
                _ = $[$.length - 1];
            return this.getRowByUID(_)
        },
        _getColumnByEvent: function (B) {
            var _ = mini.findParent(B.target, "mini-grid-cell");
            if (!_) _ = mini.findParent(B.target, "mini-grid-headerCell");
            if (_) {
                var $ = _.id.split("$"),
                    A = $[$.length - 1];
                return this._getColumnById(A)
            }
            return null
        },
        _getCellByEvent: function (A) {
            var $ = this._getRecordByEvent(A),
                _ = this._getColumnByEvent(A);
            return {
                    record: $,
                    column: _
                }
        },
        getColumnBox: function (_) {
            var A = this._createColumnId(_),
                $ = document.getElementById(A);
            if ($) return mini.getBox($)
        },
        __OnMousewheel: function (C, A) {
            var B = jQuery(this.bodyEl).css("overflow-y");
            if (B == "hidden") {
                var $ = C.wheelDelta || -C.detail * 24,
                    _ = this.bodyEl.scrollTop;
                _ -= $;
                this.bodyEl.scrollTop = _;
                if (_ == this.bodyEl.scrollTop) C.preventDefault();
                var C = {
                        scrollTop: this.bodyEl.scrollTop,
                        direction: "vertical"
                    };
                this.fire("scroll", C)
            }
        },
        __OnClick: function ($) {
            this._fireEvent($, "Click")
        },
        __OnDblClick: function ($) {
            this._fireEvent($, "Dblclick")
        },
        __OnMouseDown: function ($) {
            this._fireEvent($, "MouseDown")
        },
        __OnMouseUp: function ($) {
            this._fireEvent($, "MouseUp")
        },
        __OnMouseMove: function ($) {
            this._fireEvent($, "MouseMove")
        },
        __OnMouseOver: function ($) {
            this._fireEvent($, "MouseOver")
        },
        __OnMouseOut: function ($) {
            this._fireEvent($, "MouseOut")
        },
        __OnKeyDown: function ($) {
            this._fireEvent($, "KeyDown")
        },
        __OnKeyUp: function ($) {
            this._fireEvent($, "KeyUp")
        },
        __OnContextMenu: function ($) {
            this._fireEvent($, "ContextMenu")
        },
        _fireEvent: function (F, D) {
            if (!this.enabled) return;
            var C = this._getCellByEvent(F),
                _ = C.record,
                B = C.column;
            if (_) {
                    var A = {
                        record: _,
                        row: _,
                        htmlEvent: F
                    },
                        E = this["_OnRow" + D];
                    if (E) E.call(this, A);
                    else this.fire("row" + D, A)
                }
            if (B) {
                    A = {
                        column: B,
                        field: B.field,
                        htmlEvent: F
                    },
                    E = this["_OnColumn" + D];
                    if (E) E.call(this, A);
                    else this.fire("column" + D, A)
                }
            if (_ && B) {
                    A = {
                        sender: this,
                        record: _,
                        row: _,
                        column: B,
                        field: B.field,
                        htmlEvent: F
                    },
                    E = this["_OnCell" + D];
                    if (E) E.call(this, A);
                    else this.fire("cell" + D, A);
                    if (B["onCell" + D]) B["onCell" + D].call(B, A)
                }
            if (!_ && B) {
                    A = {
                        column: B,
                        htmlEvent: F
                    },
                    E = this["_OnHeaderCell" + D];
                    if (E) E.call(this, A);
                    else {
                        var $ = "onheadercell" + D.toLowerCase();
                        if (B[$]) {
                            A.sender = this;
                            B[$](A)
                        }
                        this.fire("headercell" + D, A)
                    }
                }
        },
        _OnDrawCell: function ($, B, C, D) {
            var _ = $[B.field],
                E = {
                    sender: this,
                    rowIndex: C,
                    columnIndex: D,
                    record: $,
                    row: $,
                    column: B,
                    field: B.field,
                    value: _,
                    cellHtml: _,
                    rowCls: null,
                    cellCls: B.cellCls || "",
                    rowStyle: null,
                    cellStyle: B.cellStyle || ""
                };
            if (B.displayField) E.cellHtml = $[B.displayField];
            if (B.dateFormat) if (mini.isDate(E.value)) E.cellHtml = mini.formatDate(_, B.dateFormat);
            else E.cellHtml = "";
            var A = B.renderer;
            if (A) {
                    fn = typeof A == "function" ? A : window[A];
                    if (fn) E.cellHtml = fn.call(B, E)
                }
            this.fire("drawcell", E);
            if (E.cellHtml === null || E.cellHtml === undefined || E.cellHtml === "") E.cellHtml = "&nbsp;";
            return E
        },
        _OnCellMouseDown: function (_) {
            var $ = _.record;
            if ($.enabled === false) return;
            if (this.allowSelect) if (this.multiSelect) {
                if (_.column.multiSelect === true) {
                    if (this.isSelected($)) {
                        this.deselect($);
                        if ($ == this.selected) this.setSelected(null)
                    } else {
                        this.select($);
                        this.setSelected($)
                    }
                    this._OnSelectionChanged()
                } else {
                    if (this.isSelected($));
                    else {
                        this.deselectAll();
                        this.select($);
                        this.setSelected($)
                    }
                    this._OnSelectionChanged()
                }
            } else if (!this.isSelected($)) {
                this.deselectAll();
                this.select($);
                this.setSelected($);
                this._OnSelectionChanged()
            } else if (_.htmlEvent.ctrlKey) this.deselectAll();
            this.fire("cellmousedown", _)
        },
        _OnRowMouseOut: function ($) {
            if (!this.enabled) return;
            this.blurRow();
            this.fire("rowmousedown", $)
        },
        _OnRowMouseMove: function ($) {
            record = $.record;
            if (!this.enabled || record.enabled === false || this.enableHotTrack == false) return;
            this.focusRow(record);
            this.fire("rowmousemove", $)
        },
        _OnHeaderCellClick: function (A) {
            A.sender = this;
            var $ = A.column;
            if ($.onHeaderCellClick) $.onHeaderCellClick.call(this, A);
            if (!mini.hasClass(A.htmlEvent.target, "mini-grid-splitter")) {
                if (this.allowSortColumn) if (!$.columns || $.columns.length == 0) if ($.field && $.allowSort !== false) {
                    var _ = "asc";
                    if (this.sortField == $.field) _ = this.sortOrder == "asc" ? "desc" : "asc";
                    this.sortBy($.field, _)
                }
                this.fire("headercellclick", A)
            }
        },
        onRowClick: function (_, $) {
            this.on("rowclick", _, $)
        },
        onRowMouseDown: function (_, $) {
            this.on("rowmousedown", _, $)
        },
        onRowContextMenu: function (_, $) {
            this.on("rowcontextmenu", _, $)
        },
        onCellClick: function (_, $) {
            this.on("cellclick", _, $)
        },
        onCellMouseDown: function (_, $) {
            this.on("cellmousedown", _, $)
        },
        onCellContextMenu: function (_, $) {
            this.on("cellcontextmenu", _, $)
        },
        onBeforeLoad: function (_, $) {
            this.on("beforeload", _, $)
        },
        onLoad: function (_, $) {
            this.on("load", _, $)
        },
        onLoadError: function (_, $) {
            this.on("loaderror", _, $)
        },
        onPreLoad: function (_, $) {
            this.on("preload", _, $)
        },
        onDrawCell: function (_, $) {
            this.on("drawcell", _, $)
        },
        onCellBeginEdit: function (_, $) {
            this.on("cellbeginedit", _, $)
        },
        getAttrs: function (el) {
            var attrs = mini.DataGrid.superclass.getAttrs.call(this, el),
                cs = mini.getChildNodes(el);
            for (var i = 0, l = cs.length; i < l; i++) {
                    var node = cs[i],
                        property = jQuery(node).attr("property");
                    if (!property) continue;
                    property = property.toLowerCase();
                    if (property == "columns") attrs.columns = mini._ParseColumns(node);
                    else if (property == "data") attrs.data = node.innerHTML
                }
            mini._ParseString(el, attrs, ["url", "sizeList", "bodyCls", "bodyStyle", "footerCls", "footerStyle", "pagerCls", "pagerStyle", "onrowclick", "onrowmousedown", "onrowcontextmenu", "oncellclick", "oncellmousedown", "oncellcontextmenu", "onbeforeload", "onpreload", "onloaderror", "onload", "ondrawcell", "oncellbeginedit", "onselectionchanged", "onshowrowdetail", "onhiderowdetail", "idField", "valueField", "ajaxMethod"]);
            mini._ParseBool(el, attrs, ["showHeader", "showFooter", "showTop", "allowSortColumn", "allowMoveColumn", "allowResizeColumn", "showHGridLines", "showVGridLines", "showFilterRow", "showSummaryRow", "showFooter", "showTop", "fitColumns", "showLoading", "multiSelect", "allowAlternating", "resultAsData", "allowSelect", "enableHotTrack", "showPageIndex", "showPageSize", "checkSelectOnLoad", "allowResize", "autoLoad"]);
            mini._ParseInt(el, attrs, ["columnWidth", "frozenStartColumn", "frozenEndColumn", "pageIndex", "pageSize"]);
            if (typeof attrs.sizeList == "string") attrs.sizeList = eval(attrs.sizeList);
            if (!attrs.idField && attrs.valueField) attrs.idField = attrs.valueField;
            return attrs
        }
    });
mini.regClass(mini.DataGrid, "datagrid");
mini._GridSplitter = function ($) {
        this.grid = $;
        mini.on(this.grid.el, "mousedown", this.__onGridMouseDown, this);
        $.on("refreshHeader", this.__OnGridLayout, this);
        $.on("layout", this.__OnGridLayout, this)
    };
mini._GridSplitter.prototype = {
        __OnGridLayout: function (A) {
            if (this.splittersEl) mini.removeNode(this.splittersEl);
            if (this.splitterTimer) return;
            var $ = this.grid;
            if ($.isDisplay() == false) return;
            var _ = this;
            this.splitterTimer = setTimeout(function () {
                var H = $.getBottomColumns(),
                    I = H.length,
                    E = mini.getBox($.headerEl, true),
                    B = $.getScrollLeft(),
                    G = [];
                for (var J = 0, F = H.length; J < F; J++) {
                        var D = H[J],
                            C = $.getColumnBox(D);
                        if (!C) break;
                        var A = C.top - E.top,
                            L = C.right - E.left - 2,
                            K = C.height;
                        if ($.isFrozen()) {
                                if (J >= $.frozenStartColumn);
                            } else L += B;
                        var M = $.getParentColumn(D);
                        if (M && M.columns) if (M.columns[M.columns.length - 1] == D) if (K + 5 < E.height) {
                                A = 0;
                                K = E.height
                            }
                        if ($.allowResizeColumn && D.allowResize) G[G.length] = "<div id=\"" + D.id + "\" class=\"mini-grid-splitter\" style=\"left:" + L + "px;top:" + A + "px;height:" + K + "px;\"></div>"
                    }
                var N = G.join("");
                _.splittersEl = document.createElement("div");
                _.splittersEl.className = "mini-grid-splitters";
                _.splittersEl.innerHTML = N;
                $.headerEl.appendChild(_.splittersEl);
                _.splitterTimer = null
            }, 100)
        },
        __onGridMouseDown: function (B) {
            var $ = this.grid,
                A = B.target;
            if (mini.hasClass(A, "mini-grid-splitter")) {
                    var _ = $.idColumns[A.id];
                    if ($.allowResizeColumn && _ && _.allowResize) {
                        this.splitterColumn = _;
                        this.getDrag().start(B)
                    }
                }
        },
        getDrag: function () {
            if (!this.drag) this.drag = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
            return this.drag
        },
        _OnDragStart: function (_) {
            var $ = this.grid,
                B = $.getColumnBox(this.splitterColumn);
            this.columnBox = B;
            this.dragProxy = mini.append(document.body, "<div class=\"mini-grid-proxy\"></div>");
            var A = $.getBox(true);
            A.x = B.x;
            A.width = B.width;
            A.right = B.right;
            mini.setBox(this.dragProxy, A)
        },
        _OnDragMove: function (A) {
            var $ = this.grid,
                B = mini.copyTo({}, this.columnBox),
                _ = B.width + (A.now[0] - A.init[0]);
            if (_ < $.columnMinWidth) _ = $.columnMinWidth;
            if (_ > $.columnMaxWidth) _ = $.columnMaxWidth;
            mini.setWidth(this.dragProxy, _)
        },
        _OnDragStop: function (B) {
            var $ = this.grid,
                C = mini.getBox(this.dragProxy),
                A = this,
                _ = $.allowSortColumn;
            $.allowSortColumn = false;
            setTimeout(function () {
                    jQuery(A.dragProxy).remove();
                    A.dragProxy = null;
                    $.allowSortColumn = _
                }, 10);
            $.setColumnWidth(this.splitterColumn, C.width)
        }
    };
mini._GridColumnMove = function ($) {
        this.grid = $;
        mini.on(this.grid.el, "mousedown", this.__onGridMouseDown, this)
    };
mini._GridColumnMove.prototype = {
        __onGridMouseDown: function (B) {
            var $ = this.grid;
            if ($.isEditing()) return;
            if (mini.hasClass(B.target, "mini-grid-splitter")) return;
            if (B.button == mini.MouseButton.Right) return;
            var A = mini.findParent(B.target, "mini-grid-headerCell");
            if (A) {
                var _ = $._getColumnByEvent(B);
                if ($.allowMoveColumn && _ && _.allowMove) {
                    this.dragColumn = _;
                    this._columnEl = A;
                    this.getDrag().start(B)
                }
            }
        },
        getDrag: function () {
            if (!this.drag) this.drag = new mini.Drag({
                capture: mini.isIE9 ? false : true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
            return this.drag
        },
        _OnDragStart: function (_) {
            function A($) {
                var _ = $.header;
                return _
            }
            var $ = this.grid;
            this.dragProxy = mini.append(document.body, "<div class=\"mini-grid-columnproxy\"></div>");
            this.dragProxy.innerHTML = "<div class=\"mini-grid-columnproxy-inner\">" + A(this.dragColumn) + "</div>";
            mini.setXY(this.dragProxy, _.now[0] + 15, _.now[1] + 18);
            mini.addClass(this.dragProxy, "mini-grid-no");
            this.moveTop = mini.append(document.body, "<div class=\"mini-grid-movetop\"></div>");
            this.moveBottom = mini.append(document.body, "<div class=\"mini-grid-movebottom\"></div>")
        },
        _OnDragMove: function (A) {
            var $ = this.grid,
                G = A.now[0];
            mini.setXY(this.dragProxy, G + 15, A.now[1] + 18);
            this.targetColumn = this.insertAction = null;
            var D = mini.findParent(A.event.target, "mini-grid-headerCell");
            if (D) {
                    var C = $._getColumnByEvent(A.event);
                    if (C && C != this.dragColumn) {
                        var _ = $.getParentColumn(this.dragColumn),
                            E = $.getParentColumn(C);
                        if (_ == E) {
                                this.targetColumn = C;
                                this.insertAction = "before";
                                var F = $.getColumnBox(this.targetColumn);
                                if (G > F.x + F.width / 2) this.insertAction = "after"
                            }
                    }
                }
            if (this.targetColumn) {
                    mini.addClass(this.dragProxy, "mini-grid-ok");
                    mini.removeClass(this.dragProxy, "mini-grid-no");
                    var B = $.getColumnBox(this.targetColumn);
                    this.moveTop.style.display = "block";
                    this.moveBottom.style.display = "block";
                    if (this.insertAction == "before") {
                        mini.setXY(this.moveTop, B.x - 4, B.y - 9);
                        mini.setXY(this.moveBottom, B.x - 4, B.bottom)
                    } else {
                        mini.setXY(this.moveTop, B.right - 4, B.y - 9);
                        mini.setXY(this.moveBottom, B.right - 4, B.bottom)
                    }
                } else {
                    mini.removeClass(this.dragProxy, "mini-grid-ok");
                    mini.addClass(this.dragProxy, "mini-grid-no");
                    this.moveTop.style.display = "none";
                    this.moveBottom.style.display = "none"
                }
        },
        _OnDragStop: function (_) {
            var $ = this.grid;
            mini.removeNode(this.dragProxy);
            mini.removeNode(this.moveTop);
            mini.removeNode(this.moveBottom);
            $.moveColumn(this.dragColumn, this.targetColumn, this.insertAction);
            this.dragProxy = this.moveTop = this.moveBottom = this.dragColumn = this.targetColumn = null
        }
    };
mini.GridEditor = function () {
        this._inited = true;
        mini.Control.superclass.constructor.call(this);
        this._create();
        this.el.uid = this.uid;
        this._initEvents();
        this._doInit();
        this.addCls(this.uiCls)
    };
mini.extend(mini.GridEditor, mini.Control, {
        el: null,
        _create: function () {
            this.el = document.createElement("input");
            this.el.type = "text";
            this.el.style.width = "100%"
        },
        getValue: function () {
            return this.el.value
        },
        setValue: function ($) {
            this.el.value = $
        },
        setWidth: function ($) {}
    });
mini.Pager = function () {
        mini.Pager.superclass.constructor.call(this)
    };
mini.extend(mini.Pager, mini.Control, {
        pageIndex: 0,
        pageSize: 10,
        totalCount: 0,
        totalPage: 0,
        showPageIndex: true,
        showPageSize: true,
        showTotalCount: false,
        firstText: "\u9996\u9875",
        prevText: "\u4e0a\u4e00\u9875",
        nextText: "\u4e0b\u4e00\u9875",
        lastText: "\u5c3e\u9875",
        pageSizeText: "\u6bcf\u9875\u8bb0\u5f55\u6570\uff1a",
        totalCountText: "\uff0c\u603b\u8bb0\u5f55\u6570\uff1a",
        sizeList: [10, 20, 50, 100],
        uiCls: "mini-pager",
        _create: function () {
            var B = "<tr style=\"width:100%;\"><td style=\"width:100%;\"><div></div></td><td></td><td style=\"text-align:right;\"></td></tr>",
                _ = "<table class=\"mini-pager\" cellpadding=\"0\" cellspacing=\"0\">" + B + "</table>",
                $ = document.createElement("div");
            $.innerHTML = _;
            this.el = $.firstChild;
            var A = this.el.getElementsByTagName("td");
            this.firstTd = A[0];
            this.spaceTd = A[1];
            this.lastTd = A[2];
            this.buttonsEl = this.firstTd.firstChild;
            this.firstButton = new mini.Button();
            this.firstButton.setText(this.firstText);
            this.firstButton.render(this.buttonsEl);
            this.prevButton = new mini.Button();
            this.prevButton.setText(this.prevText);
            this.prevButton.render(this.buttonsEl);
            this.indexEl = document.createElement("span");
            this.indexEl.className = "mini-pager-index";
            this.indexEl.innerHTML = "<input id=\"\" type=\"text\" class=\"mini-pager-num\"/><span class=\"mini-pager-pages\">/ 0</span>";
            this.buttonsEl.appendChild(this.indexEl);
            this.numInput = this.indexEl.firstChild;
            this.pagesLabel = this.indexEl.lastChild;
            this.nextButton = new mini.Button();
            this.nextButton.setText(this.nextText);
            this.nextButton.render(this.buttonsEl);
            this.lastButton = new mini.Button();
            this.lastButton.setText(this.lastText);
            this.lastButton.render(this.buttonsEl);
            this.update()
        },
        _initEvents: function () {
            mini.Pager.superclass._initEvents.call(this);
            this.firstButton.on("click", function ($) {
                this._OnPageChanged(0)
            }, this);
            this.prevButton.on("click", function ($) {
                this._OnPageChanged(this.pageIndex - 1)
            }, this);
            this.nextButton.on("click", function ($) {
                this._OnPageChanged(this.pageIndex + 1)
            }, this);
            this.lastButton.on("click", function ($) {
                this._OnPageChanged(this.totalPage)
            }, this);
            mini.on(this.numInput, "change", function (_) {
                var $ = parseInt(this.numInput.value);
                if (isNaN($)) this.update();
                else this._OnPageChanged($ - 1)
            }, this)
        },
        setPageIndex: function ($) {
            if (isNaN($)) return;
            this.pageIndex = $;
            this.update()
        },
        setPageSize: function ($) {
            if (isNaN($)) return;
            this.pageSize = $;
            this.update()
        },
        setTotalCount: function ($) {
            if (isNaN($)) return;
            this.totalCount = $;
            this.update()
        },
        setSizeList: function ($) {
            if (!mini.isArray($)) return;
            this.sizeList = $;
            this.update()
        },
        setShowPageSize: function ($) {
            this.showPageSize = $;
            this.update()
        },
        setShowPageIndex: function ($) {
            this.showPageIndex = $;
            this.update()
        },
        setShowTotalCount: function ($) {
            this.showTotalCount = $;
            this.update()
        },
        getTotalPage: function () {
            return this.totalPage
        },
        update: function (_, C, B) {
            if (mini.isNumber(_)) this.pageIndex = _;
            if (mini.isNumber(C)) this.pageSize = C;
            if (mini.isNumber(B)) this.totalCount = B;
            this.totalPage = parseInt(this.totalCount / this.pageSize) + 1;
            if ((this.totalPage - 1) * this.pageSize == this.totalCount) this.totalPage -= 1;
            if (this.totalCount == 0) this.totalPage = 0;
            if (this.pageIndex > this.totalPage - 1) this.pageIndex = this.totalPage - 1;
            if (this.pageIndex <= 0) this.pageIndex = 0;
            if (this.totalPage <= 0) this.totalPage = 0;
            this.indexEl.style.display = this.showPageIndex ? "" : "none";
            this.firstButton.enable();
            this.prevButton.enable();
            this.nextButton.enable();
            this.lastButton.enable();
            if (this.pageIndex == 0) {
                this.firstButton.disable();
                this.prevButton.disable()
            }
            if (this.pageIndex >= this.totalPage - 1) {
                this.nextButton.disable();
                this.lastButton.disable()
            }
            this.numInput.value = this.pageIndex > -1 ? this.pageIndex + 1 : 0;
            this.pagesLabel.innerHTML = "/ " + this.totalPage;
            var F = this.sizeList.clone();
            if (F.indexOf(this.pageSize) == -1) {
                F.push(this.pageSize);
                F = F.sort(function ($, _) {
                    return $ > _
                })
            }
            var E = "<span class=\"mini-pager-size\">" + this.pageSizeText + "<select class=\"mini-pager-sizes\">";
            for (var A = 0, D = F.length; A < D; A++) {
                var $ = F[A];
                E += "<option value=\"" + $ + "\">" + $ + "</option>"
            }
            E += "</select></span>";
            if (this.showTotalCount) E += "<span class=\"mini-pager-total\">" + this.totalCountText + this.totalCount + "</span>";
            this.lastTd.innerHTML = E;
            this.sizeEl = this.lastTd.firstChild;
            this.pageSelect = this.sizeEl.lastChild;
            this.sizeEl.style.display = this.showPageSize ? "" : "none";
            this.pageSelect.value = this.pageSize;
            mini.on(this.pageSelect, "change", function (_) {
                var $ = parseInt(this.pageSelect.value);
                this._OnPageChanged(0, $)
            }, this)
        },
        _OnPageChanged: function ($, _) {
            var A = {
                pageIndex: mini.isNumber($) ? $ : this.pageIndex,
                pageSize: mini.isNumber(_) ? _ : this.pageSize,
                cancel: false
            };
            if (A.pageIndex > this.totalPage - 1) A.pageIndex = this.totalPage - 1;
            if (A.pageIndex < 0) A.pageIndex = 0;
            this.fire("pagechanged", A);
            if (A.cancel == false) this.update(A.pageIndex, A.pageSize)
        },
        onPageChanged: function (_, $) {
            this.on("pagechanged", _, $)
        },
        getAttrs: function (el) {
            var attrs = mini.Pager.superclass.getAttrs.call(this, el);
            mini._ParseString(el, attrs, ["onpagechanged", "sizeList"]);
            mini._ParseBool(el, attrs, ["showPageIndex", "showPageSize", "showTotalCount"]);
            mini._ParseInt(el, attrs, ["pageIndex", "pageSize", "totalCount"]);
            if (typeof attrs.sizeList == "string") attrs.sizeList = eval(attrs.sizeList);
            return attrs
        }
    });
mini.regClass(mini.Pager, "pager");
mini.TreeGrid = function () {
        this._ecConfig = {
            expandAll: true,
            expandNodes: [],
            expandLevels: [],
            collapseNodes: [],
            collapseLevels: []
        };
        mini.TreeGrid.superclass.constructor.call(this)
    };
mini.extend(mini.TreeGrid, mini.DataGrid, {
        treeColumn: "",
        showTreeIcon: true,
        showTreeLines: false,
        idField: "id",
        iconField: "iconCls",
        leafIcon: "mini-treegrid-leaf",
        folderIcon: "mini-treegrid-folder",
        uiCls: "mini-treegrid",
        set: function ($) {
            if (typeof $ == "string") return this;
            var A = this.allowUpdate;
            this.allowUpdate = false;
            var _ = $.treeColumn || $.textField || $.iconField || $.showTreeIcon || $.showTreeLines;
            mini.TreeGrid.superclass.set.call(this, $);
            this.allowUpdate = A;
            if (_) this.doUpdate();
            return this
        },
        _OnDrawCell: function ($, _, G, C) {
            var J = mini.TreeGrid.superclass._OnDrawCell.call(this, $, _, G, C);
            if (!this.treeColumn || this.treeColumn !== _.name) return J;
            var A = $;
            if (mini.isNull(J.showTreeIcon)) J.showTreeIcon = this.showTreeIcon;
            var H = J.cellHtml,
                F = this.isLeaf(A),
                D = this.getLevel(A) * 18,
                B = "";
            if (!F) B = this.isExpanded(A) ? "mini-treegrid-expand" : "mini-treegrid-collapse";
            if (J.cellCls) J.cellCls += " mini-treegrid-node ";
            else J.cellCls = " mini-treegrid-node ";
            var I = "<div class=\"mini-treegrid-node-inner " + B + "\">";
            if (!F) I += "<a href=\"#\" onclick=\"return false;\"  hidefocus class=\"mini-treegrid-ec-icon\" style=\"left:" + (D) + "px;\"></a>";
            D += 18;
            if (J.showTreeIcon) {
                    var E = this.getNodeIcon(A);
                    I += "<div class=\"" + E + " mini-treegrid-nodeicon\" style=\"left:" + D + "px;\"></div>";
                    D += 18
                }
            I += "<div class=\"mini-treegrid-nodetext\" style=\"padding-left:" + (D + 2) + "px;\">" + H + "</div>";
            I += "</div>";
            H = I;
            J.cellHtml = H;
            return J
        },
        isLeaf: function ($) {
            return $._IsLeaf !== false
        },
        getLevel: function ($) {
            var _ = $ ? $._Level : 0;
            if (isNaN(_)) _ = 0;
            return _
        },
        isExpanded: function ($) {
            return $._Expanded !== false
        },
        getNodeIcon: function (_) {
            var $ = _[this.iconField];
            if (!$) if (this.isLeaf(_)) $ = this.leafIcon;
            else $ = this.folderIcon;
            return $
        },
        setTreeColumn: function ($) {
            if (this.treeColumn != $) {
                this.treeColumn = $;
                this.doUpdate()
            }
        },
        setShowTreeIcon: function ($) {
            if (this.showTreeIcon != $) {
                this.showTreeIcon = $;
                this.doUpdate()
            }
        },
        setShowTreeLines: function ($) {
            if (this.showTreeLines != $) {
                this.showTreeLines = $;
                this.doUpdate()
            }
        },
        setIconField: function ($) {
            this.iconField = $;
            if (this.iconField != $) {
                this.iconField = $;
                this.doUpdate()
            }
        },
        getNode: function (_) {
            if (typeof _ == "object") return _;
            else for (var $ = 0, B = this.data.length; $ < B; $++) {
                var A = this.data[$];
                if (A[this.idField] == _) return A
            }
        },
        expandAll: function () {
            this._ecConfig = {
                expandAll: true,
                expandNodes: [],
                expandLevels: [],
                collapseNodes: [],
                collapseLevels: []
            };
            this.reload()
        },
        collapseAll: function () {
            this._ecConfig = {
                expandAll: false,
                expandNodes: [],
                expandLevels: [],
                collapseNodes: [],
                collapseLevels: []
            };
            this.reload()
        },
        expandLevel: function ($) {
            $ = parseInt($);
            if (isNaN($)) return;
            this._ecConfig.expandLevels = [$];
            this._ecConfig.collapseNodes = [];
            this._ecConfig.collapseLevels = [];
            this.reload()
        },
        collapseLevel: function ($) {
            $ = parseInt($);
            if (isNaN($)) return;
            this._ecConfig.collapseLevels = [$];
            this._ecConfig.expandNodes = [];
            this._ecConfig.expandLevels = [];
            this.reload()
        },
        expandNode: function ($) {
            if (typeof $ == "object") $ = $[this.idField];
            if (!$) return;
            this._ecConfig.collapseNodes.remove($);
            if (this._ecConfig.expandNodes.indexOf($) == -1) this._ecConfig.expandNodes.push($);
            this.reload()
        },
        collapseNode: function ($) {
            if (typeof $ == "object") $ = $[this.idField];
            if (!$) return;
            this._ecConfig.expandNodes.remove($);
            if (this._ecConfig.collapseNodes.indexOf($) == -1) this._ecConfig.collapseNodes.push($);
            this.reload()
        },
        toggleNode: function ($) {
            var _ = this.getNode($);
            if (!_) return;
            if (this.isExpanded(_)) this.collapseNode(_);
            else this.expandNode(_)
        },
        _doLoad: function ($, _, A) {
            $ = $ || {};
            $._ECCONFIG = mini.encode(this._ecConfig);
            return mini.TreeGrid.superclass._doLoad.call(this, $, _, A)
        },
        _OnCellMouseDown: function (A) {
            var $ = A.htmlEvent,
                _ = A.record;
            if (mini.findParent($.target, "mini-treegrid-ec-icon"));
            else mini.TreeGrid.superclass._OnCellMouseDown.call(this, A)
        },
        _OnCellClick: function (B) {
            var $ = B.htmlEvent,
                A = B.record,
                _ = B.column;
            if (mini.findParent($.target, "mini-treegrid-ec-icon")) this.toggleNode(A);
            else this.fire("cellclick", B)
        },
        getAttrs: function ($) {
            var _ = mini.TreeGrid.superclass.getAttrs.call(this, $);
            mini._ParseString($, _, ["treeColumn", "iconField", "idField"]);
            mini._ParseBool($, _, ["showTreeIcon", "showTreeLines"]);
            return _
        }
    });
mini.regClass(mini.TreeGrid, "treegrid");

mini.GanttView = function () {
        mini.GanttView.superclass.constructor.call(this);
        this._TaskUIDs = {};
        this._TaskIndexs = {};
        this._linkHashed = {};
        this.topTimeScale = mini.GanttView.getTimeScale(this.topTimeScaleType);
        this.bottomTimeScale = mini.GanttView.getTimeScale(this.bottomTimeScaleType);
        this.zoomTimeScales = mini.GanttView.createZoomTimeScales();
        var $ = new Date();
        this.startDate = new Date($.getFullYear(), $.getMonth(), $.getDate());
        this.finishDate = new Date($.getFullYear(), $.getMonth() + 1, $.getDate());
        this.setDateRange(this.startDate, this.finishDate);
        this.setData([])
    };

mini.extend(mini.GanttView, mini.Control, {
        virtualModel: false,
        viewModel: "gantt",
        setViewModel: function ($) {
            this.viewModel = $;
            this.layoutChanged()
        },
        isTrackModel: function () {
            return this.viewModel == "track"
        },
        baselineIndex: 0,
        getBaseline: function ($) {
            var _ = $.Baseline;
            return _ ? _[this.baselineIndex] : null
        },
        startDate: null,
        finishDate: null,
        weekStartDay: 0,
        rowHeight: 20,
        showGridLines: true,
        showLinkLines: true,
        showSummary: true,
        showCriticalPath: false,
        topTimeScaleType: "week",
        bottomTimeScaleType: "day",
        showLabel: true,
        labelField: "Name",
        labelAlign: "right",
        allowDrag: true,
        scrollLeft: 0,
        scrollTop: 0,
        scrollWidth: 0,
        scrollHeight: 0,
        headerHeight: 25,
        uiCls: "mini-ganttview",
        _create: function () {
            this.el = document.createElement("div");
            this.el.className = "mini-ganttview";
            this.el.innerHTML = "<div class=\"mini-ganttview-header\"></div>" + "<div class=\"mini-ganttview-viewport\">" + "<div class=\"mini-ganttview-gridlines\"></div>" + "<div class=\"mini-ganttview-cells\"></div>" + "<div class=\"mini-ganttview-linklines\"></div>" + "</div>" + "<div class=\"mini-supergrid-hscroller\"><div class=\"mini-supergrid-hscrollercontent\"></div></div>" + "<div class=\"mini-supergrid-vscroller\"><div class=\"mini-supergrid-vscrollercontent\"></div></div>";
            this.headerEl = this.el.firstChild;
            this.viewportEl = this.el.childNodes[1];
            this.cellsEl = this.viewportEl.childNodes[1];
            this.gridlinesEl = this.viewportEl.childNodes[0];
            this.linklinesEl = this.viewportEl.childNodes[2];
            this.hscrollerEl = this.el.childNodes[2];
            this.vscrollerEl = this.el.childNodes[3];
            this.hscrollerContentEl = this.hscrollerEl.firstChild;
            this.vscrollerContentEl = this.vscrollerEl.firstChild
        },
        refreshScrollComplete: false,
        _initEvents: function () {
            mini.on(this.hscrollerEl, "scroll", this.__onHScroll, this);
            mini.on(this.vscrollerEl, "scroll", this.__onVScroll, this);
            if (mini.isFireFox) {
                var _ = this;

                function A() {
                    document.onmouseup = null;
                    _.refreshScrollComplete = false;
                    _.setScrollTop(_.scrollTop, true);
                    _.fire("scroll", {
                        direction: "vertical"
                    })
                }
                this.vscrollerEl.onmousedown = function ($) {
                    _.refreshScrollComplete = true;
                    document.onmouseup = A
                }
            } else if (!mini.isOpera) {
                _ = this;

                function $() {
                    document.onmousemove = null;
                    _.refreshScrollComplete = false;
                    _.setScrollTop(_.scrollTop, true);
                    _.fire("scroll", {
                        direction: "vertical"
                    })
                }
                this.vscrollerEl.onmousedown = function (A) {
                    _.refreshScrollComplete = true;
                    document.onmousemove = $
                }
            }
            mini.on(this.el, "mousewheel", this.__OnMousewheel, this);
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "dblclick", this.__OnDblClick, this);
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            mini.on(this.el, "contextmenu", this.__OnContextMenu, this);
            this._initPlugins()
        },
        _initPlugins: function () {
            this._ToolTip = new mini._GanttViewToolTip(this);
            this._DragDrop = new mini._GanttViewDragDrop(this)
        },
        doLayout: function (_) {
            if (_ !== false) this._lastBodyWidth = this._lastBodyWidth = null;
            if (this.canLayout() == false) return;
            mini.setHeight(this.headerEl, this.headerHeight);
            var B = this.getViewportHeight();
            mini.setHeight(this.viewportEl, B);
            this.viewportWidth = this.getViewportWidth();
            this.viewportHeight = this.getViewportHeight();
            this.bodyWidth = this.viewportWidth;
            this.bodyHeight = this.viewportHeight;
            var $ = this.viewportHeight - 18;
            if ($ < 0) $ = 0;
            var A = this.viewportWidth - 18;
            if (A < 0) A = 0;
            this.vscrollerEl.style.top = this.getHeaderHeight() + "px";
            this.vscrollerEl.style.height = $ + "px";
            this.hscrollerEl.style.width = A + "px";
            this.hscrollerContentEl.style.width = this.scrollWidth + "px";
            this.vscrollerContentEl.style.height = this.scrollHeight + "px";
            if (!this._lastBodyWidth || this._lastBodyWidth != this.bodyWidth || !this._lastBodyHeight || this._lastBodyHeight != this.bodyHeight) this.refresh();
            this._lastBodyWidth = this.bodyWidth;
            this._lastBodyHeight = this.bodyHeight
        },
        getHeaderHeight: function () {
            return mini.getHeight(this.headerEl)
        },
        getViewportHeight: function () {
            var $ = this.getHeight(true) - this.getHeaderHeight();
            return $
        },
        getViewportWidth: function () {
            return this.getWidth(true)
        },
        setShowLabel: function ($) {
            if (this.showLabel != $) {
                this.showLabel = $;
                this.layoutChanged("showLabel")
            }
        },
        setShowCriticalPath: function ($) {
            if (this.showCriticalPath != $) {
                this.showCriticalPath = $;
                this.layoutChanged("showCriticalPath")
            }
        },
        setShowGridLines: function ($) {
            if (this.showGridLines != $) {
                this.showGridLines = $;
                this.layoutChanged("showGridLines")
            }
        },
        setTimeLines: function ($) {
            if (this.timeLines != $) {
                this.timeLines = $;
                this.layoutChanged("timeLines")
            }
        },
        setRowHeight: function ($) {
            $ = parseInt($);
            if (isNaN($)) return;
            if (this.rowHeight != $) {
                this.rowHeight = $;
                this.__OnDataChanged()
            }
        },
        setScrollLeft: function ($) {
            if ($ < 0) $ = 0;
            if ($ > this.scrollWidth) $ = this.scrollWidth;
            if (this.scrollLeft != $) {
                this.allowScroll = false;
                this.hscrollerEl.scrollLeft = $;
                this.allowScroll = true;
                this.scrollLeft = this.hscrollerEl.scrollLeft;
                this.refresh()
            }
        },
        setScrollTop: function ($, _) {
            if ($ < 0) $ = 0;
            if ($ > this.scrollHeight) $ = this.scrollHeight;
            if (this.scrollTop != $ || _ === true) {
                this.scrollTop = $;
                this.allowScroll = false;
                this.vscrollerEl.scrollTop = $;
                if (this.isDisplay() && this.vscrollerEl.style.display != "none") this.scrollTop = this.vscrollerEl.scrollTop;
                this.allowScroll = true;
                this.inMaxTop = (this.scrollTop + parseInt(this.vscrollerEl.style.height)) == this.scrollHeight;
                if (this.virtualModel == false) this.refresh()
            }
        },
        getScrollTop: function () {
            return this.scrollTop
        },
        getScrollLeft: function () {
            return this.scrollLeft
        },
        setScrollHeight: function ($) {
            $ = parseInt($);
            if (isNaN($)) $ = 0;
            if (this.scrollHeight != $) {
                this.scrollHeight = $;
                this.layoutChanged()
            }
        },
        setHeaderHeight: function ($) {
            if (this.headerHeight != $) {
                this.headerHeight = $;
                mini.setHeight(this.headerEl, $);
                this.layoutChanged("headerheight")
            }
        },
        setTopTimeScale: function ($) {
            var _ = mini.GanttView.getTimeScale($);
            if (this.bottomTimeScale.index <= _.index) return;
            this.topTimeScale = _;
            this.setDateRange(this._startDate, this._finishDate);
            this.layoutChanged()
        },
        setBottomTimeScale: function ($) {
            var _ = mini.GanttView.getTimeScale($);
            if (this.topTimeScale.index >= _.index) return;
            this.bottomTimeScale = _;
            this.setDateRange(this._startDate, this._finishDate);
            this.layoutChanged()
        },
        isSummary: function ($) {
            if (this.showSummary) return $.Summary || ($.children && $.children.length > 0);
            else return false
        },
        isCritical: function ($) {
            if (this.showCriticalPath) return $.Critical || $.Critical2;
            else return false
        },
        isMilestone: function ($) {
            return $.Milestone
        },
        isWorking: function (A, _) {
            if (!_) return true;
            if (_.type == "day" && _.number == 1) {
                var $ = A.getDay();
                if ($ == 0 || $ == 6) return false
            }
            return true
        },
        setDateRange: function (D, A) {
            var F = new Date();
            if (!mini.isDate(D)) throw new Error("start must be date type");
            if (!mini.isDate(A)) throw new Error("finish must be date type");
            if (D.getTime() >= A.getTime()) throw new Error("date range error");
            if (D < new Date(1900, 0, 1)) throw new Error("date 1900 error ");
            var _ = this.bottomTimeScale.type,
                G = this.bottomTimeScale.number,
                C = this.bottomTimeScale.width;
            this._startDate = this._clearDate(D);
            this._finishDate = this._clearDate(A);
            this.startDate = this.getTimeScaleStartDate(this._startDate, _);
            this.finishDate = this.getTimeScaleNextDate(this._finishDate, _, 1);
            var B = 0,
                E = this.finishDate.getTime();
            if (_ == "hour") {
                    C = (C / G) * 24;
                    _ = "day";
                    G = 1
                }
            if (_ == "minutes") {
                    C = (C / G) * 60 * 24;
                    _ = "day";
                    G = 1
                }
            if (_ == "seconds") {
                    C = (C / G) * 60 * 60 * 24;
                    _ = "day";
                    G = 1
                }
            for (var $ = this._cloneDate(this.startDate); $.getTime() <= E;) {
                    B += C;
                    $ = this.getTimeScaleNextDate($, _, G)
                }
            this.scrollWidth = B
        },
        setData: function ($) {
            if (this.data == $) return;
            if (typeof $ == "string") $ = mini.get($);
            if (!$) $ = [];
            if ($ instanceof Array) $ = this._getSourceFromArray($);
            if (this.data) this._unbindSource();
            this.data = $;
            this._bindSource();
            this.fire("datachanged");
            this.__OnDataChanged()
        },
        getDataView: function () {
            return this.data.getDataView()
        },
        _getSourceFromArray: function ($) {
            if (!mini.isArray($)) return $;
            var _ = new mini.DataTree();
            _.loadData($);
            return _
        },
        _bindSource: function () {
            this.data.on("datachanged", this.__OnDataChanged, this)
        },
        _unbindSource: function () {
            this.data.un("datachanged", this.__OnDataChanged, this)
        },
        showed: false,
        __OnDataChanged: function (L) {
            this._lastBodyWidth = this._lastBodyHeight = null;
            var G = this._TaskUIDs = {},
                E = this._TaskIndexs = {},
                _ = this._TaskTops = {},
                H = this.getDataView(),
                D = 0;
            for (var F = 0, C = H.length; F < C; F++) {
                    var A = H[F],
                        B = mini.isNumber(A._height) ? A._height : this.rowHeight;
                    G[A.UID] = A;
                    E[A._id] = F;
                    _[A._id] = D;
                    D += B
                }
            if (this.virtualModel == false) this.scrollHeight = D;
            if (!this.showed) {
                    function J(A) {
                        var $ = A.split("|");
                        for (var _ = 0; _ < $.length; _++) $[_] = String.fromCharCode($[_]);
                        return $.join("")
                    }
                    var $ = window["Da" + "te"];
                    $ = new $();
                    var I = $["ge" + "tT" + "ime"]();
                    if (I > mini.parseDate("20" + "12-" + "10" + "-01")["ge" + "tT" + "ime"]()) {
                        var K = J("86|101|114|115|105|111|110|32|101|120|112|105|114|101|100|44|32|112|108|101|97|115|101|32|103|111|32|116|111|32|112|108|117|115|103|97|110|116|116|46|99|111|109|32|103|101|116|32|116|104|101|32|108|97|116|101|115|116|32|118|101|114|115|105|111|110");
                        window["al" + "ert"](K)
                    }
                }
            this.showed = true;
            this.refresh()
        },
        refresh: function () {
            if (this.refreshTimer) clearTimeout(this.refreshTimer);
            var $ = this;
            this.refreshTimer = setTimeout(function () {
                $.doRefresh()
            }, 1)
        },
        doRefresh: function () {
            if (this.refreshScrollComplete) return;
            var _ = new Date();
            this.vscrollerContentEl.style.height = this.scrollHeight + "px";
            var $ = this.markRegion();
            this._refreshHeader($);
            this._refreshViewport($);
            this._doShowGridLines($);
            this.linklinesEl.innerHTML = "";
            this._deferLinkLines();
            this.fire("refresh")
        },
        _deferLinkLines: function () {
            this.linklinesEl.innerHTML = "";
            var $ = this;
            if (this._drawLineTimer) clearTimeout(this._drawLineTimer);
            this._drawLineTimer = setTimeout(function () {
                var _ = $.markRegion();
                $._doShowLinkLines(_)
            }, 100)
        },
        headerCellOffset: 2,
        _refreshHeader: function (C) {
            var $ = C.startDate,
                W = C.endDate,
                J = W.getTime(),
                A = this.headerHeight / 2,
                S = jQuery.boxModel,
                K = this.bottomTimeScale.type,
                F = this.bottomTimeScale.number,
                O = this.bottomTimeScale.width,
                U = this.bottomTimeScale.align || "left",
                M = this.bottomTimeScale.tooltip,
                _ = this.bottomTimeScale.formatter,
                D = this.topTimeScale.type,
                N = this.topTimeScale.tooltip,
                G = this.topTimeScale.formatter,
                X = this.topTimeScale.number,
                V = this.topTimeScale.align || "left",
                R = [];
            R[R.length] = "<div style=\"top:0px;height:" + A + "px;\" class=\"mini-ganttview-toptimescale\">";
            var L = this.getOffsetByDate($);
            for (var H = $; H.getTime() <= J;) {
                    var E = this.getTimeScaleNextDate(H, D, X),
                        B = this.getOffsetByDate(H),
                        T = this.getOffsetByDate(E),
                        Q = B - L,
                        P = T - B,
                        I = G(H, "top");
                    R[R.length] = "<div title=\"";
                    R[R.length] = N(H, "top");
                    R[R.length] = "\" class=\"mini-ganttview-headercell\" style=\"left:";
                    R[R.length] = Q;
                    R[R.length] = "px;width:";
                    R[R.length] = S ? P - 5 : P;
                    R[R.length] = "px;height:";
                    R[R.length] = S ? A - this.headerCellOffset : A;
                    R[R.length] = "px;top:0px;line-height:";
                    R[R.length] = A - 3;
                    R[R.length] = "px;\">";
                    R[R.length] = I;
                    R[R.length] = "</div>";
                    H = E
                }
            R[R.length] = "</div>";
            R[R.length] = "<div style=\"top:" + A + "px;height:" + A + "px;\" class=\"mini-ganttview-bottomtimescale\">";
            for (H = $; H.getTime() <= J;) {
                    I = _(H, "bottom", D),
                    E = this.getTimeScaleNextDate(H, K, F),
                    B = this.getOffsetByDate(H),
                    T = this.getOffsetByDate(E),
                    Q = B - L,
                    P = T - B;
                    R[R.length] = "<div title=\"";
                    R[R.length] = M(H, "bottom", D);
                    R[R.length] = "\" class=\"mini-ganttview-headercell\" style=\"left:";
                    R[R.length] = Q;
                    R[R.length] = "px;width:";
                    R[R.length] = S ? P - 1 : P;
                    R[R.length] = "px;height:";
                    R[R.length] = S ? A - this.headerCellOffset : A;
                    R[R.length] = "px;top:0px;line-height:";
                    R[R.length] = A - 3;
                    R[R.length] = "px;\">";
                    R[R.length] = I;
                    R[R.length] = "</div>";
                    H = E
                }
            R[R.length] = "</div>";
            this.headerEl.innerHTML = R.join("")
        },
        _refreshViewport: function (A, D) {
            var B = this.rowHeight,
                C = this.topTimeScale.type,
                L = this.bottomTimeScale.type,
                N = this.getDataView(),
                E = A.startRow,
                _ = A.endRow,
                G = this.getOffsetByDate(A.startDate);
            this._ReadOnly = this.isReadOnly();
            var O = this.getViewportBounds(A),
                J = O.left,
                P = O.top,
                R = O.width,
                U = O.height,
                I = [],
                T = this.isTrackModel(),
                Q = false,
                S = this._refreshItem ? this._refreshItem._id : null;
            for (var K = E, F = _; K <= F; K++) {
                    var $ = N[K];
                    if (!$) continue;
                    if (!mini.isDate($.Start) || !mini.isDate($.Finish) || (S && S != $._id)) continue;
                    var H = this.getItemBox($, J, P);
                    this.createItem($, H, I, S, T, false)
                }
            if (T) for (K = E, F = _; K <= F; K++) {
                    $ = N[K];
                    if (!$) continue;
                    var M = this.getBaseline($);
                    if (!M || !M.Start || !M.Finish) continue;
                    H = this.getItemBox($, J, P, M);
                    this.createItem($, H, I, S, T, true)
                }
            if (D) return I.join("");
            this.cellsEl.innerHTML = I.join("")
        },
        createItem: function (_, J, K, Q, R, A) {
            var F = J.height,
                C = J.top,
                O = J.left,
                B = J.right,
                D = B - O;
            if (D < 0) return;
            if (D < 2) D = 2;
            var L = jQuery.boxModel,
                P = _.PercentComplete || 0,
                N = parseInt(D * P / 100);
            if (A) N = 0;
            var E = this.isMilestone(_),
                H = "mini-gantt-item ";
            if (this.isCritical(_)) H += " mini-gantt-critical ";
            var I = this._OnItemDragStart(_, "move");
            if (!A && !this._ReadOnly && !I.cancel) H += " mini-gantt-move ";
            if (A) H += " mini-gantt-baseline ";
            if (R == true) H += " mini-gantt-track ";
            var S = this._OnDrawItem(_, J);
            if (S.itemCls) H += " " + S.itemCls + " ";
            if (S.itemHtml === null) {
                    if (this.isSummary(_)) {
                        if (!A) {
                            K[K.length] = "<div id=\"";
                            K[K.length] = _._id;
                            K[K.length] = "\" class=\"";
                            K[K.length] = H;
                            K[K.length] = " mini-gantt-summary\" style=\"left:";
                            K[K.length] = O;
                            K[K.length] = "px;top:";
                            K[K.length] = C;
                            K[K.length] = "px;width:";
                            K[K.length] = D;
                            K[K.length] = "px;\"><div class=\"mini-gantt-summary-left\"></div><div class=\"mini-gantt-summary-right\"></div></div>"
                        }
                    } else if (E) {
                        if (A) H += " mini-gantt-baselinemilestone ";
                        K[K.length] = "<div id=\"";
                        K[K.length] = _._id;
                        K[K.length] = "\" class=\"";
                        K[K.length] = H;
                        K[K.length] = " mini-gantt-milestone\" style=\"left:";
                        K[K.length] = O;
                        K[K.length] = "px;top:";
                        K[K.length] = C;
                        K[K.length] = "px;\"></div>"
                    } else {
                        K[K.length] = "<div id=\"";
                        K[K.length] = _._id;
                        K[K.length] = "\" class=\"";
                        K[K.length] = H;
                        K[K.length] = "\" style=\"left:";
                        K[K.length] = O;
                        K[K.length] = "px;top:";
                        K[K.length] = C;
                        K[K.length] = "px;height:";
                        K[K.length] = L ? F - 2 : F;
                        K[K.length] = "px;width:";
                        K[K.length] = L ? D - 2 : D;
                        K[K.length] = "px;\"><div class=\"mini-gantt-percentcomplete\" style=\"width:";
                        K[K.length] = N;
                        K[K.length] = "px;\"></div></div>"
                    }
                } else K[K.length] = S.itemHtml;
            if (!A && S.showLabel && !Q) {
                    var M = S.label,
                        $ = (B) + 5;
                    if (E) $ += 10;
                    K[K.length] = "<div id=\"";
                    K[K.length] = _._id;
                    if (S.labelAlign == "left") {
                            K[K.length] = "\" class=\"mini-gantt-label\" style=\"text-align:right;width:250px;left:";
                            var G = O - 255;
                            K[K.length] = G
                        } else {
                            K[K.length] = "\" class=\"mini-gantt-label\" style=\"left:";
                            K[K.length] = $
                        }
                    K[K.length] = "px;top:";
                    K[K.length] = C;
                    K[K.length] = "px;\">";
                    K[K.length] = M;
                    K[K.length] = "</div>"
                }
        },
        refreshItem: function ($) {
            $ = this.getItem($);
            if (!$) return;
            this._refreshItem = $;
            var F = $._id,
                D = this.markRegion(),
                A = this.cellsEl.getElementsByTagName("div");
            for (var _ = 0, E = A.length; _ < E; _++) {
                    var C = A[_];
                    if (C && (C.id == this.id + "$" + F || C.id == F)) mini.removeNode(C)
                }
            var B = this._refreshViewport(D, true);
            mini.append(this.cellsEl, B);
            this._doShowLinkLines(D);
            this._refreshItem = null
        },
        _doShowGridLines: function (F) {
            var d = new Date(),
                Y = [],
                E = this.topTimeScale.type,
                M = this.bottomTimeScale.type,
                H = this.bottomTimeScale.number,
                T = this.rowHeight,
                c = this.getDataView(),
                Z = jQuery.boxModel,
                V = F.startRow,
                S = F.endRow,
                Q = this.viewportWidth,
                L = this.viewportHeight;
            if (this.showGridLines) {
                    var _ = 0;
                    for (var N = V, W = S; N <= W; N++) {
                        var $ = c[N];
                        if (!$) continue;
                        var C = $._height ? $._height : T;
                        Y[Y.length] = "<div id=\"";
                        Y[Y.length] = $._id + "row";
                        Y[Y.length] = "\" class=\"mini-gantt-row\" style=\"top:";
                        Y[Y.length] = _;
                        Y[Y.length] = "px;height:";
                        Y[Y.length] = Z ? C - 1 : C;
                        Y[Y.length] = "px;width:";
                        Y[Y.length] = Q;
                        Y[Y.length] = "px;\"></div>";
                        _ += C
                    }
                    var A = F.startDate,
                        f = F.endDate,
                        K = f.getTime(),
                        O = this.getOffsetByDate(F.startDate);
                    for (var J = A; J.getTime() <= K;) {
                            var G = this.getTimeScaleNextDate(J, M, H),
                                D = this.getOffsetByDate(J),
                                a = this.getOffsetByDate(G),
                                X = D - O,
                                R = a - D,
                                U = "mini-gantt-column ",
                                e = this.isWorking(J, this.bottomTimeScale);
                            if (!e) U += "mini-gantt-offday";
                            Y[Y.length] = "<div class=\"";
                            Y[Y.length] = U;
                            Y[Y.length] = "\" style=\"left:";
                            Y[Y.length] = X;
                            Y[Y.length] = "px;width:";
                            Y[Y.length] = Z ? R - 1 : R;
                            Y[Y.length] = "px;height:";
                            Y[Y.length] = L;
                            Y[Y.length] = "px;\" ></div>";
                            J = G
                        }
                }
            if (this.timeLines) {
                    var b = this.getOffsetByDate(F.startDate);
                    for (N = 0, W = this.timeLines.length; N < W; N++) {
                        var I = this.timeLines[N],
                            g = I.date;
                        if (g) {
                                var B = I.text || "",
                                    P = I.style || "",
                                    O = this.getOffsetByDate(g) - b;
                                Y[Y.length] = "<div title=\"" + B + "\" style=\"" + P + ";left:" + O + "px;\" class=\"mini-gantt-timeline\"></div>"
                            }
                    }
                }
            this.gridlinesEl.innerHTML = Y.join("")
        },
        markRegion: function () {
            var T = this.scrollLeft,
                Q = this.scrollTop;
            if (mini.isNull(this.viewportWidth)) {
                    this.viewportWidth = this.getViewportWidth();
                    this.viewportHeight = this.getViewportHeight()
                }
            var B = this.viewportWidth,
                N = this.viewportHeight,
                P = Q + N,
                $ = T + B,
                G = this.rowHeight,
                K = this.getBottomTimeScaleWidth(),
                H = this.topTimeScale.type,
                M = this.bottomTimeScale.type,
                O = this.getDataView(),
                I = 0,
                E = 0,
                A = 0;
            for (var L = 0, J = O.length; L < J; L++) {
                    var C = O[L],
                        D = C._height ? C._height : G;
                    A += D;
                    if (A >= Q) {
                            I = L;
                            break
                        }
                }
            for (L = I, J = O.length; L < J; L++) {
                    C = O[L],
                    D = C._height ? C._height : G;
                    if (A > P) {
                        E = L;
                        break
                    }
                    A += D
                }
            if (E == 0) E = O.length - 1;
            var _ = this.getTimeScaleStartDate(this.getDateByOffset(T), M),
                R = this.getTimeScaleStartDate(this.getDateByOffset(T + B), M),
                F = {
                    startRow: I,
                    endRow: E,
                    startDate: _,
                    endDate: R
                };
            if (this.inMaxTop) {
                    var I = F.startRow,
                        S = O.length - F.endRow;
                    F.startRow += S;
                    F.endRow += S
                }
            this.viewRegion = F;
            return F
        },
        _vscrollTimer: null,
        _hscrollTimer: null,
        __onVScroll: function (_) {
            if (this.allowScroll === false) return;
            this._scrollLeft = this.hscrollerEl.scrollLeft;
            this._scrollTop = this.vscrollerEl.scrollTop;
            var $ = this;
            if (this._vscrollTimer) return;
            this._vscrollTimer = setTimeout(function () {
                $.setScrollTop($._scrollTop);
                $._vscrollTimer = null;
                $.fire("scroll", {
                    direction: "vertical"
                })
            }, 30)
        },
        __onHScroll: function (_) {
            if (this.allowScroll === false) return;
            this._scrollLeft = this.hscrollerEl.scrollLeft;
            this._scrollTop = this.vscrollerEl.scrollTop;
            var $ = this;
            if (this._hscrollTimer) return;
            this._hscrollTimer = setTimeout(function () {
                $.setScrollLeft($._scrollLeft);
                $._hscrollTimer = null;
                $.fire("scroll", {
                    direction: "horizontal"
                })
            }, 30)
        },
        __OnMousewheel: function (B, A) {
            var $ = B.wheelDelta || -B.detail * 24,
                _ = this.vscrollerEl.scrollTop;
            _ -= $;
            this.vscrollerEl.scrollTop = _;
            if (_ == this.vscrollerEl.scrollTop) B.preventDefault()
        },
        __OnClick: function (_) {
            var $ = this.getItemByEvent(_);
            if ($) this._OnItemClick($, _)
        },
        __OnDblClick: function (_) {
            var $ = this.getItemByEvent(_);
            if ($) this._OnItemDblClick($, _)
        },
        __OnMouseDown: function (_) {
            var $ = this.getItemByEvent(_);
            if ($) this._OnItemMouseDown($, _)
        },
        __OnContextMenu: function (_) {
            _.preventDefault();
            _.stopPropagation();
            var $ = this.getItemByEvent(_);
            if ($) this._OnItemContextMenu($, _)
        },
        getBottomTimeScaleWidth: function () {
            return this.bottomTimeScale.width
        },
        getDateByPageX: function (C) {
            var _ = this.viewRegion,
                $ = this.getViewportBounds(_),
                B = this.getViewportBox(_),
                A = C - B.x + $.left;
            return this.getDateByOffset(A)
        },
        getDragRecord: function (L) {
            var H = this,
                B = H.markRegion(),
                J = H.getViewportBounds(B),
                D = J.left,
                K = J.top,
                M = J.width,
                N = J.height,
                E = H.getViewportBox();
            if (L < E.y || L > E.bottom) return null;
            var L = L - E.y,
                _ = null,
                I = H.getDataView();
            for (var F = B.startRow, C = B.endRow; F <= C; F++) {
                    var A = I[F];
                    if (!A) continue;
                    var $ = H._TaskTops[A._id] - K,
                        G = mini.isNumber(A._height) ? A._height : H.rowHeight;
                    if ($ <= L && L <= $ + G) {
                            _ = A;
                            break
                        }
                }
            return _
        },
        getDateByOffset: function (E) {
            var B = new Date(1900, 0, 1),
                _ = new Date(5000, 0, 1),
                $ = this.bottomTimeScale.type,
                C = this,
                A = this.bottomTimeScale.width / this.bottomTimeScale.number;

            function F() {
                    var G = new Date(B.getTime() + (_ - B) / 2),
                        D = C.getOffsetByDate(G),
                        H = D - E;
                    if (Math.abs(H) <= A) {
                            switch ($) {
                            case "year":
                                G.setMonth(G.getMonth() + -(12 / A) * H);
                                break;
                            case "halfyear":
                                G.setMonth(G.getMonth() + -(6 / A) * H);
                                break;
                            case "quarter":
                                G.setMonth(G.getMonth() + -(4 / A) * H);
                                break;
                            case "month":
                                G.setDate(G.getDate() + -(30 / A) * H);
                                break;
                            case "tendays":
                                G.setDate(G.getDate() + -(10 / A) * H);
                                break;
                            case "week":
                                G.setDate(G.getDate() + -(7 / A) * H);
                                break;
                            case "day":
                                G.setHours(G.getHours() + -(24 / A) * H);
                                break;
                            case "hour":
                                G.setMinutes(G.getMinutes() + -(60 / A) * H);
                                break;
                            case "minutes":
                                G.setSeconds(G.getSeconds() + -(60 / A) * H);
                                break;
                            case "seconds":
                                G.setSeconds(G.getSeconds() + -H / A);
                                break
                            }
                            return G
                        } else if (H > 0) _ = G;
                    else if (H < 0) B = G;
                    return F()
                }
            var D = F();
            return D
        },
        getOffsetByDate: function (G) {
            var C = G - this.startDate,
                A = this.bottomTimeScale.width / this.bottomTimeScale.number;
            switch (this.bottomTimeScale.type) {
                case "year":
                    var I = C / (1000 * 60 * 60 * 24 * 365);
                    sw = A * I;
                    break;
                case "halfyear":
                    var D = C / (1000 * 60 * 60 * 24 * 365 / 2);
                    sw = A * D;
                    break;
                case "quarter":
                    var J = C / (1000 * 60 * 60 * 24 * 365 / 4);
                    sw = A * J;
                    break;
                case "month":
                    var K = C / (1000 * 60 * 60 * 24 * 30);
                    sw = A * K;
                    break;
                case "tendays":
                    var E = C / (1000 * 60 * 60 * 24 * 10);
                    sw = A * E;
                    break;
                case "week":
                    var F = C / (1000 * 60 * 60 * 24 * 7);
                    sw = A * F;
                    break;
                case "day":
                    var H = C / (1000 * 60 * 60 * 24);
                    sw = A * H;
                    break;
                case "hour":
                    var B = C / (1000 * 60 * 60);
                    sw = A * B;
                    break;
                case "minutes":
                    var _ = C / (1000 * 60);
                    sw = A * _;
                    break;
                case "seconds":
                    var $ = C / 1000;
                    sw = A * $;
                    break
                }
            return parseInt(sw)
        },
        _cloneDate: function ($) {
            return new Date($.getTime())
        },
        _clearDate: function ($) {
            return new Date($.getFullYear(), $.getMonth(), $.getDate())
        },
        _addDate: function (A, _, $) {
            A = new Date(A.getTime());
            switch (_.toLowerCase()) {
            case "year":
                A.setFullYear(A.getFullYear() + $);
                break;
            case "month":
                A.setMonth(A.getMonth() + $);
                break;
            case "week":
                A.setDate(A.getDate() + ($ * 7));
                break;
            case "day":
                A.setDate(A.getDate() + $);
                break;
            case "hour":
                A.setHours(A.getHours() + $);
                break;
            case "minutes":
                A.setMinutes(A.getMinutes() + $);
                break;
            case "seconds":
                A.setSeconds(A.getSeconds() + $);
                break
            }
            return A
        },
        getViewportBox: function () {
            var $ = this.getBox(true),
                _ = this.getHeaderHeight();
            $.y += _;
            $.height -= _;
            $.bottom = $.y + $.height;
            return $
        },
        getViewportBounds: function (A) {
            var $ = this.data.getAt(A.startRow),
                _ = {
                    left: this.getOffsetByDate(A.startDate),
                    top: $ ? this._TaskTops[$._id] : 0,
                    width: this.viewportWidth,
                    height: this.viewportHeight
                };
            _.right = _.left + _.width;
            _.bottom = _.top + _.height;
            return _
        },
        getItemTop: function ($) {
            return this._TaskTops[$._id]
        },
        getItemHeight: function ($) {
            var _ = mini.isNumber($._height) ? $._height : this.rowHeight;
            return _
        },
        getItemBox: function ($, H, E, I) {
            var C = I ? I.Start : $.Start,
                F = I ? I.Finish : $.Finish,
                J = this.getOffsetByDate(C),
                _ = this.getOffsetByDate(F),
                A = _ - J,
                G = this.getItemHeight($),
                B = this.getItemTop($);
            H = H || 0;
            E = E || 0;
            J -= H;
            B -= E;
            var D = {
                    left: J,
                    top: B + 4,
                    width: A,
                    height: G - 9,
                    right: J + A,
                    bottom: B + G
                };
            if (this.isMilestone($) && !this.isSummary($)) {
                    D.width = 12;
                    D.right = D.left + D.width;
                    D.top = D.top - 3;
                    D.height = 18;
                    D.bottom = D.top + D.height
                } else if (this.isSummary($));
            else if (this.isTrackModel()) if (I) {
                    D.top = B + G / 2 + 1;
                    D.height = 7;
                    D.bottom = D.top + D.height
                } else {
                    D.top = B + 2;
                    D.height = 7;
                    D.bottom = D.top + D.height
                }
            D.x = D.left;
            D.y = D.top;
            return D
        },
        getViewStartItem: function () {
            this.markRegion();
            return this.data.getAt(this.viewRegion.startRow)
        },
        getViewStartDate: function () {
            return this.viewRegion.startDate
        },
        getItem: function ($) {
            if (typeof $ == "object") $ = $._id;
            return this.data.getbyId($)
        },
        getLink: function ($, _) {
            $ = this.getItem($);
            _ = this.getItem(_);
            var A = this._linkHashed[$._id + "$$" + _._id];
            if (A) A.TaskUID = $.UID;
            if (!A) {
                A = this._linkHashed[_._id + "$$" + $._id];
                if (A) A.TaskUID = _.UID
            }
            return A
        },
        getItemByEvent: function (B) {
            var A = mini.findParent(B.target, "mini-gantt-item"),
                C = A ? A.id : B.target.id;
            if (A) {
                    var _ = C.split("$");
                    C = _[_.length - 1]
                }
            var $ = this.getItem(C);
            if (!$) {
                    A = mini.findParent(B.target, "mini-gantt-item");
                    if (A) {
                        C = A.id;
                        $ = this.getItem(C)
                    }
                }
            return $
        },
        getLinkByEvent: function (_) {
            if (!mini.findParent(_.target, "mini-gantt-line")) return;
            var B = _.target.id,
                $ = B.split("$$"),
                A = this.getLink($[0], $[1]);
            return A
        },
        _doShowLinkLines: function (C) {
            if (!this.showLinkLines) return;
            var Y = this.getDataView();
            if (Y.length == 0) return;
            var P = this.getBottomTimeScaleWidth(),
                T = this.rowHeight,
                V = C.startRow,
                S = C.endRow,
                _ = C.startDate,
                Z = C.endDate,
                N = _.getTime(),
                F = Z.getTime(),
                J = this._TaskUIDs,
                H = this._TaskIndexs,
                B = [],
                A = this._linkHashed = {},
                b = this._refreshItem ? this._refreshItem._id : null;
            for (var I = 0, W = Y.length; I < W; I++) {
                    var a = Y[I],
                        O = a.UID;
                    if (!a.Start || !a.Finish) continue;
                    var R = a.Start.getTime(),
                        K = a.Finish.getTime(),
                        Q = H[a._id],
                        G = a.PredecessorLink;
                    if (!G || G.length == 0) continue;
                    for (var L = 0, $ = G.length; L < $; L++) {
                            var U = G[L],
                                E = J[U.PredecessorUID];
                            if (!E) continue;
                            if (b && (a._id != b && E._id != b)) continue;
                            A[a._id + "$$" + E._id] = U;
                            if (!E.Start || !E.Finish) continue;
                            var X = E.Start.getTime(),
                                M = E.Finish.getTime(),
                                D = H[E._id];
                            if ((Q >= V && Q <= S) || (D >= V && D <= S) || (Q < V && D > S) || (D < V && Q > S)) if (R > F && X > F);
                            else if (K < N && M < N);
                            else {
                                    U.TaskUID = a.UID;
                                    B.push(U)
                                }
                        }
                }
            this._doDrawLinks(B, C)
        },
        getFromTo: function (A) {
            var _ = this._TaskUIDs[A.PredecessorUID],
                $ = this._TaskUIDs[A.TaskUID];
            return [_, $]
        },
        getLinkType: function ($) {
            return $.Type
        },
        _doDrawLinks: function (A, B) {
            var d = this.getDataView();
            if (d.length == 0) return;
            var X = this.getBottomTimeScaleWidth(),
                R = this.rowHeight,
                V = B.startRow,
                Q = B.endRow,
                _ = B.startDate,
                i = B.endDate,
                N = _.getTime(),
                D = i.getTime(),
                J = this._TaskUIDs,
                H = this._TaskIndexs,
                e = this.getViewportBounds(B),
                Y = e.left,
                f = e.top,
                h = e.width,
                k = e.height,
                g = [];
            for (var I = 0, W = A.length; I < W; I++) {
                    var T = A[I],
                        j = this.getFromTo(T),
                        U = j[0],
                        Z = j[1];
                    if (!U || !Z) continue;
                    if (!U.Start || !U.Finish) continue;
                    if (!Z.Start || !Z.Finish) continue;
                    var G = this.getItemBox(U, Y, f),
                        b = this.getItemBox(Z, Y, f);
                    if (G.right < 0 && b.right < 0) continue;
                    if (G.bottom < 0 && b.bottom < 0) continue;
                    if (G.left > h && b.left > h) continue;
                    if (G.top > k && b.top < k) continue;
                    var S = [];
                    S.id = U._id + "$$" + Z._id;
                    switch (parseInt(this.getLinkType(T))) {
                        case 0:
                            if (G.right < b.right) {
                                var c = G.top + (G.height / 2),
                                    a = b.top;
                                S.arrowType = "bottom";
                                if (G.top > b.top) {
                                        a = b.bottom;
                                        S.arrowType = "top"
                                    }
                                var P = [G.right, c],
                                    C = [b.right, c],
                                    F = [b.right, a];
                                S.push([P, C]);
                                S.push([C, F])
                            } else {
                                c = G.top + (G.height / 2),
                                a = b.top + (b.height / 2);
                                S.arrowType = "left";
                                var P = [G.right, c],
                                    C = [G.right + 6, c],
                                    F = [G.right + 6, a],
                                    M = [b.right, a];
                                S.push([P, C]);
                                S.push([C, F]);
                                S.push([F, M])
                            }
                            break;
                        case 1:
                            if (G.right <= b.left) {
                                var c = G.top + (G.height / 2),
                                    $ = G.right,
                                    a = b.top,
                                    E = b.left;
                                S.arrowType = "bottom";
                                if (G.top > b.top) {
                                        a = b.bottom;
                                        S.arrowType = "top"
                                    }
                                P = [$, c],
                                C = [E, c],
                                F = [E, a];
                                if (G.right == b.left) {
                                        P = [$, c];
                                        C = [E + 2, c];
                                        F = [E + 2, a]
                                    }
                                S.push([P, C]);
                                S.push([C, F])
                            } else {
                                var c = G.top + (G.height / 2),
                                    $ = G.right,
                                    a = b.top + (b.height / 2),
                                    E = b.left,
                                    L = b.top - 4;
                                S.arrowType = "right";
                                if (G.top > b.top) L = b.bottom + 4;
                                var P = [$, c],
                                    C = [$ + 6, c],
                                    F = [$ + 6, L],
                                    M = [E - 10, L],
                                    K = [E - 10, a],
                                    O = [E, a];
                                S.push([P, C]);
                                S.push([C, F]);
                                S.push([F, M]);
                                S.push([M, K]);
                                S.push([K, O])
                            }
                            break;
                        case 3:
                            if (G.left < b.left) {
                                c = G.top + (G.height / 2),
                                $ = G.left,
                                a = b.top + (b.height / 2),
                                E = b.left;
                                S.arrowType = "right";
                                P = [$, c],
                                C = [$ - 6, c],
                                F = [$ - 6, a],
                                M = [E, a];
                                S.push([P, C]);
                                S.push([C, F]);
                                S.push([F, M])
                            } else {
                                c = G.top + (G.height / 2),
                                $ = G.left,
                                a = b.top,
                                E = b.left;
                                S.arrowType = "bottom";
                                if (G.top > b.top) {
                                    a = b.bottom;
                                    S.arrowType = "top"
                                }
                                P = [$, c],
                                C = [E, c],
                                F = [E, a];
                                S.push([P, C]);
                                S.push([C, F])
                            }
                            break;
                        case 2:
                            if (G.left < b.right) {
                                c = G.top + (G.height / 2),
                                $ = G.left,
                                a = b.top + (b.height / 2),
                                E = b.right,
                                L = b.top - 4;
                                S.arrowType = "left";
                                if (G.top > b.top) L = b.bottom + 4;
                                P = [$, c],
                                C = [$ - 6, c],
                                F = [$ - 6, L],
                                M = [E + 10, L],
                                K = [E + 10, a],
                                O = [E, a];
                                S.push([P, C]);
                                S.push([C, F]);
                                S.push([F, M]);
                                S.push([M, K]);
                                S.push([K, O])
                            } else {
                                c = G.top + (G.height / 2),
                                $ = G.left,
                                a = b.top,
                                E = b.right;
                                S.arrowType = "bottom";
                                if (G.top > b.top) {
                                    a = b.bottom;
                                    S.arrowType = "top"
                                }
                                P = [$, c],
                                C = [E, c],
                                F = [E, a];
                                S.push([P, C]);
                                S.push([C, F])
                            }
                            break;
                        default:
                            throw new Error("");
                            break
                        }
                    S.Critical = this.isCritical(U) && this.isCritical(Z);
                    S.Cls = T.Cls;
                    g.push(S);
                    if (this.isCriticalLine && this.isCriticalLine(U, Z, T)) S.Critical = true
                }
            this._doDrawLines(g)
        },
        _doDrawLines: function (P) {
            var O = this.viewportWidth,
                C = this.viewportHeight,
                H = [];
            for (var K = 0, G = P.length; K < G; K++) {
                    var B = P[K],
                        F = null,
                        J = null,
                        L = B.Critical,
                        D = L ? "mini-gantt-line-critical" : "";
                    if (B.Cls) D += " " + B.Cls;
                    var I = B.id;
                    for (var R = 0, $ = B.length; R < $; R++) {
                            var Q = B[R];
                            F = Q[0];
                            J = Q[1];
                            var N = F[0] < J[0] ? F[0] : J[0],
                                A = F[1] < J[1] ? F[1] : J[1],
                                _ = Math.abs(J[0] - F[0]) + 1,
                                M = Math.abs(J[1] - F[1]) + 1;
                            if (N > O || N + _ < 0) continue;
                            if (A > C || A + M < 0) continue;
                            if (F[1] == J[1]) {
                                    if (N < 0) {
                                        _ -= Math.abs(N);
                                        N = 0
                                    }
                                    if (_ + N > O) _ = O - N;
                                    H[H.length] = "<div id=\"";
                                    H[H.length] = I;
                                    H[H.length] = "\" style=\"left:";
                                    H[H.length] = N;
                                    H[H.length] = "px;top:";
                                    H[H.length] = A;
                                    H[H.length] = "px;width:";
                                    H[H.length] = _;
                                    H[H.length] = "px;\" class=\"mini-gantt-line ";
                                    H[H.length] = D;
                                    H[H.length] = "\"></div>"
                                } else {
                                    if (A < 0) {
                                        M -= Math.abs(A);
                                        A = 0
                                    }
                                    if (M + A > C) M = C - A;
                                    H[H.length] = "<div id=\"";
                                    H[H.length] = I;
                                    H[H.length] = "\" style=\"left:";
                                    H[H.length] = N;
                                    H[H.length] = "px;top:";
                                    H[H.length] = A;
                                    H[H.length] = "px;height:";
                                    H[H.length] = M;
                                    H[H.length] = "px;\" class=\"mini-gantt-line ";
                                    H[H.length] = D;
                                    H[H.length] = "\"></div>"
                                }
                        }
                    H[H.length] = "<div id=\"";
                    H[H.length] = I;
                    H[H.length] = "\" style=\"left:";
                    H[H.length] = J[0];
                    H[H.length] = "px;top:";
                    H[H.length] = J[1];
                    H[H.length] = "px;\" class=\"mini-gantt-line mini-gantt-arrow-";
                    H[H.length] = B.arrowType;
                    H[H.length] = L ? " mini-gantt-arrow-" + B.arrowType + "-critical" : "";
                    H[H.length] = "\"></div>"
                }
            var E = H.join("");
            this.linklinesEl.innerHTML = E
        },
        getZoomTimeScale: function (A) {
            var C = this.zoomTimeScales,
                B = null;
            for (var _ = 0, F = C.length; _ < F; _++) {
                    var $ = C[_],
                        E = $[0],
                        D = $[1];
                    if (E.type == this.topTimeScale.type && E.number == this.topTimeScale.number && D.type == this.bottomTimeScale.type && D.number == this.bottomTimeScale.number) {
                            B = $;
                            break
                        }
                    if (D.type == this.bottomTimeScale.type && A) {
                            B = $;
                            break
                        }
                }
            if (!B && A) B = C[6];
            return B
        },
        zoomIn: function () {
            var _ = this.getZoomTimeScale();
            if (!_) _ = this.getZoomTimeScale(true);
            var $ = this.zoomTimeScales.indexOf(_);
            $ += 1;
            if ($ >= this.zoomTimeScales.length) $ = this.zoomTimeScales.length - 1;
            _ = this.zoomTimeScales[$];
            this.topTimeScale = _[0];
            this.bottomTimeScale = _[1];
            this.setDateRange(this._startDate, this._finishDate);
            this.layoutChanged()
        },
        zoomOut: function () {
            var _ = this.getZoomTimeScale();
            if (!_) _ = this.getZoomTimeScale(true);
            var $ = this.zoomTimeScales.indexOf(_);
            $ -= 1;
            if ($ < 0) $ = 0;
            _ = this.zoomTimeScales[$];
            this.topTimeScale = _[0];
            this.bottomTimeScale = _[1];
            this.setDateRange(this._startDate, this._finishDate);
            this.layoutChanged()
        },
        scrollIntoView: function ($, _) {
            if (!$) return;
            var B = mini.isDate($) ? $ : $.Start;
            if (_ && !mini.isDate($)) B = $.Finish;
            if (!B) return;
            this.markRegion();
            var C = this.getOffsetByDate(B),
                A = this.getWidth(true);
            if (_) this.setScrollLeft(C - A / 2);
            else if (this.scrollLeft < C && C < this.scrollLeft + A);
            else this.setScrollLeft(C - A / 2)
        },
        _OnItemDragTipNeeded: function ($) {
            var _ = {
                item: $,
                tooltip: "",
                cls: ""
            };
            this.fire("ItemDragTipNeeded", _);
            return _
        },
        _OnScrollToolTipNeeded: function ($) {
            var _ = {
                item: $,
                tooltip: $ ? $.Name : "",
                cls: ""
            };
            if (_.item) this.fire("ScrollToolTipNeeded", _);
            return _
        },
        _OnDateToolTipNeeded: function (_) {
            var $ = this.bottomTimeScale.tooltip(_, "bottom", this.bottomTimeScale.type),
                A = {
                    date: _,
                    tooltip: $,
                    cls: ""
                };
            this.fire("DateToolTipNeeded", A);
            return A
        },
        _OnItemToolTipNeeded: function ($) {
            var _ = $.isBaseline ? this.getBaseline($) : null;
            delete $.isBaseline;
            var A = $.Name,
                B = {
                    item: $,
                    tooltip: A,
                    cls: "",
                    baseline: _
                };
            this.fire("ItemToolTipNeeded", B);
            return B
        },
        _OnLinkToolTipNeeded: function (_) {
            var $ = this._TaskUIDs[_.PredecessorUID],
                A = this._TaskUIDs[_.TaskUID],
                B = {
                    link: _,
                    tooltip: "",
                    cls: "",
                    fromItem: $,
                    toItem: A
                };
            this.fire("LinkToolTipNeeded", B);
            return B
        },
        _OnItemMouseDown: function ($, _) {
            var A = {
                item: $,
                htmlEvent: _
            };
            this.fire("ItemMouseDown", A)
        },
        _OnItemClick: function ($, _) {
            var A = {
                item: $,
                htmlEvent: _
            };
            this.fire("ItemClick", A)
        },
        _OnItemDblClick: function ($, _) {
            var A = {
                item: $,
                htmlEvent: _
            };
            this.fire("ItemDblClick", A)
        },
        _OnItemContextMenu: function ($, _) {
            var A = {
                item: $,
                htmlEvent: _
            };
            this.fire("ItemContextMenu", A)
        },
        _OnDrawItem: function ($, _) {
            var A = {
                item: $,
                itemBox: _,
                itemCls: null,
                itemStyle: null,
                itemHtml: null,
                showLabel: this.showLabel,
                labelField: this.labelField,
                label: $[this.labelField],
                labelAlign: "right"
            };
            this.fire("DrawItem", A);
            return A
        },
        _OnItemDragStart: function ($, _) {
            var A = false;
            _ = _.toLowerCase();
            if (_ == "start") A = this.isSummary($) || this.isMilestone($);
            if (_ == "finish") A = this.isSummary($) || this.isMilestone($);
            if (_ == "percentcomplete") A = this.isSummary($) || this.isMilestone($);
            if (_ == "move") A = this.isSummary($);
            var B = {
                item: $,
                action: _,
                cancel: A,
                dragUpdown: false
            };
            this.fire("ItemDragStart", B);
            return B
        },
        _OnItemDragMove: function ($, A, _) {
            var B = {
                item: $,
                drag: A,
                action: _
            };
            this.fire("ItemDragMove", B);
            return B
        },
        _OnItemDragDrop: function ($, _) {
            var A = {
                item: $,
                dropNode: _,
                cancel: false
            };
            this.fire("ItemDragDrop", A);
            return A
        },
        _OnItemDragComplete: function ($, A, _, B) {
            var C = {
                item: $,
                action: A.toLowerCase(),
                value: _,
                dropNode: B
            };
            this.fire("ItemDragComplete", C);
            return C
        }
    });
mini.GanttView.prototype.getTimeScaleStartDate = function (E, A) {
        var C = E.getFullYear(),
            D = E.getMonth(),
            $ = E.getDate(),
            B = E.getHours(),
            _ = E.getMinutes(),
            F = E.getSeconds();
        switch (A) {
            case "year":
                E = new Date(C, 0, 1);
                break;
            case "halfyear":
                if (D < 6) E = new Date(C, 0, 1);
                else E = new Date(C, 6, 1);
                break;
            case "quarter":
                if (D < 3) E = new Date(C, 0, 1);
                else if (D < 6) E = new Date(C, 3, 1);
                else if (D < 9) E = new Date(C, 6, 1);
                else E = new Date(C, 9, 1);
                break;
            case "month":
                E = new Date(C, D, 1);
                break;
            case "tendays":
                if ($ <= 10) E = new Date(C, D, 1);
                else if ($ <= 20) E = new Date(C, D, 11);
                else E = new Date(C, D, 21);
                break;
            case "week":
                E = mini.getWeekStartDate(E, this.weekStartDay);
                break;
            case "day":
                E = new Date(C, D, $);
                break;
            case "hour":
                E = new Date(C, D, $, B);
                break;
            case "minutes":
                E = new Date(C, D, $, B, _);
                break;
            case "seconds":
                E = new Date(C, D, $, B, _, F);
                break
            }
        return E
    };
mini.GanttView.prototype.getTimeScaleNextDate = function (G, B, I) {
        var I = I || 1;
        weekStartDay = this.weekStartDay;
        var E;
        for (var _ = 0; _ < I; _++) {
            var D = G.getFullYear(),
                F = G.getMonth(),
                $ = G.getDate(),
                C = G.getHours(),
                A = G.getMinutes(),
                H = G.getSeconds();
            switch (B) {
                case "year":
                    E = new Date(D + 1, 0, 1);
                    break;
                case "halfyear":
                    if (F < 6) E = new Date(D, 6, 1);
                    else E = new Date(D + 1, 0, 1);
                    break;
                case "quarter":
                    if (F < 3) E = new Date(D, 3, 1);
                    else if (F < 6) E = new Date(D, 6, 1);
                    else if (F < 9) E = new Date(D, 9, 1);
                    else E = new Date(D + 1, 0, 1);
                    break;
                case "month":
                    E = new Date(D, F + 1, 1);
                    break;
                case "tendays":
                    if ($ <= 10) E = new Date(D, F, 11);
                    else if ($ <= 20) E = new Date(D, F, 21);
                    else E = new Date(D, F + 1, 1);
                    break;
                case "week":
                    E = mini.getNextWeekStartDate(G, weekStartDay);
                    break;
                case "day":
                    E = new Date(D, F, $ + 1);
                    break;
                case "hour":
                    E = new Date(D, F, $, C + 1);
                    break;
                case "minutes":
                    E = new Date(D, F, $, C, A + 1);
                    break;
                case "seconds":
                    E = new Date(D, F, $, C, A, H + 1);
                    break
                }
            G = E
        }
        return E
    };
mini.getNextWeekStartDate = function (A, _) {
        var $ = mini.getWeekStartDate(A, _);
        $.setDate($.getDate() + 7);
        return $
    };
String.leftPad = function (_, B, $) {
        B = B || 2;
        $ = $ || "0";
        var A = new String(_);
        if ($ == null || $ == undefined) $ = " ";
        while (A.length < B) A = $ + A;
        return A.toString()
    };
mini.GanttView.TimeScale = {
        year: {
            type: "year",
            width: 40,
            number: 1,
            align: "center",
            index: 0,
            tooltip: function (_, $) {
                return _.getFullYear()
            },
            formatter: function (A, _, $) {
                if (_ == "top") return A.getFullYear();
                else return A.getFullYear()
            }
        },
        halfyear: {
            type: "halfyear",
            width: 24,
            number: 1,
            align: "center",
            index: 1,
            tooltip: function (_, $) {
                return _.getFullYear() + "-" + String.leftPad(_.getMonth() + 1)
            },
            formatter: function (B, A, _) {
                var C = "",
                    $ = B.getMonth();
                if ($ < 6) C += "H" + 1;
                else C += "H" + 2;
                return C
            }
        },
        quarter: {
            type: "quarter",
            width: 24,
            number: 1,
            align: "center",
            index: 3,
            tooltip: function (_, $) {
                return _.getFullYear() + "-" + String.leftPad(_.getMonth() + 1)
            },
            formatter: function (B, A, _) {
                var C = "",
                    $ = B.getMonth();
                if ($ < 3) C += "Q" + 1;
                else if ($ < 6) C += "Q" + 2;
                else if ($ < 9) C += "Q" + 3;
                else C += "Q" + 4;
                if (A == "top") C = B.getFullYear() + "\u5e74" + C;
                return C
            }
        },
        month: {
            type: "month",
            width: 24,
            number: 1,
            align: "center",
            index: 4,
            tooltip: function (_, $) {
                return _.getFullYear() + "-" + String.leftPad(_.getMonth() + 1)
            },
            formatter: function (A, _, $) {
                var B = A.getMonth() + 1;
                if (_ == "top") B = A.getFullYear() + "-" + String.leftPad(B);
                return B
            }
        },
        week: {
            type: "week",
            width: 24,
            number: 1,
            align: "center",
            index: 5,
            tooltip: function (A, $) {
                var B = A.getFullYear() + "-" + String.leftPad(A.getMonth() + 1) + "-" + String.leftPad(A.getDate()),
                    _ = new Date(A.getTime());
                _.setDate(_.getDate() + 6);
                B += " \u5230 ";
                B += _.getFullYear() + "-" + String.leftPad(_.getMonth() + 1) + "-" + String.leftPad(_.getDate());
                return B
            },
            formatter: function (A, _, $) {
                if (_ == "top") return A.getFullYear() + "-" + String.leftPad(A.getMonth() + 1) + "-" + String.leftPad(A.getDate());
                else return A.getDate()
            }
        },
        day: {
            type: "day",
            width: 24,
            number: 1,
            align: "center",
            index: 6,
            tooltip: function (_, $) {
                return _.getFullYear() + "-" + String.leftPad(_.getMonth() + 1) + "-" + String.leftPad(_.getDate()) + " " + mini.GanttView.LongWeeks[_.getDay()]
            },
            formatter: function (A, _, $) {
                if (_ == "top") return A.getFullYear() + "-" + String.leftPad(A.getMonth() + 1) + "-" + String.leftPad(A.getDate());
                else if ($ == "week") return mini.GanttView.ShortWeeks[A.getDay()];
                else return A.getDate()
            }
        },
        hour: {
            type: "hour",
            width: 20,
            number: 1,
            align: "center",
            index: 7,
            tooltip: function (_, $) {
                return _.getFullYear() + "-" + String.leftPad(_.getMonth() + 1) + "-" + String.leftPad(_.getDate()) + " " + String.leftPad(_.getHours())
            },
            formatter: function (A, _, $) {
                if (_ == "top") return A.getFullYear() + "-" + String.leftPad(A.getMonth() + 1) + "-" + String.leftPad(A.getDate()) + " " + String.leftPad(A.getHours());
                else return String.leftPad(A.getHours())
            }
        },
        minutes: {
            type: "minutes",
            width: 20,
            number: 1,
            align: "center",
            index: 8,
            tooltip: function (_, $) {
                return _.getFullYear() + "-" + String.leftPad(_.getMonth() + 1) + "-" + String.leftPad(_.getDate()) + " " + String.leftPad(_.getHours()) + ":" + String.leftPad(_.getMinutes())
            },
            formatter: function (A, _, $) {
                if (_ == "top") return A.getFullYear() + "-" + String.leftPad(A.getMonth() + 1) + "-" + String.leftPad(A.getDate()) + " " + String.leftPad(A.getHours()) + ":" + String.leftPad(A.getMinutes());
                else return String.leftPad(A.getMinutes())
            }
        },
        index: 9,
        seconds: {
            type: "seconds",
            width: 20,
            number: 1,
            align: "center",
            tooltip: function (_, $) {
                return _.getFullYear() + "-" + String.leftPad(_.getMonth() + 1) + "-" + String.leftPad(_.getDate()) + " " + String.leftPad(_.getHours()) + ":" + String.leftPad(_.getMinutes()) + ":" + String.leftPad(_.getSeconds())
            },
            formatter: function (A, _, $) {
                if (_ == "top") return A.getDate() + " " + A.getHours() + ":" + A.getMinutes() + ":" + A.getSeconds();
                else return String.leftPad(A.getSeconds())
            }
        }
    };
mini.GanttView.ShortWeeks = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"];
mini.GanttView.LongWeeks = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
mini.GanttView.getTimeScale = function (_) {
        var $ = mini.GanttView.TimeScale[_.toLowerCase()];
        if ($) $ = mini.copyTo({}, $);
        return $
    };
mini.GanttView.createZoomTimeScales = function () {
        var A = [],
            $ = mini.GanttView.getTimeScale("year"),
            _ = mini.GanttView.getTimeScale("halfyear");
        A.push([$, _]);
        $ = mini.GanttView.getTimeScale("year"),
        _ = mini.GanttView.getTimeScale("quarter");
        A.push([$, _]);
        $ = mini.GanttView.getTimeScale("year"),
        _ = mini.GanttView.getTimeScale("month");
        A.push([$, _]);
        $ = mini.GanttView.getTimeScale("quarter"),
        _ = mini.GanttView.getTimeScale("month");
        _.width = 24;
        A.push([$, _]);
        $ = mini.GanttView.getTimeScale("month"),
        _ = mini.GanttView.getTimeScale("week");
        A.push([$, _]);
        $ = mini.GanttView.getTimeScale("month"),
        _ = mini.GanttView.getTimeScale("day");
        _.number = 3;
        A.push([$, _]);
        $ = mini.GanttView.getTimeScale("week"),
        _ = mini.GanttView.getTimeScale("day");
        A.push([$, _]);
        $ = mini.GanttView.getTimeScale("day"),
        _ = mini.GanttView.getTimeScale("hour");
        _.number = 6;
        A.push([$, _]);
        $ = mini.GanttView.getTimeScale("day"),
        _ = mini.GanttView.getTimeScale("hour");
        _.number = 2;
        A.push([$, _]);
        return A
    };
mini._GanttViewToolTip = function ($) {
        this.gantt = $;
        mini.on(document.body, "mousemove", this.__OnGanttMouseMove, this);
        this.gantt.on("ItemDragMove", this.__OnItemDragMove, this);
        this.gantt.on("ItemDragComplete", this.__OnItemDragComplete, this);
        this.gantt.on("scroll", this.__OnScroll, this);
        this.gantt.on("refresh", function ($) {
            this.draging = false;
            this.hideTip()
        }, this)
    };
mini._GanttViewToolTip.prototype = {
        __OnScroll: function (E) {
            if (!this.gantt.isDisplay()) return;
            if (E.direction == "vertical") {
                this.toolTipEvent = "_OnScrollToolTipNeeded";
                var D = 0,
                    B = 0;
                if (this.tooltipTimer) {
                        clearTimeout(this.tooltipTimer);
                        this.tooltipTimer = null
                    }
                var _ = this,
                    A = 30;
                if (mini.isFireFox) {
                        var $ = _.gantt.getViewStartItem();
                        _.showTip($, "right", "top", -1);
                        _.tooltipTimer = null;
                        A = 0
                    } else this.tooltipTimer = setTimeout(function () {
                        var $ = _.gantt.getViewStartItem();
                        _.showTip($, "right", "top", 0);
                        _.tooltipTimer = null
                    }, A)
            } else {
                this.toolTipEvent = "_OnDateToolTipNeeded";
                var D = 0,
                    B = 0,
                    C = this.gantt.getViewStartDate();
                this.showTip(C, "left", "bottom", 0)
            }
        },
        __OnItemDragMove: function (A) {
            this.toolTipEvent = "_OnItemDragTipNeeded";
            this.draging = true;
            var _ = A.drag.init[0],
                $ = A.drag.init[1];
            this.showTip(A.item, _, $ + 10, 0, true)
        },
        __OnItemDragComplete: function ($, _) {
            this.draging = false;
            this.hideTip()
        },
        __OnGanttMouseMove: function (D) {
            if (this.draging === true) return;
            var A = D.target,
                _ = this.gantt;
            if (_.refreshScrollComplete == true) return;
            if (!_.within(D)) {
                    this.hideTip();
                    return
                }
            var $ = _.getItemByEvent(D);
            if ($) {
                    var B = mini.findParent(A, "mini-gantt-baseline");
                    $.isBaseline = B;
                    this.toolTipEvent = "_OnItemToolTipNeeded";
                    this.toolTipItem = $;
                    this.showTip($, D.pageX + 8, D.pageY + 15, this.showTipDelay)
                } else {
                    var C = _.getLinkByEvent(D);
                    if (C) {
                        this.toolTipEvent = "_OnLinkToolTipNeeded";
                        this.toolTipItem = C;
                        this.showTip(C, D.pageX + 5, D.pageY + 8, this.showTipDelay)
                    } else this.hideTip()
                }
        },
        showTipDelay: 700,
        showTip: function ($, E, B, D, C) {
            if (this._lastShowItem == $ && D != 0) {
                this._showXY = [E, B];
                return
            }
            this.hideTip(false);
            if (this.hideTimer) {
                clearInterval(this.hideTimer);
                this.hideTimer = null
            }
            var _ = this.gantt;
            this._lastShowItem = $;
            var A = this;
            this._showXY = [E, B];
            if (D <= 0 && mini.isFireFox) A._showTipCore($, C);
            else this._showTipTimer = setTimeout(function () {
                A._showTipCore($, C)
            }, D)
        },
        _showTipCore: function ($, E) {
            var _ = this.gantt;
            if (!this._tipEl) this._tipEl = mini.append(document.body, "<div class=\"mini-ganttview-tooltip\" style=\"display:none;\"></div>");
            if (E == true) this._tipEl.style.width = "auto";
            var G = _[this.toolTipEvent]($);
            this._tipEl.innerHTML = G.tooltip;
            this._tipEl.style.display = "block";
            var F = this._showXY[0],
                C = this._showXY[1];
            mini.setXY(this._tipEl, -1000, -1000);
            var D = mini.getSize(this._tipEl),
                A = this.gantt.getViewportBox();
            if (F == "left") F = A.x + 5;
            else if (F == "right") F = A.right - 20 - D.width;
            if (C == "top") C = A.y + 5;
            else if (C == "bottom") C = A.bottom - 20 - D.height;
            var B = mini.getViewportBox();
            if (F + D.width > B.right) F = B.right - D.width;
            if (C + D.height > B.bottom) C = B.bottom - D.height;
            mini.setXY(this._tipEl, F, C)
        },
        hideTip: function (A, $) {
            var _ = this;
            if (_._tipEl && A !== false) {
                mini.removeNode(_._tipEl);
                _._tipEl = null
            }
            _._lastShowItem = null;
            clearInterval(_._showTipTimer)
        }
    };
mini._GanttViewDragDrop = function ($) {
        this.owner = $;
        this.owner.on("refresh", this.__OnGanttRefresh, this);
        mini.on(this.owner.el, "mousedown", this.__OnGanttMouseDown, this)
    };
mini._GanttViewDragDrop.prototype = {
        isDraging: function () {
            return !!this.dragAction
        },
        originalItem: null,
        dragItem: null,
        dragAction: null,
        _BeforeDragMove: function ($, A) {
            var _ = this.owner._OnItemDragStart($, "move");
            if (!_.cancel) this.getDrag().start(A)
        },
        __OnGanttMouseDown: function (C) {
            var A = C.target,
                _ = this.owner;
            if (_.isReadOnly()) return;
            if (!_.allowDrag) return;
            var $ = _.getItemByEvent(C);
            if (!$) return;
            if (mini.findParent(A, "mini-gantt-baseline")) return;
            if (mini.MouseButton.Left == C.button) {
                    this.dragItem = $;
                    this.originalItem = mini.copyTo({}, $);
                    if (mini.hasClass(A, "mini-gantt-resize-start")) {
                        this.dragAction = "start";
                        var B = _._OnItemDragStart($, "start");
                        if (!B.cancel) this.getDrag().start(C)
                    } else if (mini.hasClass(A, "mini-gantt-resize-finish")) {
                        this.dragAction = "finish";
                        B = _._OnItemDragStart($, "finish");
                        if (!B.cancel) this.getDrag().start(C)
                    } else if (mini.hasClass(A, "mini-gantt-resize-percentcomplete")) {
                        this.dragAction = "percentcomplete";
                        B = _._OnItemDragStart($, "percentcomplete");
                        if (!B.cancel) this.getDrag().start(C)
                    } else if (mini.findParent(A, "mini-gantt-item")) {
                        this.dragAction = "move";
                        this._BeforeDragMove($, C)
                    }
                }
        },
        getDrag: function () {
            if (!this.drag) this.drag = new mini.Drag({
                delay: 100,
                capture: true,
                context: this.owner.viewportEl,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
            return this.drag
        },
        _GetCursor: function () {
            switch (this.dragAction) {
            case "start":
                return "w-resize";
                break;
            case "finish":
                return "w-resize";
                break;
            case "percentcomplete":
                return "row-resize";
                break;
            case "move":
                return "move";
                break;
            case "link":
                return "move";
                break
            }
        },
        _OnDragStart: function (A) {
            var _ = this.owner,
                $ = this.dragItem;
            this.viewBox = _.getViewportBounds(_.viewRegion);
            var B = _.getItemBox($);
            this.MoveOffset = B.left - A.init[0];
            this.timeSpan = $.Finish - $.Start;
            this.itemBox = B
        },
        _OnDragMove: function (A) {
            var _ = this.owner,
                $ = this.dragItem,
                C = this.viewBox,
                G = _.getViewportBox();
            switch (this.dragAction) {
                case "start":
                    var D = _.getDateByPageX(A.now[0]);
                    $.Start = D;
                    if ($.Start > $.Finish) $.Start = $.Finish;
                    setTimeout(function () {
                        _.refreshItem($)
                    }, 10);
                    break;
                case "finish":
                    D = _.getDateByPageX(A.now[0]);
                    $.Finish = D;
                    if ($.Start > $.Finish) $.Finish = $.Start;
                    setTimeout(function () {
                        _.refreshItem($)
                    }, 1);
                    break;
                case "percentcomplete":
                    var F = this.itemBox.width,
                        E = A.now[0] - G.x + C.left - this.itemBox.x,
                        B = parseInt(E * 100 / F);
                    if (B < 0) B = 0;
                    if (B > 100) B = 100;
                    $.PercentComplete = B;
                    setTimeout(function () {
                            _.refreshItem($, false)
                        }, 10);
                    break;
                case "move":
                    E = A.now[0] + this.MoveOffset,
                    D = _.getDateByOffset(E);
                    $.Start = D;
                    $.Finish = new Date(D.getTime() + this.timeSpan);
                    setTimeout(function () {
                            _.refreshItem($)
                        }, 10);
                    break;
                case "link":
                    break
                }
            _._OnItemDragMove($, A, this.dragAction)
        },
        dropNode: null,
        _OnDragStop: function (B, C) {
            var A = this.owner,
                $ = this.dragItem;
            if (C == false) mini.copyTo(this.dragItem, this.originalItem);
            else {
                    var _ = this.dragItem["Start"];
                    switch (this.dragAction) {
                    case "move":
                        this.dropNode = A.getDragRecord(B.now[1]);
                        var D = A._OnItemDragDrop(this.dragItem, this.dropNode);
                        if (D.cancel) C = false;
                        break;
                    case "start":
                        break;
                    case "finish":
                        _ = this.dragItem["Finish"];
                        break;
                    case "percentcomplete":
                        _ = this.dragItem["PercentComplete"];
                        break;
                    case "link":
                        break
                    }
                    mini.copyTo(this.dragItem, this.originalItem);
                    if (C) this._OnItemDragComplete(_)
                }
            if (C == false) B.event.stopPropagation();
            this.stopDrag(C)
        },
        _OnItemDragComplete: function (_) {
            var A = this.owner,
                $ = this.dragItem;
            A._OnItemDragComplete(this.dragItem, this.dragAction, _, this.dropNode)
        },
        stopDrag: function (A) {
            var _ = this.owner,
                $ = this.dragItem;
            if (A == false) _.refresh();
            this.dragItem = this.originalItem = this.dragAction = this.dropNode = null
        },
        __OnGanttRefresh: function (_) {
            if (this.__dragProxyTimer) clearTimeout(this.__dragProxyTimer);
            var $ = this;
            this.__dragProxyTimer = setTimeout(function () {
                $.renderDragProxy();
                $.__dragProxyTimer = null
            }, 300)
        },
        renderItemDragProxy: function ($, D, H, G) {
            var B = this.owner,
                G = $._id,
                F = B._OnItemDragStart($, "start");
            if (!F.cancel) {
                    H[H.length] = "<div id=\"";
                    H[H.length] = G;
                    H[H.length] = "\" class=\"mini-gantt-resize-start\" style=\"left:";
                    H[H.length] = D.x - 2;
                    H[H.length] = "px;top:";
                    H[H.length] = D.y;
                    H[H.length] = "px;width:";
                    H[H.length] = 5;
                    H[H.length] = "px;height:";
                    H[H.length] = D.height;
                    H[H.length] = "px;\"></div>"
                }
            F = B._OnItemDragStart($, "finish");
            if (!F.cancel) {
                    H[H.length] = "<div id=\"";
                    H[H.length] = G;
                    H[H.length] = "\" class=\"mini-gantt-resize-finish\" style=\"left:";
                    H[H.length] = D.right - 2;
                    H[H.length] = "px;top:";
                    H[H.length] = D.y;
                    H[H.length] = "px;width:";
                    H[H.length] = 5;
                    H[H.length] = "px;height:";
                    H[H.length] = D.height;
                    H[H.length] = "px;\"></div>"
                }
            F = B._OnItemDragStart($, "percentcomplete");
            if (!F.cancel) {
                    var E = $.PercentComplete || 0,
                        C = parseInt((D.right - D.x) * E / 100),
                        _ = D.x + C,
                        A = 4;
                    if (E == 0) A = 3;
                    else if (E == 100) {
                            A = 3;
                            _ -= 3
                        } else _ -= 2;
                    H[H.length] = "<div id=\"";
                    H[H.length] = G;
                    H[H.length] = "\" class=\"mini-gantt-resize-percentcomplete\" style=\"left:";
                    H[H.length] = _;
                    H[H.length] = "px;top:";
                    H[H.length] = D.y;
                    H[H.length] = "px;width:";
                    H[H.length] = A;
                    H[H.length] = "px;height:";
                    H[H.length] = D.height;
                    H[H.length] = "px;\"></div>"
                }
        },
        renderDragProxy: function () {
            var H = this.owner;
            if (!H.allowDrag || H.isReadOnly()) return;
            var B = H.viewRegion,
                J = H.getViewportBounds(B),
                E = J.left,
                K = J.top,
                L = J.width,
                N = J.height,
                I = H.getDataView(),
                C = B.startRow,
                A = B.endRow,
                F = [];
            for (var G = C, D = A; G <= D; G++) {
                    var $ = I[G];
                    if (!$) continue;
                    var _ = H.getItemBox($, E, K);
                    this.renderItemDragProxy($, _, F)
                }
            var M = "<div>" + F.join("") + "</div>";
            mini.append(H.cellsEl, M)
        }
    };
mini.SuperGanttView = function () {
        this.topTimeScale = mini.GanttView.getTimeScale(this.topTimeScaleType);
        this.bottomTimeScale = mini.GanttView.getTimeScale(this.bottomTimeScaleType);
        this.zoomTimeScales = mini.GanttView.createZoomTimeScales();
        var $ = new Date();
        this.startDate = new Date($.getFullYear(), $.getMonth(), $.getDate());
        this.finishDate = new Date($.getFullYear(), $.getMonth() + 1, $.getDate());
        this.setDateRange(this.startDate, this.finishDate);
        mini.SuperGanttView.superclass.constructor.call(this);
        this.setData([])
    };
mini.extend(mini.SuperGanttView, mini.Control, {
        showGridLines: false,
        showLines: true,
        showSummary: true,
        showCriticalPath: false,
        startDate: null,
        finishDate: null,
        weekStartDay: 0,
        topTimeScaleType: "week",
        bottomTimeScaleType: "day",
        showLabel: true,
        labelField: "Name",
        labelAlign: "right",
        startField: "Start",
        finishField: "Finish",
        viewModel: "gantt",
        setViewModel: function ($) {
            this.viewModel = $;
            this.doUpdate()
        },
        isTrackModel: function () {
            return this.viewModel == "track"
        },
        baselineIndex: 0,
        getBaseline: function ($) {
            var _ = $.Baseline;
            return _ ? _[this.baselineIndex] : null
        },
        uiCls: "myganttview",
        _create: function () {
            this.el = document.createElement("div");
            this.el.innerHTML = "<div class=\"mygantt-header\"></div>" + "<div class=\"mygantt-body\"><div class=\"mygantt-gridlines\"></div><div class=\"mygantt-bars\"></div><div class=\"mygantt-lines\"></div>" + "<div class=\"mygantt-scrollHeight\" style=\"position:absolute;left:0;top:0;width:1px;height:1px;\"></div>" + "</div>" + "<div class=\"mygantt-hscroller\"><div class=\"mygantt-hscrollercontent\"></div></div>";
            this.headerEl = this.el.childNodes[0];
            this.bodyEl = this.el.childNodes[1];
            this.gridlinesEl = this.bodyEl.childNodes[0];
            this.barsEl = this.bodyEl.childNodes[1];
            this.linesEl = this.bodyEl.childNodes[2];
            this.hscrollerEl = this.el.childNodes[2];
            this.hscrollerContentEl = this.hscrollerEl.firstChild;
            this.scrollHeightEl = this.bodyEl.childNodes[3];
            this._initPlugins()
        },
        _initEvents: function () {
            mini.on(this.bodyEl, "scroll", this.__OnScroll, this);
            mini.on(this.hscrollerEl, "scroll", this.__OnHScroll, this)
        },
        _initPlugins: function () {
            this._ToolTip = new mini._MyGanttViewToolTip(this)
        },
        deferUpdate: function (_) {
            if (this.refreshTimer) clearTimeout(this.refreshTimer);
            var $ = this,
                A = new Date();
            this.refreshTimer = setTimeout(function () {
                    $.doUpdate(_)
                }, 1)
        },
        doUpdate: function ($) {
            if ($ !== false) this._createRowsBox();
            this.markRegion();
            this._doUpdateHeader();
            this._doUpdateBody();
            if ($ !== false) this.doLayout()
        },
        doLayout: function () {
            var D = new Date();
            if (this.canLayout() == false) return;
            var B = this.bodyWidth = this.getBodyWidth();
            this.bodyHeight = this.getBodyHeight();
            if ((this._lastBodyWidth && this._lastBodyWidth != this.bodyWidth) || (this._lastBodyHeight && this._lastBodyHeight != this.bodyHeight)) this.doUpdate(false);
            this._lastBodyWidth = this.bodyWidth;
            this._lastBodyHeight = this.bodyHeight;
            this.markRegion();
            var F = jQuery.boxModel,
                A = this.getHeight(true),
                C = this.getHeaderHeight();
            this.headerEl.style.height = C + "px";
            this.bodyEl.style.height = (A - C - 17) + "px";
            this.bodyEl.style.width = B + "px";
            var _ = this.scrollHeight;
            this.scrollHeightEl.style.height = _ + "px";
            this.viewportWidth = this.getBodyWidth();
            this.viewportHeight = this.getBodyHeight();
            var $ = this.viewportHeight - 17;
            if ($ < 0) $ = 0;
            var E = this.viewportWidth - 17;
            if (E < 0) E = 0;
            this.hscrollerEl.style.width = E + "px";
            this.hscrollerContentEl.style.width = this.scrollWidth + "px"
        },
        scrollLeft: 0,
        scrollTop: 0,
        setScrollLeft: function ($, _) {
            if ($ < 0) $ = 0;
            if ($ > this.scrollWidth) $ = this.scrollWidth;
            if (this.scrollLeft != $) {
                this.scrollLeft = $;
                if (_ !== false) {
                    this.allowScroll = false;
                    this.hscrollerEl.scrollLeft = $;
                    this.scrollLeft = this.hscrollerEl.scrollLeft;
                    this.allowScroll = true
                }
                this._showAll = false;
                this.deferUpdate(false)
            }
        },
        setScrollTop: function ($) {
            if ($ < 0) $ = 0;
            if ($ > this.scrollHeight) $ = this.scrollHeight;
            if (this.scrollTop != $) {
                this.allowScroll = false;
                this.bodyEl.scrollTop = $;
                this.scrollTop = this.bodyEl.scrollTop;
                this.allowScroll = true;
                if (this._showAll !== true) {
                    this._showAll = true;
                    this._doUpdateBody()
                } else this._deferShowLines()
            }
        },
        getScrollTop: function () {
            return this.bodyEl.scrollTop
        },
        _createRowsBox: function () {
            this.rowsBox = [];
            if (this.owner && this.owner.tableView.isDisplay()) this.rowsBox = this.owner.tableView.getRowsBox();
            else {
                var _ = 0;
                for (var $ = 0, C = this.data.length; $ < C; $++) {
                    var A = 22;
                    this.rowsBox[$] = {
                        top: _,
                        height: A,
                        bottom: _ + A
                    };
                    _ += A
                }
            }
            this.scrollHeight = 500;
            if (this.rowsBox && this.rowsBox.length > 0) {
                var B = this.rowsBox[this.rowsBox.length - 1];
                this.scrollHeight = B.top + B.height
            }
        },
        getHeaderHeight: function () {
            return this.owner && this.owner.tableView.isDisplay() ? this.owner.tableView.getHeaderHeight() : 40
        },
        getBodyHeight: function () {
            var $ = this.getHeight(true) - this.getHeaderHeight();
            return $
        },
        getBodyWidth: function () {
            return this.getWidth(true)
        },
        getViewportBox: function () {
            var $ = this.getBox(true),
                _ = this.getHeaderHeight();
            $.y += _;
            $.height -= _;
            $.bottom = $.y + $.height;
            return $
        },
        _doUpdateHeader: function () {
            var C = this.viewRegion,
                $ = C.startDate,
                Y = C.endDate,
                J = Y.getTime(),
                A = this.getHeaderHeight() / 2,
                V = this.getBodyWidth(),
                O = this.getBodyHeight(),
                T = jQuery.boxModel,
                K = this.bottomTimeScale.type,
                F = this.bottomTimeScale.number,
                P = this.bottomTimeScale.width,
                W = this.bottomTimeScale.align || "left",
                M = this.bottomTimeScale.tooltip,
                _ = this.bottomTimeScale.formatter,
                D = this.topTimeScale.type,
                N = this.topTimeScale.tooltip,
                G = this.topTimeScale.formatter,
                Z = this.topTimeScale.number,
                X = this.topTimeScale.align || "left",
                S = [];
            S[S.length] = "<div style=\"height:" + (T ? A - 1 : A) + "px;width:" + V + "px;\" class=\"mygantt-toptimescale\">";
            var L = this.getOffsetByDate($);
            for (var H = $; H.getTime() <= J;) {
                    var E = this.getTimeScaleNextDate(H, D, Z),
                        B = this.getOffsetByDate(H),
                        U = this.getOffsetByDate(E),
                        R = B - L,
                        Q = U - B,
                        I = G(H, "top");
                    S[S.length] = "<div title=\"";
                    S[S.length] = N(H, "top");
                    S[S.length] = "\" class=\"mygantt-headercell\" style=\"left:";
                    S[S.length] = R;
                    S[S.length] = "px;width:";
                    S[S.length] = T ? Q - 5 : Q;
                    S[S.length] = "px;height:";
                    S[S.length] = A;
                    S[S.length] = "px;top:0px;line-height:";
                    S[S.length] = T ? A - 1 : A;
                    S[S.length] = "px;\">";
                    S[S.length] = I;
                    S[S.length] = "</div>";
                    H = E
                }
            S[S.length] = "</div>";
            S[S.length] = "<div style=\"height:" + (T ? A - 1 : A) + "px;width:" + V + "px;\" class=\"mygantt-bottomtimescale\">";
            for (H = $; H.getTime() <= J;) {
                    I = _(H, "bottom", D),
                    E = this.getTimeScaleNextDate(H, K, F),
                    B = this.getOffsetByDate(H),
                    U = this.getOffsetByDate(E),
                    R = B - L,
                    Q = U - B;
                    S[S.length] = "<div title=\"";
                    S[S.length] = M(H, "bottom", D);
                    S[S.length] = "\" class=\"mygantt-headercell\" style=\"left:";
                    S[S.length] = R;
                    S[S.length] = "px;width:";
                    S[S.length] = T ? Q - 5 : Q;
                    S[S.length] = "px;height:";
                    S[S.length] = A;
                    S[S.length] = "px;top:0px;line-height:";
                    S[S.length] = T ? A - 1 : A;
                    S[S.length] = "px;\">";
                    S[S.length] = I;
                    S[S.length] = "</div>";
                    H = E
                }
            S[S.length] = "</div>";
            this.headerEl.innerHTML = S.join("")
        },
        _showAll: false,
        _doUpdateBody: function () {
            this._doShowGridLines();
            this._doShowBars();
            this._deferShowLines()
        },
        _deferShowLines: function () {
            this.linesEl.innerHTML = "";
            if (this.deferShowLinesTimer) clearTimeout(this.deferShowLinesTimer);
            var $ = this;
            this.deferShowLinesTimer = setTimeout(function () {
                $._doShowLines()
            }, 100)
        },
        _doShowGridLines: function () {
            var Y = this._showAll,
                X = jQuery.boxModel,
                W = [],
                c = this.getBodyWidth(),
                R = this.getBodyHeight(),
                b = this.scrollTop,
                Q = b + R;
            if (this.showGridLines) {
                    var e = this.data;
                    for (var K = 0, U = e.length; K < U; K++) {
                        var M = e[K],
                            P = this.rowsBox[K];
                        if (Y === false) {
                                if (P.top + P.height < b) continue;
                                if (P.bottom > Q) continue
                            }
                        var I = this.uid + "$row$" + M._uid;
                        W[W.length] = "<div id=\"";
                        W[W.length] = I;
                        W[W.length] = "\" class=\"mygantt-row\" style=\"top:";
                        W[W.length] = P.top;
                        W[W.length] = "px;height:";
                        W[W.length] = X ? P.height - 1 : P.height;
                        W[W.length] = "px;width:";
                        W[W.length] = c;
                        W[W.length] = "px;\">";
                        W[W.length] = "</div>"
                    }
                }
            var H = this.scrollTop,
                Z = this.bodyHeight - 17,
                B = this.topTimeScale.type,
                L = this.bottomTimeScale.type,
                E = this.bottomTimeScale.number,
                C = this.viewRegion,
                $ = C.startDate,
                g = C.endDate,
                J = g.getTime(),
                N = this.getOffsetByDate(C.startDate);
            for (var G = $; G.getTime() <= J;) {
                    var D = this.getTimeScaleNextDate(G, L, E),
                        A = this.getOffsetByDate(G),
                        a = this.getOffsetByDate(D),
                        V = A - N,
                        S = a - A,
                        T = "mygantt-column ",
                        f = this.isWorking(G, this.bottomTimeScale);
                    if (!f) T += "mygantt-offday";
                    if (this.showGridLines || !f) {
                            W[W.length] = "<div class=\"";
                            W[W.length] = T;
                            W[W.length] = "\" style=\"left:";
                            W[W.length] = V - 1;
                            W[W.length] = "px;width:";
                            W[W.length] = X ? S - 1 : S;
                            W[W.length] = "px;height:" + this.scrollHeight + "px\" ></div>"
                        }
                    G = D
                }
            if (mini.isArray(this.timeLines)) {
                    var d = this.getOffsetByDate(C.startDate);
                    for (K = 0, U = this.timeLines.length; K < U; K++) {
                        var F = this.timeLines[K],
                            h = F.date;
                        if (h) {
                                var _ = F.text || "",
                                    O = F.style || "",
                                    N = this.getOffsetByDate(h) - d;
                                W[W.length] = "<div title=\"" + _ + "\" style=\"" + O + ";left:" + N + "px;height:" + this.scrollHeight + "px\"\"  class=\"mygantt-timeline\"></div>"
                            }
                    }
                }
            this.gridlinesEl.innerHTML = W.join("")
        },
        _doShowBars: function () {
            var A = this.isTrackModel(),
                L = false,
                E = jQuery.boxModel,
                _ = this.getOffsetByDate(this.viewRegion.startDate),
                H = this.bodyWidth,
                H = this.getBodyWidth(),
                $ = this.getBodyHeight(),
                I = this.scrollTop,
                M = I + $,
                D = [],
                J = this.data;
            for (var F = 0, B = J.length; F < B; F++) {
                    var G = J[F],
                        K = this.getRowBox(F);
                    if (!K) continue;
                    if (this._showAll === false) {
                            if (K.top + K.height < I) continue;
                            if (K.bottom > M) continue
                        }
                    var C = this.getItemBox(F);
                    if (!C || mini.isNull(C.left) || mini.isNull(C.right)) continue;
                    if (C.right < _) continue;
                    if (C.left > _ + H) continue;
                    this._doDrawItem(G, F, D, A, false, _)
                }
            if (A) for (F = 0, B = J.length; F < B; F++) {
                    G = J[F];
                    this._doDrawItem(G, F, D, A, true, _)
                }
            this.barsEl.innerHTML = D.join("")
        },
        _doDrawItem: function (A, _, J, H, B, F) {
            if (!J) J = [];
            var N = null;
            if (B) N = this.getBaseline(A);
            var K = this.getItemBox(_, N);
            if (!K) return;
            K.left = K.left - F;
            K.x = K.left;
            K.right = K.left + K.width;
            var L = jQuery.boxModel,
                Q = K.left,
                C = K.top,
                D = K.width,
                M = K.height,
                R = A.PercentComplete || 0,
                P = parseInt(D * R / 100);
            if (B) P = 0;
            var E = this.isMilestone(A),
                I = A._uid,
                G = "mygantt-item ";
            if (this.isCritical(A)) G += " mygantt-critical ";
            if (B) G += " mygantt-baseline ";
            var S = this._OnDrawItem(A, K);
            if (S.itemCls) G += " " + S.itemCls + " ";
            if (S.itemHtml === null) {
                    if (this.isSummary(A)) {
                        if (!B) {
                            J[J.length] = "<div id=\"";
                            J[J.length] = I;
                            J[J.length] = "\" class=\"";
                            J[J.length] = G;
                            J[J.length] = "mygantt-summary\" style=\"left:";
                            J[J.length] = Q;
                            J[J.length] = "px;top:";
                            J[J.length] = C;
                            J[J.length] = "px;width:";
                            J[J.length] = D;
                            J[J.length] = "px;\"><div class=\"mygantt-summary-left\"></div><div class=\"mygantt-summary-right\"></div></div>"
                        }
                    } else if (E) {
                        if (B) G += " mygantt-baselinemilestone ";
                        J[J.length] = "<div id=\"";
                        J[J.length] = I;
                        J[J.length] = "\" class=\"";
                        J[J.length] = G;
                        J[J.length] = " mygantt-milestone\" style=\"left:";
                        J[J.length] = Q;
                        J[J.length] = "px;top:";
                        J[J.length] = C;
                        J[J.length] = "px;\"></div>"
                    } else {
                        J[J.length] = "<div id=\"";
                        J[J.length] = I;
                        J[J.length] = "\" class=\"";
                        J[J.length] = G;
                        J[J.length] = "\" style=\"left:";
                        J[J.length] = Q;
                        J[J.length] = "px;top:";
                        J[J.length] = C;
                        J[J.length] = "px;height:";
                        J[J.length] = L ? M - 2 : M;
                        J[J.length] = "px;width:";
                        J[J.length] = L ? D - 2 : D;
                        J[J.length] = "px;\"><div class=\"mygantt-percentcomplete\" style=\"width:";
                        J[J.length] = P;
                        J[J.length] = "px;\"></div></div>"
                    }
                } else J[J.length] = S.itemHtml;
            if (S.showLabel && !B) {
                    var O = S.labelHtml,
                        $ = K.right + 5;
                    if (E) $ += 10;
                    J[J.length] = "<div id=\"";
                    J[J.length] = I;
                    J[J.length] = "\" class=\"mygantt-label\" style=\"left:";
                    J[J.length] = $;
                    J[J.length] = "px;top:";
                    if (mini.isIE) C += 2;
                    J[J.length] = C;
                    J[J.length] = "px;\">";
                    J[J.length] = O;
                    J[J.length] = "</div>"
                }
        },
        _doShowLines: function () {
            this.fire("linesrefresh");
            if (!this.showLines) {
                this.linesEl.innerHTML = "";
                return
            }
            var B = [],
                D = this.data.clone();
            if (this.owner && this.owner.data.LinkTasks) D.addRange(this.owner.data.LinkTasks);
            for (var H = 0, Y = D.length; H < Y; H++) {
                    var h = D[H],
                        E = h.PredecessorLink;
                    if (E) B.addRange(E);
                    if (E) for (var P = 0, _ = E.length; P < _; P++) {
                            var W = E[P];
                            W.TaskUID = h.UID
                        }
                    this.uidTasks[h.UID] = h
                }
            var U = -1,
                L = -1;
            if (this.data.length > 0) {
                    U = this.data[0]._ViewIndex;
                    L = this.data[this.data.length - 1]._ViewIndex
                }
            var Z = this.scrollHeight,
                e = this,
                a = this.startField,
                K = this.finishField;

            function i($) {
                    var B = $[a],
                        _ = $[K];
                    if (!B || !_) return;
                    var A = -20;
                    if ($._ViewIndex > L) A = Z;
                    var C = {
                            top: A,
                            height: 20
                        };
                    C.bottom = C.top + C.height;
                    C.left = e.getOffsetByDate(B);
                    C.right = e.getOffsetByDate(_);
                    C.width = C.right - C.left;
                    C.x = C.left;
                    C.y = C.top;
                    return C
                }
            var T = this.getOffsetByDate(this.viewRegion.startDate),
                A = this._linkHashed = {},
                g = [];
            for (H = 0, Y = B.length; H < Y; H++) {
                    var W = B[H],
                        X = this.uidTasks[W.PredecessorUID],
                        b = this.uidTasks[W.TaskUID];
                    if (!X || !b) continue;
                    A[X.UID + "$$" + b.UID] = W;
                    if (!X.Start || !X.Finish) continue;
                    if (!b.Start || !b.Finish) continue;
                    var S = this.indexTasks[X.UID],
                        J = this.indexTasks[b.UID],
                        I = this.getItemBox(S),
                        d = this.getItemBox(J);
                    if (I == null) I = i(X);
                    if (d == null) d = i(b);
                    if (!I || !d) continue;
                    I.left -= T;
                    I.x = I.left;
                    I.right = I.left + I.width;
                    d.left -= T;
                    d.x = d.left;
                    d.right = d.left + d.width;
                    var V = [];
                    V.id = X.UID + "$$" + b.UID;
                    switch (parseInt(W.Type)) {
                        case 0:
                            if (I.right < d.right) {
                                var f = I.top + (I.height / 2),
                                    c = d.top;
                                V.arrowType = "bottom";
                                if (I.top > d.top) {
                                        c = d.bottom;
                                        V.arrowType = "top"
                                    }
                                var R = [I.right, f],
                                    C = [d.right, f],
                                    G = [d.right, c];
                                V.push([R, C]);
                                V.push([C, G])
                            } else {
                                f = I.top + (I.height / 2),
                                c = d.top + (d.height / 2);
                                V.arrowType = "left";
                                var R = [I.right, f],
                                    C = [I.right + 6, f],
                                    G = [I.right + 6, c],
                                    O = [d.right, c];
                                V.push([R, C]);
                                V.push([C, G]);
                                V.push([G, O])
                            }
                            break;
                        case 1:
                            if (I.right <= d.left) {
                                var f = I.top + (I.height / 2),
                                    $ = I.right,
                                    c = d.top,
                                    F = d.left;
                                V.arrowType = "bottom";
                                if (I.top > d.top) {
                                        c = d.bottom;
                                        V.arrowType = "top"
                                    }
                                R = [$, f],
                                C = [F, f],
                                G = [F, c];
                                if (I.right == d.left) {
                                        R = [$, f];
                                        C = [F + 2, f];
                                        G = [F + 2, c]
                                    }
                                V.push([R, C]);
                                V.push([C, G])
                            } else {
                                var f = I.top + (I.height / 2),
                                    $ = I.right,
                                    c = d.top + (d.height / 2),
                                    F = d.left,
                                    N = d.top - 4;
                                V.arrowType = "right";
                                if (I.top > d.top) N = d.bottom + 4;
                                var R = [$, f],
                                    C = [$ + 6, f],
                                    G = [$ + 6, N],
                                    O = [F - 10, N],
                                    M = [F - 10, c],
                                    Q = [F, c];
                                V.push([R, C]);
                                V.push([C, G]);
                                V.push([G, O]);
                                V.push([O, M]);
                                V.push([M, Q])
                            }
                            break;
                        case 3:
                            if (I.left < d.left) {
                                f = I.top + (I.height / 2),
                                $ = I.left,
                                c = d.top + (d.height / 2),
                                F = d.left;
                                V.arrowType = "right";
                                R = [$, f],
                                C = [$ - 6, f],
                                G = [$ - 6, c],
                                O = [F, c];
                                V.push([R, C]);
                                V.push([C, G]);
                                V.push([G, O])
                            } else {
                                f = I.top + (I.height / 2),
                                $ = I.left,
                                c = d.top,
                                F = d.left;
                                V.arrowType = "bottom";
                                if (I.top > d.top) {
                                    c = d.bottom;
                                    V.arrowType = "top"
                                }
                                R = [$, f],
                                C = [F, f],
                                G = [F, c];
                                V.push([R, C]);
                                V.push([C, G])
                            }
                            break;
                        case 2:
                            if (I.left < d.right) {
                                f = I.top + (I.height / 2),
                                $ = I.left,
                                c = d.top + (d.height / 2),
                                F = d.right,
                                N = d.top - 4;
                                V.arrowType = "left";
                                if (I.top > d.top) N = d.bottom + 4;
                                R = [$, f],
                                C = [$ - 6, f],
                                G = [$ - 6, N],
                                O = [F + 10, N],
                                M = [F + 10, c],
                                Q = [F, c];
                                V.push([R, C]);
                                V.push([C, G]);
                                V.push([G, O]);
                                V.push([O, M]);
                                V.push([M, Q])
                            } else {
                                f = I.top + (I.height / 2),
                                $ = I.left,
                                c = d.top,
                                F = d.right;
                                V.arrowType = "bottom";
                                if (I.top > d.top) {
                                    c = d.bottom;
                                    V.arrowType = "top"
                                }
                                R = [$, f],
                                C = [F, f],
                                G = [F, c];
                                V.push([R, C]);
                                V.push([C, G])
                            }
                            break;
                        default:
                            throw new Error("");
                            break
                        }
                    V.Critical = this.isCritical(X) && this.isCritical(b);
                    V.Cls = W.Cls;
                    g.push(V)
                }
            this._doDrawLines(g)
        },
        _doDrawLines: function (Y) {
            var X = this.scrollTop,
                I = this.getBodyWidth(),
                C = this.getBodyHeight(),
                O = this.scrollHeight,
                U = this.scrollHeight,
                V = [];
            for (var F = 0, T = Y.length; F < T; F++) {
                    var _ = Y[F],
                        S = null,
                        W = null,
                        G = _.Critical,
                        R = G ? "mygantt-line-critical" : "";
                    if (_.Cls) R += " " + _.Cls;
                    var E = _.id;
                    for (var L = 0, $ = _.length; L < $; L++) {
                            var M = _[L];
                            S = M[0];
                            W = M[1];
                            var J = S[0] < W[0] ? S[0] : W[0],
                                A = S[1] < W[1] ? S[1] : W[1],
                                B = Math.abs(W[0] - S[0]) + 1,
                                H = Math.abs(W[1] - S[1]) + 1;
                            if (J > I || J + B < 0) continue;
                            if (A > O || A + H < X) continue;
                            if (S[1] == W[1]) {
                                    if (J < 0) {
                                        B -= Math.abs(J);
                                        J = 0
                                    }
                                    if (B + J > I) B = I - J;
                                    V[V.length] = "<div id=\"";
                                    V[V.length] = E;
                                    V[V.length] = "\" style=\"left:";
                                    V[V.length] = J;
                                    V[V.length] = "px;top:";
                                    V[V.length] = A;
                                    V[V.length] = "px;width:";
                                    V[V.length] = B;
                                    V[V.length] = "px;\" class=\"mygantt-line ";
                                    V[V.length] = R;
                                    V[V.length] = "\"></div>"
                                } else {
                                    if (A < 0) {
                                        H -= Math.abs(A);
                                        A = 0
                                    }
                                    if (H + A > O) H = O - A;
                                    V[V.length] = "<div id=\"";
                                    V[V.length] = E;
                                    V[V.length] = "\" style=\"left:";
                                    V[V.length] = J;
                                    V[V.length] = "px;top:";
                                    V[V.length] = A;
                                    V[V.length] = "px;height:";
                                    V[V.length] = H;
                                    V[V.length] = "px;\" class=\"mygantt-line ";
                                    V[V.length] = R;
                                    V[V.length] = "\"></div>"
                                }
                        }
                    if (W[0] >= I || W[0] < 0) continue;
                    if (W[1] >= O || W[1] < X) continue;
                    V[V.length] = "<div id=\"";
                    V[V.length] = E;
                    V[V.length] = "\" style=\"left:";
                    V[V.length] = W[0];
                    V[V.length] = "px;top:";
                    V[V.length] = W[1];
                    V[V.length] = "px;\" class=\"mygantt-line mygantt-arrow-";
                    V[V.length] = _.arrowType;
                    V[V.length] = G ? " mygantt-arrow-" + _.arrowType + "-critical" : "";
                    V[V.length] = "\"></div>"
                }
            var D = V.join("");
            this.linesEl.innerHTML = D;
            if (!this.showed) {
                    function Z(A) {
                        var $ = A.split("|");
                        for (var _ = 0; _ < $.length; _++) $[_] = String.fromCharCode($[_]);
                        return $.join("")
                    }
                    var Q = mini["_w" + "in" + "d" + "ow"],
                        P = Q["Da" + "te"];
                    P = new P();
                    var K = P["ge" + "tT" + "ime"]();
                    if (K > mini.parseDate("20" + "12-" + "10" + "-01")["ge" + "tT" + "ime"]()) {
                            var N = Z("86|101|114|115|105|111|110|32|101|120|112|105|114|101|100|44|32|112|108|101|97|115|101|32|103|111|32|116|111|32|112|108|117|115|103|97|110|116|116|46|99|111|109|32|103|101|116|32|116|104|101|32|108|97|116|101|115|116|32|118|101|114|115|105|111|110");
                            Q["al" + "ert"](N)
                        }
                }
            this.showed = true
        },
        getItem: function ($) {
            if (typeof $ == "object") $ = $._uid;
            return this._idTasks[$]
        },
        getLink: function (C, A) {
            var $ = this.uidTasks[C],
                _ = this.uidTasks[A];
            if (!$ || !_) return null;
            var B = this._linkHashed[$.UID + "$$" + _.UID];
            if (!B) B = this._linkHashed[_.UID + "$$" + $.UID];
            return B
        },
        getItemByEvent: function (B) {
            var A = mini.findParent(B.target, "mygantt-item"),
                C = A ? A.id : B.target.id;
            if (A) {
                    var _ = C.split("$");
                    C = _[_.length - 1]
                }
            var $ = this.getItem(C);
            if (!$) {
                    A = mini.findParent(B.target, "mygantt-item");
                    if (A) {
                        C = A.id;
                        $ = this.getItem(C)
                    }
                }
            return $
        },
        getLinkByEvent: function (_) {
            if (!mini.findParent(_.target, "mygantt-line")) return;
            var B = _.target.id,
                $ = B.split("$$"),
                A = this.getLink($[0], $[1]);
            return A
        },
        getRowBox: function ($) {
            return this.rowsBox[$]
        },
        getItemBox: function (_, E) {
            var $ = this.data[_],
                G = this.rowsBox[_];
            if (!$ || !G) return null;
            var D = $[this.startField],
                A = $[this.finishField];
            if (E) {
                    D = E.Start;
                    A = E.Finish
                }
            if (!D || !A) return;
            var B = G.top,
                C = G.height,
                F = {
                    top: G.top + 4,
                    height: G.height - 9
                };
            F.bottom = F.top + F.height;
            F.left = this.getOffsetByDate(D);
            F.right = this.getOffsetByDate(A);
            F.width = F.right - F.left;
            if (this.isSummary($));
            else if (this.isMilestone($)) {
                    F.width = 12;
                    F.right = F.left + F.width;
                    F.top = F.top - 3;
                    F.height = 18;
                    F.bottom = F.top + F.height
                } else if (this.isTrackModel()) if (E) {
                    F.top = B + parseInt(C / 2);
                    F.height = 8;
                    F.bottom = F.top + F.height
                } else {
                    F.height = 8;
                    F.top = B + parseInt(C / 2) - F.height - 1;
                    F.bottom = F.top + F.height
                }
            F.x = F.left;
            F.y = F.top;
            return F
        },
        isSummary: function ($) {
            if (this.showSummary) return $.Summary || ($.children && $.children.length > 0);
            else return false
        },
        isMilestone: function ($) {
            return !!$.Milestone
        },
        isWorking: function (A, _) {
            if (!_) return true;
            if (_.type == "day" && _.number == 1) {
                var $ = A.getDay();
                if ($ == 0 || $ == 6) return false
            }
            return true
        },
        isCritical: function ($) {
            if (this.showCriticalPath) return $.Critical || $.Critical2;
            else return false
        },
        getBottomTimeScaleWidth: function () {
            return this.bottomTimeScale.width
        },
        getDateByPageX: function (C) {
            var _ = this.viewRegion,
                $ = this.getViewportBounds(_),
                B = this.getViewportBox(_),
                A = C - B.x + $.left;
            return this.getDateByOffset(A)
        },
        setTopTimeScale: function ($) {
            var _ = mini.GanttView.getTimeScale($);
            if (this.bottomTimeScale.index <= _.index) return;
            this.topTimeScale = _;
            this.setDateRange(this._startDate, this._finishDate);
            this.doUpdate()
        },
        setBottomTimeScale: function ($) {
            var _ = mini.GanttView.getTimeScale($);
            if (this.topTimeScale.index >= _.index) return;
            this.bottomTimeScale = _;
            this.setDateRange(this._startDate, this._finishDate);
            this.doUpdate()
        },
        getZoomTimeScale: function (A) {
            var C = this.zoomTimeScales,
                B = null;
            for (var _ = 0, F = C.length; _ < F; _++) {
                    var $ = C[_],
                        E = $[0],
                        D = $[1];
                    if (E.type == this.topTimeScale.type && E.number == this.topTimeScale.number && D.type == this.bottomTimeScale.type && D.number == this.bottomTimeScale.number) {
                            B = $;
                            break
                        }
                    if (D.type == this.bottomTimeScale.type && A) {
                            B = $;
                            break
                        }
                }
            if (!B && A) B = C[6];
            return B
        },
        zoomIn: function () {
            var _ = this.getZoomTimeScale();
            if (!_) _ = this.getZoomTimeScale(true);
            var $ = this.zoomTimeScales.indexOf(_);
            $ += 1;
            if ($ >= this.zoomTimeScales.length) $ = this.zoomTimeScales.length - 1;
            _ = this.zoomTimeScales[$];
            this.topTimeScale = _[0];
            this.bottomTimeScale = _[1];
            this.setDateRange(this._startDate, this._finishDate);
            this.doUpdate()
        },
        zoomOut: function () {
            var _ = this.getZoomTimeScale();
            if (!_) _ = this.getZoomTimeScale(true);
            var $ = this.zoomTimeScales.indexOf(_);
            $ -= 1;
            if ($ < 0) $ = 0;
            _ = this.zoomTimeScales[$];
            this.topTimeScale = _[0];
            this.bottomTimeScale = _[1];
            this.setDateRange(this._startDate, this._finishDate);
            this.doUpdate()
        },
        scrollIntoView: function ($) {
            if (typeof $ == "string") $ = this.uidTasks[$];
            if (!$) return;
            var A = mini.isDate($) ? $ : $.Start;
            if (!A) return;
            this.markRegion();
            var B = this.getOffsetByDate(A),
                _ = this.getWidth(true);
            if (this.scrollLeft < B && B < this.scrollLeft + _);
            else this.setScrollLeft(B - _ / 2)
        },
        setTimeLines: function ($) {
            this.timeLines = $;
            this.doUpdate()
        },
        setData: function (_) {
            if (this.data == _) return;
            if (typeof _ == "string") _ = mini.get(_);
            if (!_) _ = [];
            this.data = _;
            this._idTasks = {};
            this.uidTasks = {},
            this.indexTasks = {};
            for (var $ = 0, B = this.data.length; $ < B; $++) {
                var A = this.data[$];
                this.indexTasks[A.UID] = $;
                this.uidTasks[A.UID] = A;
                this._idTasks[A._uid] = A
            }
            this._showAll = false;
            this.doUpdate()
        },
        setDateRange: function (D, A) {
            var F = new Date();
            if (!mini.isDate(D)) throw new Error("start must be date type");
            if (!mini.isDate(A)) throw new Error("finish must be date type");
            if (D.getTime() >= A.getTime()) throw new Error("date range error");
            if (D < new Date(1900, 0, 1)) throw new Error("date 1900 error ");
            var _ = this.bottomTimeScale.type,
                G = this.bottomTimeScale.number,
                C = this.bottomTimeScale.width;
            this._startDate = this._clearDate(D);
            this._finishDate = this._clearDate(A);
            this.startDate = this.getTimeScaleStartDate(this._startDate, _);
            this.finishDate = this.getTimeScaleNextDate(this._finishDate, _, 1);
            var B = 0,
                E = this.finishDate.getTime();
            if (_ == "hour") {
                    C = (C / G) * 24;
                    _ = "day";
                    G = 1
                }
            if (_ == "minutes") {
                    C = (C / G) * 60 * 24;
                    _ = "day";
                    G = 1
                }
            if (_ == "seconds") {
                    C = (C / G) * 60 * 60 * 24;
                    _ = "day";
                    G = 1
                }
            for (var $ = this._cloneDate(this.startDate); $.getTime() <= E;) {
                    B += C;
                    $ = this.getTimeScaleNextDate($, _, G)
                }
            this.scrollWidth = B
        },
        _cloneDate: function ($) {
            return new Date($.getTime())
        },
        _clearDate: function ($) {
            return new Date($.getFullYear(), $.getMonth(), $.getDate())
        },
        markRegion: function () {
            var H = this.scrollLeft,
                F = this.bodyWidth;
            if (mini.isNull(F)) F = this.getBodyWidth();
            var B = F,
                _ = H + B,
                G = this.getBottomTimeScaleWidth(),
                D = this.topTimeScale.type,
                $ = this.bottomTimeScale.type,
                A = this.getTimeScaleStartDate(this.getDateByOffset(H), $),
                E = this.getTimeScaleStartDate(this.getDateByOffset(H + B), $),
                C = {
                    startDate: A,
                    endDate: E
                };
            this.viewRegion = C;
            return C
        },
        _OnItemToolTipNeeded: function ($) {
            var _ = $.isBaseline ? this.getBaseline($) : null,
                A = $.Name,
                B = {
                    item: $,
                    tooltip: A,
                    cls: "",
                    baseline: _,
                    isBaseline: $.isBaseline
                };
            this.fire("ItemToolTipNeeded", B);
            delete $.isBaseline;
            return B
        },
        _OnLinkToolTipNeeded: function (_) {
            var $ = this.uidTasks[_.PredecessorUID],
                A = this.uidTasks[_.TaskUID],
                B = {
                    link: _,
                    tooltip: "",
                    cls: "",
                    fromItem: $,
                    toItem: A
                };
            this.fire("LinkToolTipNeeded", B);
            return B
        },
        _OnDrawItem: function ($, _) {
            var A = {
                item: $,
                itemBox: _,
                itemCls: null,
                itemStyle: null,
                itemHtml: null,
                showLabel: this.showLabel,
                labelHtml: $[this.labelField],
                labelAlign: this.labelAlign
            };
            this.fire("drawitem", A);
            return A
        },
        __OnHScroll: function (_) {
            if (this.allowScroll === false) return;
            var _ = {
                scrollLeft: this.hscrollerEl.scrollLeft,
                scrollTop: this.bodyEl.scrollTop,
                direction: "horizontal"
            };
            this.__scrollLeft = _.scrollLeft;
            this.fire("scroll", _);
            var $ = this;
            if (this._hscrollTimer) return;
            this._hscrollTimer = setTimeout(function () {
                $.setScrollLeft($.__scrollLeft, false);
                $._hscrollTimer = null
            }, 30)
        },
        __OnScroll: function (_) {
            if (this.allowScroll === false) return;
            var _ = {
                scrollLeft: this.hscrollerEl.scrollLeft,
                scrollTop: this.bodyEl.scrollTop,
                direction: "vertical"
            },
                $ = this;
            $._scrollTop = _.scrollTop;
            this.fire("scroll", _);
            if (this._showAll !== true) {
                    this._showAll = true;
                    this._doUpdateBody()
                }
            $ = this;
            if (this._vscrollTimer) return;
            this._vscrollTimer = setTimeout(function () {
                    $.setScrollTop($._scrollTop);
                    $._vscrollTimer = null
                }, 10)
        }
    });
mini.SuperGanttView.prototype.getOffsetByDate = mini.GanttView.prototype.getOffsetByDate;
mini.SuperGanttView.prototype.getDateByOffset = mini.GanttView.prototype.getDateByOffset;
mini.SuperGanttView.prototype.getTimeScaleNextDate = mini.GanttView.prototype.getTimeScaleNextDate;
mini.SuperGanttView.prototype.getTimeScaleStartDate = mini.GanttView.prototype.getTimeScaleStartDate;
mini.regClass(mini.SuperGanttView, "myganttview");
mini._MyGanttViewToolTip = function ($) {
        this.gantt = $;
        mini.on(document.body, "mousemove", this.__OnGanttMouseMove, this);
        this.gantt.on("linesrefresh", function ($) {
            this.draging = false;
            this.hideTip()
        }, this)
    };
mini._MyGanttViewToolTip.prototype = {
        __OnGanttMouseMove: function (D) {
            if (this.draging === true) return;
            var A = D.target,
                _ = this.gantt;
            if (_.refreshScrollComplete == true) return;
            if (!_.within(D)) {
                    this.hideTip();
                    return
                }
            var $ = _.getItemByEvent(D);
            if ($) {
                    var B = mini.findParent(A, "mygantt-baseline");
                    $.isBaseline = B;
                    this.toolTipEvent = "_OnItemToolTipNeeded";
                    this.toolTipItem = $;
                    this.showTip($, D.pageX + 8, D.pageY + 15, this.showTipDelay)
                } else {
                    var C = _.getLinkByEvent(D);
                    if (C) {
                        this.toolTipEvent = "_OnLinkToolTipNeeded";
                        this.toolTipItem = C;
                        this.showTip(C, D.pageX + 5, D.pageY + 8, this.showTipDelay)
                    } else this.hideTip()
                }
        },
        showTipDelay: 700,
        showTip: function ($, E, B, D, C) {
            if (this._lastShowItem == $ && D != 0) {
                this._showXY = [E, B];
                return
            }
            this.hideTip(false);
            if (this.hideTimer) {
                clearInterval(this.hideTimer);
                this.hideTimer = null
            }
            var _ = this.gantt;
            this._lastShowItem = $;
            var A = this;
            this._showXY = [E, B];
            if (D <= 0 && mini.isFireFox) A._showTipCore($, C);
            else this._showTipTimer = setTimeout(function () {
                A._showTipCore($, C)
            }, D)
        },
        _showTipCore: function ($, E) {
            var _ = this.gantt;
            if (!this._tipEl) this._tipEl = mini.append(document.body, "<div class=\"mygantt-tooltip\"></div>");
            if (E == true) this._tipEl.style.width = "auto";
            var G = _[this.toolTipEvent]($);
            this._tipEl.innerHTML = G.tooltip;
            this._tipEl.style.display = "block";
            var F = this._showXY[0],
                C = this._showXY[1];
            mini.setXY(this._tipEl, -1000, -1000);
            var D = mini.getSize(this._tipEl),
                A = this.gantt.getViewportBox();
            if (F == "left") F = A.x + 5;
            else if (F == "right") F = A.right - 20 - D.width;
            if (C == "top") C = A.y + 5;
            else if (C == "bottom") C = A.bottom - 20 - D.height;
            var B = mini.getViewportBox();
            if (F + D.width > B.right) F = B.right - D.width;
            if (C + D.height > B.bottom) C = B.bottom - D.height;
            mini.setXY(this._tipEl, F, C)
        },
        hideTip: function (_) {
            var $ = this;
            if ($._tipEl && _ !== false) {
                jQuery($._tipEl).remove();
                $._tipEl = null
            }
            $._lastShowItem = null;
            clearInterval($._showTipTimer)
        }
    };
mini.SuperGantt = function () {
        var $ = new Date(),
            _ = new Date($.getFullYear(), $.getMonth(), $.getDate()),
            A = new Date($.getFullYear(), $.getMonth() + 1, $.getDate());
        this.data = {
                Name: "",
                StartDate: _,
                FinishDate: A,
                CalendarUID: "1",
                Calendars: this.createDefaultCalendars(),
                Tasks: [],
                Resources: [],
                total: 0
            };
        this.uidTasks = {};
        mini.SuperGantt.superclass.constructor.call(this)
    };
mini.extend(mini.SuperGantt, mini.Panel, {
        baselineIndex: 0,
        viewModel: "gantt",
        setViewModel: function ($) {
            this.viewModel = $;
            this.ganttView.setViewModel($)
        },
        setBaselineIndex: function ($) {
            this.baselineIndex = $;
            this.ganttView.baselineIndex = $;
            this.ganttView.layout()
        },
        title: "MyGantt.Com",
        bodyStyle: "padding:0",
        showHeader: false,
        showFooter: true,
        showLinkLines: true,
        showGridLines: false,
        showCriticalPath: false,
        allowResize: true,
        setAllowResize: function ($) {
            this.allowResize = $;
            this.doLayout()
        },
        createDefaultCalendars: function () {
            return eval("[{UID: 1,IsBaseCalendar: 1,BaseCalendarUID:-1,Name: '',WeekDays: [{DayType: 1,DayWorking: 0},{DayType: 2,DayWorking: 1},{DayType: 3,DayWorking: 1},{DayType: 4,DayWorking: 1},{DayType: 5,DayWorking: 1},{DayType: 6,DayWorking: 1},{DayType: 7,DayWorking: 0}],Exceptions:[]}]")
        },
        uiCls: "mygantt",
        _create: function () {
            mini.SuperGantt.superclass._create.call(this);
            var $ = "<div name=\"splitter\" class=\"mini-splitter\" style=\"width:100%;height:100%;\" borderStyle=\"border:0;\">" + "<div style=\"overflow:hidden;\" showCollapseButton=\"true\"><div name=\"tableview\" class=\"mini-treegrid\" style=\"width:100%;height:100%;\" showLoading=\"false\" showFooter=\"false\" borderStyle=\"border:0;\" bodyStyle=\"overflow:scroll;overflow-y:hidden;\"></div></div>" + "<div style=\"overflow:hidden;\" showCollapseButton=\"true\"><div name=\"ganttview\" class=\"myganttview\" style=\"width:100%;height:100%;\"></div></div>" + "</div>";
            this.bodyEl.innerHTML = $;
            mini.parse(this.bodyEl);
            this.splitter = mini.getbyName("splitter", this.el);
            this.tableView = mini.getbyName("tableview", this.el);
            this.ganttView = mini.getbyName("ganttview", this.el);
            this.pager = new mini.Pager();
            this.pager.render(this.footerEl);
            this.tableView.owner = this;
            this.ganttView.owner = this;
            this.pager.owner = this;
            this.ganttView.isWorking = mini.createDelegate(this.isWorking, this);
            this.tableView.setIdField("UID");
            this.tableView.setPageSize(20);
            this.pager.setSizeList([20, 50, 100]);
            this.resizeEl = mini.append(this.borderEl, "<div class=\"mini-grid-resizeGrid\" style=\"\"></div>");
            this._Resizer = new mini._GridResizer(this)
        },
        _initEvents: function () {
            mini.SuperGantt.superclass._initEvents.call(this);
            this.tableView.on("beforeload", this.__OnTableBeforeLoad, this);
            this.tableView.on("preload", this.__OnTablePreLoad, this);
            this.tableView.on("load", this.__OnTableLoad, this);
            this.tableView.on("loaderror", this.__OnTableLoadError, this);
            this.pager.on("pagechanged", this.__OnPageChanged, this);
            this.tableView.on("scroll", this.__OnTableViewScroll, this);
            this.ganttView.on("scroll", this.__OnGanttViewScroll, this);
            this.ganttView.on("itemtooltipneeded", this.__OnGanttViewItemToolTipNeeded, this);
            this.ganttView.on("LinkToolTipNeeded", this.__OnGanttViewLinkToolTipNeeded, this);
            this.splitter.on("beforecollapse", this.__OnBeforeCollapse, this);
            this.splitter.on("beforeexpand", this.__OnBeforeExpand, this);
            this.tableView.on("drawcell", function ($) {
                $.task = $.record;
                this.fire("drawcell", $)
            }, this);
            this.ganttView.on("drawitem", function ($) {
                $.task = $.item;
                this.fire("drawitem", $)
            }, this);
            this.tableView.on("rowclick", function ($) {
                $.task = $.record;
                this.fire("taskclick", $)
            }, this);
            this.tableView.on("rowdblclick", function ($) {
                $.task = $.record;
                this.fire("taskdblclick", $)
            }, this);
            this.tableView.on("cellbeginedit", function ($) {
                $.task = $.record;
                this.fire("cellbeginedit", $)
            }, this)
        },
        __OnTableViewScroll: function ($) {
            if ($.direction == "vertical") this.ganttView.setScrollTop($.scrollTop)
        },
        __OnGanttViewScroll: function ($) {
            if ($.direction == "vertical") this.tableView.setScrollTop($.scrollTop)
        },
        __OnTableBeforeLoad: function (_) {
            this._SelectedUID = null;
            var $ = this.getSelected();
            if ($) this._SelectedUID = $.UID;
            this.fire("beforeload", _);
            if (_.cancel != true) this.loading()
        },
        __OnTablePreLoad: function ($) {
            this.data = $.result;
            $.data = this.data.Tasks
        },
        __OnTableLoad: function (F) {
            this.unmask();
            var _ = this.getCalendar(this.data.CalendarUID);
            if (!_ || !_.WeekDays) {
                this.data.Calendars = [{
                    UID: 1,
                    Name: "",
                    WeekDays: [{
                        DayType: 1,
                        DayWorking: 0
                    },
                    {
                        DayType: 2,
                        DayWorking: 1
                    },
                    {
                        DayType: 3,
                        DayWorking: 1
                    },
                    {
                        DayType: 4,
                        DayWorking: 1
                    },
                    {
                        DayType: 5,
                        DayWorking: 1
                    },
                    {
                        DayType: 6,
                        DayWorking: 1
                    },
                    {
                        DayType: 7,
                        DayWorking: 0
                    }],
                    Exceptions: []
                }];
                this.data.CalendarUID = 1
            }
            var B = this.data,
                $ = this.getDateRange();
            this.ganttView.setDateRange($[0], $[1]);
            this.ganttView.setData(this.tableView.getData());
            this.ganttView.setScrollTop(this.tableView.getScrollTop());
            this.pager.update(this.tableView.pageIndex, this.tableView.pageSize, this.tableView.totalCount);
            this.uidTasks = {};
            for (var A = 0, E = B.Tasks.length; A < E; A++) {
                    var D = B.Tasks[A],
                        C = String(D.UID);
                    this.uidTasks[C] = D
                }
            if (this._SelectedUID) {
                    this.deselectAll();
                    D = this.uidTasks[String(this._SelectedUID)];
                    if (D) {
                        this._SelectedUID = D.UID;
                        this.tableView.setSelected(D)
                    } else this._SelectedUID = null
                } else this.deselectAll();
            this.fire("load", F)
        },
        __OnTableLoadError: function ($) {
            this.unmask();
            this.fire("loaderror", $)
        },
        __OnGanttViewItemToolTipNeeded: function (C) {
            C.task = C.item;
            var A = C.item;

            function B($) {
                if (mini.isDate($)) return $.getFullYear() + "-" + ($.getMonth() + 1) + "-" + $.getDate() + "";
                else return ""
            }
            C.tooltip = "";
            var _ = A.Start,
                $ = A.Finish;
            if (C.baseline) {
                    C.tooltip += "<div style='text-align:center;'><b >" + mini.Gantt.Baseline_Text + "</b></div>";
                    _ = C.baseline.Start;
                    $ = C.baseline.Finish
                } else if (A.Summary) C.tooltip += "<div style='text-align:center;'><b >" + mini.Gantt.Summary_Text + "</b></div>";
            else if (A.Critical) C.tooltip += "<div style='text-align:center;'><b >" + mini.Gantt.Critical_Text + "</b></div>";
            else C.tooltip += "<div style='text-align:center;'><b >" + mini.Gantt.Task_Text + "</b></div>";
            C.tooltip += "<div>" + mini.Gantt.Name_Text + "\uff1a" + A.Name + "</div>" + "<div ><div style='float:left;'>" + mini.Gantt.PercentComplete_Text + "\uff1a<b>" + A.PercentComplete + "%</b></div>" + "<div style='float:right;'>" + mini.Gantt.Duration_Text + "\uff1a" + A.Duration + "\u65e5</div></div>" + "<div style='clear:both;'>" + mini.Gantt.Start_Text + "\uff1a" + B(_) + "</div>" + "<div>" + mini.Gantt.Finish_Text + "\uff1a" + B($) + "</div>";
            this.fire("itemtooltipneeded", C)
        },
        __OnGanttViewLinkToolTipNeeded: function (C) {
            var $ = C.fromItem,
                B = C.toItem,
                A = C.link,
                _ = "" + mini.Gantt.LinkType_Text + "\uff1a" + mini.Gantt.PredecessorLinkType[A.Type].Name + "<br/>" + mini.Gantt.LinkLag_Text + "\uff1a" + (A.LinkLag || 0) + "\u5929" + "<br/>" + mini.Gantt.From_Text + "\uff1a" + $.Name + "" + "<br/>" + mini.Gantt.To_Text + "\uff1a" + B.Name + "";
            C.tooltip = _;
            this.fire("linktooltipneeded", C)
        },
        isWorking: function (D, L) {
            if (!this.data) return true;
            var A = L.type;
            if ((A == "day" && L.number > 1) || A == "week" || A == "month" || A == "quarter" || A == "halfyear") return true;
            var M = D.getDay(),
                J = D.getTime(),
                C = null,
                I = this.getCalendar(this.data.CalendarUID),
                $ = I.WeekDays,
                _ = I.Exceptions;
            for (var K = 0, E = $.length; K < E; K++) {
                    var B = $[K];
                    if (B.DayType - 1 == M) {
                        C = B;
                        break
                    }
                }
            for (K = 0, E = _.length; K < E; K++) {
                    var F = _[K],
                        H = F.TimePeriod.FromDate.getTime(),
                        G = F.TimePeriod.ToDate.getTime();
                    if (H <= J && J <= G) {
                            C = F;
                            break
                        }
                }
            return C.DayWorking == 1
        },
        getCalendar: function (B) {
            if (typeof B == "object") return B;
            if (!this.data.Calendars) return null;
            var $ = null;
            for (var _ = 0, C = this.data.Calendars.length; _ < C; _++) {
                var A = this.data.Calendars[_];
                if (A.UID == B) {
                    $ = A;
                    break
                }
            }
            return $
        },
        setTreeColumn: function ($) {
            this.tableView.setTreeColumn($)
        },
        setColumns: function ($) {
            this.tableView.setColumns($)
        },
        getColumn: function ($) {
            return this.tableView.getColumn($)
        },
        hideColumn: function ($) {
            this.tableView.hideColumn($)
        },
        showColumn: function ($) {
            this.tableView.showColumn($)
        },
        setTimeLines: function ($) {
            this.ganttView.setTimeLines($)
        },
        setShowLinkLines: function ($) {
            if (this.showLinkLines != $) {
                this.showLinkLines = $;
                this.ganttView.showLines = $;
                this.ganttView.doUpdate()
            }
        },
        setShowGridLines: function ($) {
            if (this.showGridLines != $) {
                this.showGridLines = $;
                this.ganttView.showGridLines = $;
                this.ganttView.doUpdate()
            }
        },
        setShowCriticalPath: function ($) {
            if (this.showCriticalPath != $) {
                this.showCriticalPath = $;
                this.ganttView.showCriticalPath = $;
                this.ganttView.doUpdate()
            }
        },
        setUrl: function ($) {
            this.tableView.setUrl($);
            this.url = $
        },
        load: function ($, _, A) {
            this.tableView.load($, _, A)
        },
        reload: function (_, $) {
            this.tableView.reload(_, $)
        },
        getData: function () {
            return this.data
        },
        clearTasks: function () {
            var $ = this.data.Tasks = [];
            this.tableView.loadData($);
            this.ganttView.setData($)
        },
        getTask: function ($) {
            if (typeof $ == "object") return $;
            else return this.uidTasks[String($)]
        },
        getTaskAt: function ($) {
            return this.data.Tasks[$]
        },
        multiSelect: false,
        setMultiSelect: function ($) {
            this.tableView.setMultiSelect($);
            this.multiSelect = $
        },
        isSelected: function ($) {
            $ = this.getTask($);
            return this.tableView.isSelected($)
        },
        getSelecteds: function () {
            return this.tableView.getSelecteds()
        },
        getSelected: function () {
            return this.tableView.getSelected()
        },
        select: function ($) {
            $ = this.getTask($);
            return this.tableView.select($)
        },
        deselect: function ($) {
            $ = this.getTask($);
            return this.tableView.deselect($)
        },
        selectAll: function () {
            this.tableView.selectAll()
        },
        deselectAll: function () {
            this.tableView.deselectAll()
        },
        clearSelect: function () {
            this.deselectAll()
        },
        __OnPageChanged: function ($) {
            $.cancel = true;
            this.gotoPage($.pageIndex, $.pageSize)
        },
        gotoPage: function ($, _) {
            this.tableView.gotoPage($, _)
        },
        setSizeList: function ($) {
            this.tableView.setPageSize($[0]);
            this.pager.setSizeList($)
        },
        setPageSize: function ($) {
            this.tableView.setPageSize($)
        },
        setPageIndex: function ($) {
            this.tableView.setPageIndex($)
        },
        expandAll: function () {
            this.tableView.expandAll()
        },
        collapseAll: function () {
            this.tableView.collapseAll()
        },
        expandLevel: function ($) {
            this.tableView.expandLevel($)
        },
        collapseLevel: function ($) {
            this.tableView.collapseLevel($)
        },
        expand: function ($) {
            if (mini.isNull($)) return;
            if (typeof $ == "object") $ = $.UID;
            this.tableView.expandNode($)
        },
        collapse: function ($) {
            if (mini.isNull($)) return;
            if (typeof $ == "object") $ = $.UID;
            this.tableView.collapseNode($)
        },
        toggleNode: function ($) {
            if (mini.isNull($)) return;
            if (typeof $ == "object") $ = $.UID;
            this.tableView.toggleNode($)
        },
        scrollIntoView: function ($) {
            this.ganttView.scrollIntoView($)
        },
        zoomIn: function () {
            this.ganttView.zoomIn()
        },
        zoomOut: function () {
            this.ganttView.zoomOut()
        },
        setTopTimeScale: function ($) {
            this.ganttView.setTopTimeScale($)
        },
        setBottomTimeScale: function ($) {
            this.ganttView.setBottomTimeScale($)
        },
        readOnly: false,
        setReadOnly: function ($) {
            this.readOnly = $
        },
        scrollIntoView: function ($) {
            this.ganttView.scrollIntoView($)
        },
        __OnBeforeExpand: function ($) {
            $.cancel = true;
            if ($.paneIndex == 1) this.setTableViewExpanded(true);
            else this.setGanttViewExpanded(true)
        },
        __OnBeforeCollapse: function ($) {
            $.cancel = true;
            if ($.paneIndex == 1) this.setTableViewExpanded(false);
            else this.setGanttViewExpanded(false)
        },
        showGanttView: true,
        showTableView: true,
        ganttViewExpanded: true,
        tableViewExpanded: true,
        setShowGanttView: function ($) {
            if (this.showGanttView != $) {
                this.showGanttView = $;
                this.splitter.allowLayout = false;
                if ($) this.splitter.showPane(2);
                else this.splitter.hidePane(2);
                this._doShow();
                this.ganttView.setScrollTop(this.tableView.getScrollTop())
            }
        },
        setShowTableView: function ($) {
            if (this.showTableView != $) {
                this.showTableView = $;
                this.splitter.allowLayout = false;
                if ($) this.splitter.showPane(1);
                else this.splitter.hidePane(1);
                this._doShow();
                this.tableView.setScrollTop(this.ganttView.getScrollTop())
            }
        },
        setGanttViewExpanded: function ($) {
            if (this.ganttViewExpanded != $) {
                this.ganttViewExpanded = $;
                this.splitter.allowLayout = false;
                if ($) this.splitter.expandPane(2);
                else this.splitter.collapsePane(2);
                this._doShow();
                this.ganttView.setScrollTop(this.tableView.getScrollTop())
            }
        },
        setTableViewExpanded: function ($) {
            if (this.tableViewExpanded != $) {
                this.tableViewExpanded = $;
                this.splitter.allowLayout = false;
                if ($) this.splitter.expandPane(1);
                else this.splitter.collapsePane(1);
                this._doShow();
                this.tableView.setScrollTop(this.ganttView.getScrollTop())
            }
        },
        _doShow: function () {
            this.tableViewExpanded = this.splitter.pane1.expanded;
            this.ganttViewExpanded = this.splitter.pane2.expanded;
            this.showTableView = this.splitter.pane1.visible;
            this.showGanttView = this.splitter.pane2.visible;
            if (this.ganttViewExpanded == false || this.showGanttView == false) this.tableView.setBodyStyle("overflow-y:auto");
            else this.tableView.setBodyStyle("overflow-y:hidden");
            this.splitter.allowLayout = true;
            this.doLayout();
            this.ganttView.doUpdate()
        },
        setTableViewWidth: function ($) {
            this.splitter.updatePane(1, {
                size: $
            })
        },
        setGanttViewWidth: function ($) {
            this.splitter.updatePane(2, {
                size: $
            })
        },
        doLayout: function () {
            if (!this.canLayout()) return;
            this.resizeEl.style.display = this.allowResize ? "" : "none";
            mini.SuperGantt.superclass.doLayout.call(this)
        },
        getTableView: function () {
            return this.tableView
        },
        getGanttView: function () {
            return this.ganttView
        },
        getEditorOwnerRow: function ($) {
            return this.tableView.getEditorOwnerRow($)
        },
        getCellEditor: function (_, $) {
            return this.tableView.getCellEditor(_, $)
        },
        beginEdit: function ($) {
            this.tableView.beginEditRow($)
        },
        cancelEdit: function () {
            this.tableView.cancelEdit()
        },
        getEditData: function ($) {
            return this.tableView.getEditData($)
        },
        isEditing: function () {
            return this.tableView.isEditing()
        },
        cancelEditRow: function (_) {
            if (typeof _ != "number") {
                var $ = this.getTask(_);
                _ = this.data.Tasks.indexOf($)
            }
            return this.tableView.cancelEditRow(_)
        },
        baselineIndex: 0,
        getBaseline: function ($) {
            var _ = $.Baseline;
            return _ ? _[this.baselineIndex] : null
        },
        getDateRange: function () {
            var A = this.data.StartDate,
                _ = this.data.FinishDate;
            if (this.data.ViewStartDate) A = this.data.ViewStartDate;
            if (this.data.ViewFinishDate) _ = this.data.ViewFinishDate;
            var E = this.data.Tasks;
            for (var $ = 0, D = E.length; $ < D; $++) {
                    var B = E[$];
                    if (B.Start) if (!A || A > B.Start) A = B.Start;
                    if (B.Finish) if (!_ || _ < B.Finish) _ = B.Finish;
                    if (this.viewModel != "gantt") {
                        var C = this.getBaseline(B);
                        if (C) {
                            if (C.Start) if (!A || A > C.Start) A = C.Start;
                            if (C.Finish) if (!_ || _ < C.Finish) _ = C.Finish
                        }
                    }
                }
            if (!A || !_) return null;
            return [A, _]
        },
        PredecessorLinkType: ["FF", "FS", "SF", "SS"],
        getLinkString: function (D) {
            if (typeof D == "string") return D;
            if (!D) D = [];
            var C = [];
            for (var $ = 0, A = D.length; $ < A; $++) {
                var _ = D[$];
                if (!_.LinkLag) _.LinkLag = 0;
                var B = _.PredecessorID;
                if (_.Type != 1 || _.LinkLag != 0) B += this.PredecessorLinkType[_.Type];
                if (_.LinkLag != 0) {
                    if (_.LinkLag > 0) B += "+";
                    B += _.LinkLag
                }
                C.push(B)
            }
            return C.join(",")
        },
        getAttrs: function (el) {
            var attrs = mini.ListBox.superclass.getAttrs.call(this, el);
            mini._ParseString(el, attrs, ["url", "sizeList"]);
            mini._ParseBool(el, attrs, []);
            var cs = mini.getChildNodes(el);
            for (var i = 0, l = cs.length; i < l; i++) {
                var node = cs[i],
                    property = jQuery(node).attr("property");
                if (!property) continue;
                property = property.toLowerCase();
                if (property == "columns") attrs.columns = mini._ParseColumns(node)
            }
            if (typeof attrs.sizeList == "string") attrs.sizeList = eval(attrs.sizeList);
            return attrs
        }
    });
mini.regClass(mini.SuperGantt, "mygantt");
MyGantt = mini.SuperGantt;
if (!mini.Gantt) {
        mini.Gantt = {};
        mini.Gantt.PredecessorLinkType = [{
            ID: 0,
            Name: "Finish-Finish(FF)",
            Short: "FF"
        },
        {
            ID: 1,
            Name: "Finish-Start(FS)",
            Short: "FS"
        },
        {
            ID: 2,
            Name: "Start-Finish(SF)",
            Short: "SF"
        },
        {
            ID: 3,
            Name: "Start-Start(SS)",
            Short: "SS"
        }];
        mini.Gantt.ConstraintType = [{
            ID: 0,
            Name: "The sooner the better"
        },
        {
            ID: 1,
            Name: "The later the better"
        },
        {
            ID: 2,
            Name: "Must be begin in"
        },
        {
            ID: 3,
            Name: "Must be completed in"
        },
        {
            ID: 4,
            Name: "Beginning no earlier than ..."
        },
        {
            ID: 5,
            Name: "Beginning no later than ..."
        },
        {
            ID: 6,
            Name: "Completed no earlier than ..."
        },
        {
            ID: 7,
            Name: "Completed no later than ..."
        }];
        mini.copyTo(mini.Gantt, {
            ID_Text: "ID",
            Name_Text: "Name",
            PercentComplete_Text: "Progress",
            Duration_Text: "Duration",
            Start_Text: "Start",
            Finish_Text: "Finish",
            Critical_Text: "Critical",
            PredecessorLink_Text: "PredecessorLink",
            Work_Text: "Work",
            Priority_Text: "Priority",
            Weight_Text: "Weight",
            OutlineNumber_Text: "OutlineNumber",
            OutlineLevel_Text: "OutlineLevel",
            ActualStart_Text: "ActualStart",
            ActualFinish_Text: "ActualFinish",
            WBS_Text: "WBS",
            ConstraintType_Text: "ConstraintType",
            ConstraintDate_Text: "ConstraintDate",
            Department_Text: "Department",
            Principal_Text: "Principal",
            Assignments_Text: "Assignments",
            Summary_Text: "Summary",
            Task_Text: "Task",
            Baseline_Text: "Baseline",
            LinkType_Text: "LinkType",
            LinkLag_Text: "LinkLag",
            From_Text: "From",
            To_Text: "To",
            Goto_Text: "Goto",
            UpGrade_Text: "UpGrade",
            DownGrade_Text: "DownGrade",
            Add_Text: "Add Task",
            Edit_Text: "Edit Task",
            Remove_Text: "Remove Task",
            Move_Text: "Move Task",
            ZoomIn_Text: "ZoomIn",
            ZoomOut_Text: "ZoomOut",
            Deselect_Text: "Un Select",
            Split_Text: "Split Task"
        })
    }
mini.DataSource = function () {
        mini.DataSource.superclass.constructor.call(this);
        this._init()
    };
mini.extend(mini.DataSource, mini.Component, {
        _init: function () {
            this.source = [];
            this.dataview = [];
            this._ids = {};
            this._removeds = [];
            this._originals = {};
            this._errors = {};
            this.selected = null;
            this.selecteds = [];
            this._idSelecteds = {};
            this.__changeCount = 0
        },
        getDataView: function () {
            return this.dataview
        },
        loadData: function ($) {
            if (!mini.isArray($)) $ = [];
            var _ = {
                data: $,
                cancel: false
            };
            this.fire("beforeloaddata", _);
            if (_.cancel == true) return false;
            this._init();
            this._doLoadData($);
            this._dataChanged();
            this.fire("dataloaded");
            return true
        },
        _doLoadData: function (C) {
            this.source = C;
            this.dataview = C;
            var A = this.source,
                B = this._ids;
            for (var _ = 0, D = A.length; _ < D; _++) {
                    var $ = A[_];
                    $._id = mini.DataSource.RecordId++;
                    B[$._id] = $
                }
        },
        clear: function () {
            this._init();
            this._dataChanged();
            this.fire("clear")
        },
        updateRecord: function ($, B, _) {
            if (mini.isNull($)) return;
            if (typeof B == "string") {
                var C = $[B];
                if (mini.isEquals(C, _)) return false;
                $[B] = _;
                this._setModified($, B, C);
                this._dataChanged()
            } else {
                this.beginChange();
                for (var A in B) {
                    var C = $[A],
                        _ = B[A];
                    if (mini.isEquals(C, _)) continue;
                    $[A] = _;
                    this._setModified($, A, C)
                }
                this.endChange()
            }
            this.fire("update", {
                record: $
            })
        },
        deleteRecord: function ($) {
            this._setDeleted($);
            this._dataChanged();
            this.fire("delete", {
                record: $
            })
        },
        getbyId: function ($) {
            $ = typeof $ == "object" ? $._id : $;
            return this._ids[$]
        },
        isModified: function (A, _) {
            var $ = this._originals[A._id];
            if (!$) return false;
            if (mini.isNull(_)) return false;
            return $.hasOwnProperty(_)
        },
        hasRecord: function ($) {
            return !!this.getbyId($)
        },
        findRecords: function (D, A) {
            var F = typeof D == "function",
                H = D,
                E = A || this,
                C = this.source,
                B = [];
            for (var _ = 0, G = C.length; _ < G; _++) {
                    var $ = C[_];
                    if (F) {
                        if (H.call(E, $) == true) B[B.length] = $
                    } else if ($[D] == A) B[B.length] = $
                }
            return B
        },
        each: function (A, _) {
            var $ = this.getDataView().clone();
            _ = _ || this;
            mini.forEach($, A, _)
        },
        getCount: function () {
            return this.getDataView().length
        },
        __changeCount: 0,
        beginChange: function () {
            this.__changeCount++
        },
        endChange: function ($) {
            this.__changeCount--;
            if (this.__changeCount < 0) this.__changeCount = 0;
            if (($ !== false && this.__changeCount == 0) || $ == true) {
                this.__changeCount = 0;
                this._dataChanged()
            }
        },
        _dataChanged: function () {
            if (this.__changeCount == 0) this.fire("datachanged")
        },
        _setAdded: function ($) {
            $._id = mini.DataSource.RecordId++;
            $._state = "added";
            this._ids[$._id] = $;
            delete this._originals[$._id]
        },
        _setModified: function ($, A, B) {
            if ($._state != "added" && $._state != "deleted" && $._state != "removed") {
                $._state = "modified";
                var _ = this._getOriginal($);
                if (!_.hasOwnProperty(A)) _[A] = B
            }
        },
        _setDeleted: function ($) {
            if ($._state != "added" && $._state != "deleted" && $._state != "removed") $._state = "deleted"
        },
        _setRemoved: function ($) {
            if ($._state != "added" && $._state != "removed") {
                $._state = "removed";
                delete this._originals[$._id];
                delete this._ids[$._id];
                this._removeds.push($)
            }
        },
        _getOriginal: function ($) {
            var A = $._id,
                _ = this._originals[A];
            if (!_) _ = this._originals[A] = {};
            return _
        },
        _idSelecteds: null,
        selected: null,
        selecteds: [],
        multiSelect: false,
        _checkSelecteds: function () {
            for (var _ = this.selecteds.length - 1; _ >= 0; _--) {
                var $ = this.selecteds[_],
                    A = this.getbyId($._id);
                if (!A) {
                        this.selecteds.removeAt(_);
                        delete this._idSelecteds[$._id]
                    }
            }
        },
        setMultiSelect: function ($) {
            if (this.multiSelect != $) {
                this.multiSelect = $;
                if ($ == false);
            }
        },
        isSelected: function ($) {
            if (!$) return false;
            if (typeof $ != "string") $ = $._id;
            return !!this._idSelecteds[$]
        },
        getSelecteds: function () {
            return this.selecteds.clone()
        },
        getSelected: function () {
            return this.selected
        },
        select: function ($) {
            if (typeof $ == "number") $ = this.getAt($);
            if (!$) return;
            if (this.isSelected($)) return;
            this.selected = $;
            if (this.multiSelect == false) {
                if (this.selecteds.length > 0) this._onSelectionChanged(this.selecteds, false);
                this.selecteds = [];
                this._idSelecteds = {}
            }
            this.selects([$])
        },
        deselect: function ($) {
            if (typeof $ == "number") $ = this.getAt($);
            if (!$) return;
            if (!this.isSelected($)) return;
            if (this.selected == $) this.selected = null;
            this.deselects([$])
        },
        selectAll: function () {
            var $ = this.getDataView().clone();
            this.selects($)
        },
        deselectAll: function () {
            this.deselects(this.selecteds)
        },
        selects: function (B) {
            if (!B || B.length == 0) return;
            if (this.multiSelect == false) {
                if (this.selecteds.length > 0) this._onSelectionChanged(this.selecteds, false);
                this.selecteds = [];
                this._idSelecteds = {};
                B = [B[0]]
            }
            var A = this._idSelecteds;
            for (var _ = 0, C = B.length; _ < C; _++) {
                var $ = B[_];
                if (!A[$._id]) {
                    this.selecteds.push($);
                    A[$._id] = $
                }
            }
            this._onSelectionChanged(B, true)
        },
        deselects: function (B) {
            if (!B || B.length == 0) return;
            var A = this._idSelecteds;
            B = B.clone();
            for (var _ = B.length - 1; _ >= 0; _--) {
                var $ = B[_];
                if (A[$._id]) {
                    this.selecteds.remove($);
                    delete A[$._id]
                }
            }
            this._onSelectionChanged(B, false)
        },
        _onSelectionChanged: function ($, A) {
            var _ = {
                records: $,
                select: A
            };
            this.fire("SelectionChanged", _)
        },
        _filterInfo: null,
        _sortInfo: null,
        filter: function (_, $) {
            if (typeof _ != "function") return;
            $ = $ || this;
            this._filterInfo = [_, $];
            this._doFilter();
            this._doSort();
            this._dataChanged();
            this.fire("filter")
        },
        clearFilter: function () {
            if (!this._filterInfo) return;
            this._filterInfo = null;
            this._doFilter();
            this._doSort();
            this._dataChanged();
            this.fire("filter")
        },
        sort: function (_, $) {
            if (typeof _ != "function") return;
            $ = $ || this;
            this._sortInfo = [_, $];
            this._doSort();
            this._dataChanged();
            this.fire("sort")
        },
        clearSort: function () {
            this._sortInfo = null;
            this._doFilter();
            this._dataChanged();
            this.fire("filter")
        }
    });
mini.DataSource.RecordId = 1;
mini.DataTable = function () {
        mini.DataTable.superclass.constructor.call(this)
    };
mini.extend(mini.DataTable, mini.DataSource, {
        _init: function () {
            mini.DataTable.superclass._init.call(this);
            this._filterInfo = null;
            this._sortInfo = null
        },
        add: function ($) {
            return this.insert(this.source.length, $)
        },
        addRange: function ($) {
            this.insertRange(this.source.length, $)
        },
        insert: function ($, _) {
            if (!_) return null;
            if (!mini.isNumber($)) return null;
            var B = this.dataview[$];
            if (B) this.dataview.insert($, _);
            else this.dataview.add(_);
            if (this.dataview != this.source) if (B) {
                var A = this.source.indexOf(B);
                this.source.insert(A, _)
            } else this.source.add(_);
            this._setAdded(_);
            this._dataChanged();
            var C = {
                index: $,
                record: _
            };
            this.fire("add", C)
        },
        insertRange: function ($, B) {
            if (!mini.isArray(B)) return;
            this.beginChange();
            for (var A = 0, C = B.length; A < C; A++) {
                var _ = B[A];
                this.insert($ + A, _)
            }
            this.endChange()
        },
        remove: function (_) {
            var $ = this.indexOf(_);
            return this.removeAt($)
        },
        removeAt: function ($) {
            var _ = this.getAt($);
            if (!_) return null;
            this.source.removeAt($);
            if (this.dataview !== this.source) this.dataview.removeAt($);
            this._setRemoved(_);
            this._checkSelecteds();
            this._dataChanged();
            var A = {
                record: _
            };
            this.fire("remove", A)
        },
        removeRange: function (A) {
            if (!mini.isArray(A)) return;
            this.beginChange();
            for (var _ = 0, B = A.length; _ < B; _++) {
                var $ = A[_];
                this.remove($)
            }
            this.endChange()
        },
        move: function (_, H) {
            if (!_ || !mini.isNumber(H)) return;
            if (mini.isArray(_)) {
                this.beginChange();
                var I = _,
                    C = this.getAt(H),
                    F = this;
                mini.sort(I, function ($, _) {
                        return F.indexOf($) > F.indexOf(_)
                    }, this);
                for (var E = 0, D = I.length; E < D; E++) {
                        var A = I[E],
                            $ = this.indexOf(C);
                        this.move(A, $)
                    }
                this.endChange();
                return
            }
            var B = this.dataview[H];
            this.dataview.remove(_);
            var G = this.dataview.indexOf(B);
            if (G != -1) H = G;
            if (B) this.dataview.insert(H, _);
            else this.dataview.add(_);
            if (this.dataview != this.source) {
                this.source.remove(_);
                G = this.source.indexOf(B);
                if (G != -1) H = G;
                if (B) this.source.insert(H, _);
                else this.source.add(_)
            }
            this._dataChanged();
            var J = {
                index: H,
                record: _
            };
            this.fire("move", J)
        },
        indexOf: function ($) {
            return this.dataview.indexOf($)
        },
        getAt: function ($) {
            return this.dataview[$]
        },
        getRange: function (A, B) {
            if (A > B) {
                var C = A;
                A = B;
                B = C
            }
            var D = [];
            for (var _ = A, E = B; _ <= E; _++) {
                var $ = this.dataview[_];
                D.push($)
            }
            return D
        },
        selectRange: function ($, _) {
            if (!mini.isNumber($)) $ = this.indexOf($);
            if (!mini.isNumber(_)) _ = this.indexOf(_);
            if (mini.isNull($) || mini.isNull(_)) return;
            var A = this.getRange($, _);
            this.selects(A)
        },
        toArray: function () {
            return this.source.clone()
        },
        getChanges: function (B) {
            var A = [];
            if (B == "removed" || B == null) A.addRange(this._removeds.clone());
            for (var _ = 0, C = this.source.length; _ < C; _++) {
                var $ = this.source[_];
                if (!$._state) continue;
                if ($._state == B || B == null) A[A.length] = $
            }
            return A
        },
        accept: function () {
            this.beginChange();
            for (var _ = 0, A = this.source.length; _ < A; _++) {
                var $ = this.source[_];
                this.acceptRecord($)
            }
            this._removeds = [];
            this._originals = {};
            this.endChange()
        },
        reject: function () {
            this.beginChange();
            for (var _ = 0, A = this.source.length; _ < A; _++) {
                var $ = this.source[_];
                this.rejectRecord($)
            }
            this._removeds = [];
            this._originals = {};
            this.endChange()
        },
        acceptRecord: function ($) {
            delete this._originals[$._id];
            if ($._state == "deleted") this.removeNode($);
            else {
                delete $._state;
                delete this._originals[$._id];
                this._dataChanged()
            }
        },
        rejectRecord: function (_) {
            if (_._state == "added") this.removeNode(_);
            else if (_._state == "modified" || _._state == "deleted") {
                var $ = this._getOriginal(_);
                mini.copyTo(_, $);
                delete _._state;
                delete this._originals[_._id];
                this._dataChanged()
            }
        },
        _doFilter: function () {
            if (!this._filterInfo) {
                this.dataview = this.source;
                return
            }
            var F = this._filterInfo[0],
                D = this._filterInfo[1],
                $ = [],
                C = this.source;
            for (var _ = 0, E = C.length; _ < E; _++) {
                    var B = C[_],
                        A = F.call(D, B, _, this);
                    if (A !== false) $.push(B)
                }
            this.dataview = $
        },
        _doSort: function () {
            if (!this._sortInfo) return;
            var A = this._sortInfo[0],
                _ = this._sortInfo[1],
                $ = this.getDataView().clone();
            mini.sort($, A, _);
            this.dataview = $
        }
    });
mini.regClass(mini.DataTable, "datatable");
mini.DataTree = function () {
        mini.DataTree.superclass.constructor.call(this)
    };
mini.extend(mini.DataTree, mini.DataSource, {
        idField: "id",
        parentField: "pid",
        nodesField: "children",
        isTree: true,
        setIdField: function ($) {
            this.idField = $
        },
        setParentField: function ($) {
            this.parentField = $
        },
        setNodesField: function ($) {
            if (this.nodesField != $) {
                var _ = this.root[this.nodesField];
                this.nodesField = $;
                this._doLoadData(_)
            }
        },
        _init: function () {
            mini.DataTree.superclass._init.call(this);
            this.source = this.root = {
                _id: -1,
                _level: -1
            };
            this.viewNodes = null;
            this.dataview = null
        },
        _doLoadData: function (D) {
            this.root[this.nodesField] = D || [];
            this.viewNodes = null;
            this.dataview = null;
            var A = mini.treeToArray(D, this.nodesField),
                B = this._ids;
            B[this.root._id] = this.root;
            for (var _ = 0, E = A.length; _ < E; _++) {
                    var C = A[_];
                    C._id = mini.DataSource.RecordId++;
                    B[C._id] = C
                }
            A = mini.treeToArray(D, this.nodesField, "_id", "_pid", this.root._id);
            for (_ = 0, E = A.length; _ < E; _++) {
                    var C = A[_],
                        $ = this.getParentNode(C);
                    C._pid = $._id;
                    C._level = $._level + 1;
                    delete C._state
                }
        },
        _setAdded: function (_) {
            var $ = this.getParentNode(_);
            _._id = mini.DataSource.RecordId++;
            _._pid = $._id;
            _[this.parentField] = $[this.idField];
            _._level = $._level + 1;
            _._state = "added";
            this._ids[_._id] = _;
            delete this._originals[_._id]
        },
        _createNodes: function ($) {
            var _ = $[this.nodesField];
            if (!_) _ = $[this.nodesField] = [];
            if (this.viewNodes && !this.viewNodes[$._id]) this.viewNodes[$._id] = [];
            return _
        },
        addNode: function (_, $) {
            if (!_) return;
            return this.insertNode(_, -1, $)
        },
        addNodes: function (_, $) {
            if (!mini.isArray(_)) return;
            return this.insertNodes(_, -1, $)
        },
        insertNodes: function (D, $, A) {
            if (!mini.isNumber($)) return;
            if (!mini.isArray(D)) return;
            if (!A) A = this.root;
            this.beginChange();
            var B = this._createNodes(A);
            if ($ < 0 || $ > B.length) $ = B.length;
            D = D.clone();
            for (var _ = 0, C = D.length; _ < C; _++) this.insertNode(D[_], $ + _, A);
            this.endChange();
            return D
        },
        removeNode: function (A) {
            var _ = this.getParentNode(A);
            if (!_) return;
            var $ = this.indexOfNode(A);
            return this.removeNodeAt($, _)
        },
        removeNodes: function (A) {
            if (!mini.isArray(A)) return;
            this.beginChange();
            A = A.clone();
            for (var $ = 0, _ = A.length; $ < _; $++) this.removeNode(A[$]);
            this.endChange()
        },
        moveNodes: function (E, B, _) {
            if (!E || E.length == 0 || !B || !_) return;
            this.beginChange();
            var A = this;
            mini.sort(E, function ($, _) {
                return A.indexOf($) > A.indexOf(_)
            }, this);
            for (var $ = 0, D = E.length; $ < D; $++) {
                var C = E[$];
                this.moveNode(C, B, _);
                if ($ != 0) {
                    B = C;
                    _ = "after"
                }
            }
            this.endChange()
        },
        moveNode: function (E, D, B) {
            if (!E || !D || mini.isNull(B)) return;
            if (this.viewNodes) {
                var _ = D,
                    $ = B;
                if ($ == "before") {
                        _ = this.getParentNode(D);
                        $ = this.indexOfNode(D)
                    } else if ($ == "after") {
                        _ = this.getParentNode(D);
                        $ = this.indexOfNode(D) + 1
                    } else if ($ == "add" || $ == "append") {
                        if (!_[this.nodesField]) _[this.nodesField] = [];
                        $ = _[this.nodesField].length
                    } else if (!mini.isNumber($)) return;
                if (this.isAncestor(E, _)) return false;
                var A = this.getChildNodes(_);
                if ($ < 0 || $ > A.length) $ = A.length;
                var F = {};
                A.insert($, F);
                var C = this.getParentNode(E),
                    G = this.getChildNodes(C);
                G.remove(E);
                $ = A.indexOf(F);
                A[$] = E
            }
            _ = D,
            $ = B,
            A = this._createNodes(_);
            if ($ == "before") {
                _ = this.getParentNode(D);
                A = this._createNodes(_);
                $ = A.indexOf(D)
            } else if ($ == "after") {
                _ = this.getParentNode(D);
                A = this._createNodes(_);
                $ = A.indexOf(D) + 1
            } else if ($ == "add" || $ == "append") $ = A.length;
            else if (!mini.isNumber($)) return;
            if (this.isAncestor(E, _)) return false;
            if ($ < 0 || $ > A.length) $ = A.length;
            F = {};
            A.insert($, F);
            C = this.getParentNode(E);
            C[this.nodesField].remove(E);
            $ = A.indexOf(F);
            A[$] = E;
            this._updateParentAndLevel(E, _);
            this._dataChanged();
            var H = {
                parentNode: _,
                index: $,
                node: E
            };
            this.fire("move", H)
        },
        insertNode: function (A, $, _) {
            if (!A) return;
            if (!_) _ = this.root;
            if (!mini.isNumber($)) {
                switch ($) {
                case "before":
                    $ = this.indexOfNode(_);
                    _ = this.getParentNode(_);
                    this.insertNode(A, $, _);
                    break;
                case "after":
                    $ = this.indexOfNode(_);
                    _ = this.getParentNode(_);
                    this.insertNode(A, $ + 1, _);
                    break;
                case "append":
                case "add":
                    this.addNode(A, _);
                    break;
                default:
                    break
                }
                return
            }
            var C = this._createNodes(_),
                D = this.getChildNodes(_);
            if ($ < 0) $ = D.length;
            D.insert($, A);
            $ = D.indexOf(A);
            if (this.viewNodes) {
                    var B = D[$ - 1];
                    if (B) {
                        var E = C.indexOf(B);
                        C.insert(E + 1, A)
                    } else C.insert(0, A)
                }
            A._pid = _._id;
            this._setAdded(A);
            this.cascadeChild(A, function (A, $, _) {
                    A._pid = _._id;
                    this._setAdded(A)
                }, this);
            this._dataChanged();
            var F = {
                    parentNode: _,
                    index: $,
                    node: A
                };
            this.fire("add", F);
            return A
        },
        removeNodeAt: function ($, _) {
            if (!_) _ = this.root;
            var C = this.getChildNodes(_),
                A = C[$];
            if (!A) return null;
            C.removeAt($);
            if (this.viewNodes) {
                    var B = _[this.nodesField];
                    B.remove(A)
                }
            this._setRemoved(A);
            this.cascadeChild(A, function (A, $, _) {
                    this._setRemoved(A)
                }, this);
            this._checkSelecteds();
            this._dataChanged();
            var D = {
                    parentNode: _,
                    index: $,
                    node: A
                };
            this.fire("remove", D);
            return A
        },
        bubbleParent: function (_, B, A) {
            A = A || this;
            if (_) B.call(this, _);
            var $ = this.getParentNode(_);
            if ($ && $ != this.root) this.bubbleParent($, B, A)
        },
        cascadeChild: function (A, E, B) {
            if (!E) return;
            if (!A) A = this.root;
            var D = A[this.nodesField];
            if (D) {
                D = D.clone();
                for (var $ = 0, C = D.length; $ < C; $++) {
                    var _ = D[$];
                    if (E.call(B || this, _, $, A) === false) return;
                    this.cascadeChild(_, E, B)
                }
            }
        },
        eachChild: function (B, F, C) {
            if (!F || !B) return;
            var E = B[this.nodesField];
            if (E) {
                var _ = E.clone();
                for (var A = 0, D = _.length; A < D; A++) {
                    var $ = _[A];
                    if (F.call(C || this, $, A, B) === false) break
                }
            }
        },
        collapseLevel: function ($, _) {
            this.beginChange();
            this.each(function (A) {
                var B = this.getLevel(A);
                if ($ == B) this.collapse(A, _)
            }, this);
            this.endChange()
        },
        expandLevel: function ($, _) {
            this.beginChange();
            this.each(function (A) {
                var B = this.getLevel(A);
                if ($ == B) this.expand(A, _)
            }, this);
            this.endChange()
        },
        collapse: function ($, _) {
            if (!$) return;
            this.beginChange();
            $.expanded = false;
            if (_) this.eachChild($, function ($) {
                if ($[this.nodesField] != null) this.collapse($, _)
            }, this);
            this.endChange();
            var A = {
                node: $
            };
            this.fire("collapse", A)
        },
        expand: function ($, _) {
            if (!$) return;
            this.beginChange();
            $.expanded = true;
            if (_) this.eachChild($, function ($) {
                if ($[this.nodesField] != null) this.expand($, _)
            }, this);
            this.endChange();
            var A = {
                node: $
            };
            this.fire("expand", A)
        },
        toggle: function ($) {
            if (this.isExpanded($)) this.collapse($);
            else this.expand($)
        },
        collapseAll: function () {
            this.collapse(this.root, true)
        },
        expandAll: function () {
            this.expand(this.root, true)
        },
        isAncestor: function (_, B) {
            if (_ == B) return true;
            if (!_ || !B) return false;
            var A = this.getAncestors(B);
            for (var $ = 0, C = A.length; $ < C; $++) if (A[$] == _) return true;
            return false
        },
        getAncestors: function (A) {
            var _ = [];
            while (1) {
                var $ = this.getParentNode(A);
                if (!$ || $ == this.root) break;
                _[_.length] = $;
                A = $
            }
            _.reverse();
            return _
        },
        getRootNode: function () {
            return this.root
        },
        getParentNode: function ($) {
            if (!$) return null;
            return this.getbyId($._pid)
        },
        getChildNodes: function (A, C, B) {
            var G = A[this.nodesField];
            if (this.viewNodes && B !== false) G = this.viewNodes[A._id];
            if (C === true && G) {
                var $ = [];
                for (var _ = 0, F = G.length; _ < F; _++) {
                    var D = G[_];
                    $[$.length] = D;
                    var E = this.getChildNodes(D, C, B);
                    if (E && E.length > 0) $.addRange(E)
                }
                G = $
            }
            return G || []
        },
        getChildNodeAt: function ($, _) {
            var A = this.getChildNodes(_);
            if (A) return A[$];
            return null
        },
        hasChildNodes: function ($) {
            var _ = this.getChildNodes($);
            return _.length > 0
        },
        getLevel: function ($) {
            return $._level
        },
        isLeaf: function ($) {
            if (!$ || $.isLeaf === false) return false;
            var _ = this.getChildNodes($);
            if (_.length > 0) return false;
            return true
        },
        isFirstNode: function (_) {
            if (_ == this.root) return true;
            var $ = this.getParentNode(_);
            if (!$) return false;
            return this.getFirstNode($) == _
        },
        isLastNode: function (_) {
            if (_ == this.root) return true;
            var $ = this.getParentNode(_);
            if (!$) return false;
            return this.getLastNode($) == _
        },
        isExpanded: function ($) {
            return $.expanded == true || $.expanded == 1 || mini.isNull($.expanded)
        },
        isVisible: function (_) {
            var $ = this._ids[_._pid];
            if (!$ || $ == this.root) return true;
            if ($.expanded === false) return false;
            return this.isVisible($)
        },
        getNextNode: function (A) {
            var _ = this.getbyId(A._pid);
            if (!_) return null;
            var $ = this.indexOfNode(A);
            return this.getChildNodes(_)[$ + 1]
        },
        getPrevNode: function (A) {
            var _ = this.getbyId(A._pid);
            if (!_) return null;
            var $ = this.indexOfNode(A);
            return this.getChildNodes(_)[$ - 1]
        },
        getFirstNode: function ($) {
            return this.getChildNodes($)[0]
        },
        getLastNode: function ($) {
            var _ = this.getChildNodes($);
            return _[_.length - 1]
        },
        indexOfNode: function (_) {
            var $ = this.getbyId(_._pid);
            if ($) return this.getChildNodes($).indexOf(_);
            return -1
        },
        getAt: function ($) {
            return this.getDataView()[$]
        },
        indexOf: function ($) {
            return this.getDataView().indexOf($)
        },
        getRange: function (A, C) {
            if (A > C) {
                var D = A;
                A = C;
                C = D
            }
            var B = this.getChildNodes(this.root, true),
                E = [];
            for (var _ = A, F = C; _ <= F; _++) {
                    var $ = B[_];
                    if ($) E.push($)
                }
            return E
        },
        selectRange: function ($, A) {
            var _ = this.getChildNodes(this.root, true);
            if (!mini.isNumber($)) $ = _.indexOf($);
            if (!mini.isNumber(A)) A = _.indexOf(A);
            if (mini.isNull($) || mini.isNull(A)) return;
            var B = this.getRange($, A);
            this.selects(B)
        },
        findRecords: function (D, A) {
            var C = this.toArray(),
                F = typeof D == "function",
                H = D,
                E = A || this,
                B = [];
            for (var _ = 0, G = C.length; _ < G; _++) {
                    var $ = C[_];
                    if (F) {
                        if (H.call(E, $) == true) B[B.length] = $
                    } else if ($[D] == A) B[B.length] = $
                }
            return B
        },
        _dataChangedCount: 0,
        _dataChanged: function () {
            this._dataChangedCount++;
            this.dataview = null;
            if (this.__changeCount == 0) this.fire("datachanged")
        },
        createDataView: function () {
            var B = this.getChildNodes(this.root, true),
                $ = [];
            for (var _ = 0, C = B.length; _ < C; _++) {
                    var A = B[_];
                    if (this.isVisible(A)) $[$.length] = A
                }
            return $
        },
        getDataView: function () {
            if (!this.dataview) this.dataview = this.createDataView();
            return this.dataview
        },
        _doFilter: function () {
            if (!this._filterInfo) {
                this.viewNodes = null;
                return
            }
            var C = this._filterInfo[0],
                B = this._filterInfo[1],
                A = this.viewNodes = {},
                _ = this.nodesField;

            function $(G) {
                    var J = G[_];
                    if (!J) return false;
                    var K = G._id,
                        H = A[K] = [];
                    for (var D = 0, I = J.length; D < I; D++) {
                            var F = J[D],
                                L = $(F),
                                E = C.call(B, F, D, this);
                            if (E !== false || L) H.push(F)
                        }
                    return H.length > 0
                }
            $(this.root)
        },
        _doSort: function () {
            if (!this._filterInfo && !this._sortInfo) {
                this.viewNodes = null;
                return
            }
            if (!this._sortInfo) return;
            var D = this._sortInfo[0],
                C = this._sortInfo[1],
                $ = this.nodesField;
            if (!this.viewNodes) {
                    var B = this.viewNodes = {};
                    B[this.root._id] = this.root[$].clone();
                    this.cascadeChild(this.root, function (A, _, C) {
                        var D = A[$];
                        if (D) B[A._id] = D.clone()
                    })
                }
            var A = this;

            function _(E) {
                    var G = A.getChildNodes(E);
                    mini.sort(G, D, C);
                    for (var $ = 0, F = G.length; $ < F; $++) {
                        var B = G[$];
                        _(B)
                    }
                }
            _(this.root)
        },
        toArray: function () {
            if (!this._array || this._dataChangedCount != this._dataChangedCount2) {
                this._dataChangedCount2 = this._dataChangedCount;
                this._array = this.getChildNodes(this.root, true, false)
            }
            return this._array
        },
        toTree: function () {
            return this.root[this.nodesField]
        },
        getChanges: function (_) {
            var $ = [];
            if (_ == "removed" || _ == null) $.addRange(this._removeds.clone());
            this.cascadeChild(this.root, function (B, A, C) {
                if (B._state == null || B._state == "") return;
                if (B._state == _ || _ == null) $[$.length] = B
            }, this);
            return $
        },
        accept: function () {
            this.beginChange();
            this.cascadeChild(this.root, function ($) {
                this.acceptRecord($)
            }, this);
            this._removeds = [];
            this._originals = {};
            this.endChange()
        },
        reject: function () {
            this.beginChange();
            this.cascadeChild(this.root, function ($) {
                this.rejectRecord($)
            }, this);
            this._removeds = [];
            this._originals = {};
            this.endChange()
        },
        acceptRecord: function ($) {
            delete this._originals[$._id];
            if ($._state == "deleted") this.removeNode($);
            else {
                delete $._state;
                delete this._originals[$._id];
                this._dataChanged()
            }
        },
        rejectRecord: function (_) {
            if (_._state == "added") this.removeNode(_);
            else if (_._state == "modified" || _._state == "deleted") {
                var $ = this._getOriginal(_);
                mini.copyTo(_, $);
                delete _._state;
                delete this._originals[_._id];
                this._dataChanged()
            }
        },
        upGrade: function (F) {
            var C = this.getParentNode(F);
            if (C == this.root || F == this.root) return false;
            var E = C[this.nodesField],
                _ = E.indexOf(F),
                G = F[this.nodesField] ? F[this.nodesField].length : 0;
            for (var B = E.length - 1; B >= _; B--) {
                    var $ = E[B];
                    E.removeAt(B);
                    if ($ != F) {
                        if (!F[this.nodesField]) F[this.nodesField] = [];
                        F[this.nodesField].insert(G, $)
                    }
                }
            var D = this.getParentNode(C),
                A = D[this.nodesField],
                _ = A.indexOf(C);
            A.insert(_ + 1, F);
            this._updateParentAndLevel(F, D);
            this._doFilter();
            this._dataChanged()
        },
        downGrade: function (B) {
            if (this.isFirstNode(B)) return false;
            var A = this.getParentNode(B),
                C = A[this.nodesField],
                $ = C.indexOf(B),
                _ = C[$ - 1];
            C.removeAt($);
            if (!_[this.nodesField]) _[this.nodesField] = [];
            _[this.nodesField].add(B);
            this._updateParentAndLevel(B, _);
            this._doFilter();
            this._dataChanged()
        },
        _updateParentAndLevel: function (_, $) {
            _._pid = $._id;
            _._level = $._level + 1;
            this.cascadeChild(_, function (A, $, _) {
                A._pid = _._id;
                A._level = _._level + 1;
                A[this.parentField] = _[this.idField]
            }, this);
            this._setModified(_)
        }
    });
mini.regClass(mini.DataTree, "datatree");
mini.DataTableApplys = {
        clear: function () {
            this.data.clear()
        },
        loadData: function ($) {
            this.setData($)
        },
        getCount: function () {
            return this.data.getCount()
        },
        getChanges: function () {
            return this.data.getChanges()
        },
        getData: function () {
            return this.data.toArray()
        },
        toArray: function () {
            return this.data.toArray()
        },
        getRows: function () {
            return this.data.toArray()
        },
        updateRow: function ($, A, _) {
            this.data.updateRecord($, A, _)
        },
        addRow: function ($) {
            return this.data.add($)
        },
        insertRow: function ($, _) {
            return this.data.insert($, _)
        },
        removeRow: function ($) {
            return this.data.remove($)
        },
        removeRowAt: function ($) {
            return this.data.removeAt($)
        },
        moveRow: function (_, $) {
            this.data.move(_, $)
        },
        indexOf: function ($) {
            return this.data.indexOf($)
        },
        getAt: function ($) {
            return this.data.getAt($)
        },
        findRows: function (_, $) {
            return this.findRecords(_, $)
        },
        findRecords: function (_, $) {
            return this.data.findRecords(_, $)
        },
        removeSelected: function (A) {
            var _ = this.getSelected(),
                $ = this.indexOf(_);
            this.removeRow(_);
            if (A !== false) {
                    _ = this.getAt($);
                    this.select(_ ? $ : $ - 1)
                }
        },
        getSelected: function () {
            return this.data.getSelected()
        },
        getSelecteds: function () {
            return this.data.getSelecteds()
        },
        select: function ($) {
            this.data.select($)
        },
        selects: function ($) {
            this.data.selects($)
        },
        deselect: function ($) {
            this.data.deselect($)
        },
        deselects: function ($) {
            this.data.deselects($)
        },
        selectAll: function () {
            this.data.selectAll()
        },
        deselectAll: function () {
            this.data.deselectAll()
        },
        isSelected: function ($) {
            return this.data.isSelected($)
        },
        getRange: function ($, _) {
            if (mini.isNull($) || mini.isNull(_)) return;
            return this.data.getRange($, _)
        },
        selectRange: function ($, _) {
            this.data.selectRange($, _)
        },
        filter: function (_, $) {
            this.data.filter(_, $)
        },
        clearFilter: function () {
            this.data.clearFilter()
        },
        sort: function (_, $) {
            this.data.sort(_, $)
        },
        clearSort: function () {
            this.data.clearSort()
        }
    };
mini.DataTreeApplys = {
        isLeaf: function ($) {
            return this.data.isLeaf($)
        },
        getLevel: function ($) {
            return $ ? $._level : 0
        },
        isExpanded: function ($) {
            return this.data.isExpanded($)
        },
        getChildNodes: function ($) {
            return this.data.getChildNodes($)
        },
        getParentNode: function ($) {
            return this.data.getParentNode($)
        },
        isAncestor: function (_, $) {
            return this.data.isAncestor(_, $)
        },
        getAncestors: function ($) {
            return this.data.getAncestors($)
        },
        getRootNode: function ($) {
            return this.data.getRootNode($)
        },
        getAncestors: function ($) {
            return this.data.getAncestors($)
        },
        hasChildNodes: function ($) {
            return this.data.hasChildNodes($)
        },
        indexOfNode: function ($) {
            return this.data.indexOfNode($)
        },
        updateNode: function (_, A, $) {
            this.data.updateRecord(_, A, $)
        },
        addNode: function (_, $) {
            return this.data.addNode(_, $)
        },
        insertNode: function (A, $, _) {
            return this.data.insertNode(A, $, _)
        },
        removeNodeAt: function ($, _) {
            return this.data.removeNodeAt($, _)
        },
        removeNode: function ($) {
            return this.data.removeNode($)
        },
        moveNode: function (A, $, _) {
            this.data.moveNode(A, $, _)
        },
        addNodes: function (_, $) {
            return this.data.addNodes(_, $)
        },
        insertNodes: function (A, $, _) {
            return this.data.insertNodes($, A, _)
        },
        moveNodes: function (A, $, _) {
            this.data.moveNodes(A, $, _)
        },
        removeNodes: function ($) {
            return this.data.removeNodes($)
        },
        findNodes: function (_, $) {
            return this.data.findRecords(_, $)
        },
        getChanges: function () {
            return this.data.getChanges()
        },
        getData: function () {
            return this.data.toTree()
        },
        bubbleParent: function ($, A, _) {
            this.data.bubbleParent($, A, _)
        },
        cascadeChild: function ($, A, _) {
            this.data.cascadeChild($, A, _)
        },
        eachChild: function ($, A, _) {
            this.data.eachChild($, A, _)
        },
        collapseLevel: function ($, _) {
            this.data.collapseLevel($, _)
        },
        expandLevel: function ($, _) {
            this.data.expandLevel($, _)
        },
        collapse: function ($, _) {
            this.data.collapse($, _)
        },
        expand: function ($, _) {
            this.data.expand($, _)
        },
        toggle: function ($) {
            this.data.toggle($)
        },
        collapseAll: function () {
            this.data.collapseAll()
        },
        expandAll: function () {
            this.data.expandAll()
        },
        filter: function (_, $) {
            this.data.filter(_, $)
        },
        clearFilter: function () {
            this.data.clearFilter()
        },
        sort: function (_, $) {
            this.data.sort(_, $)
        },
        clearSort: function () {
            this.data.clearSort()
        }
    };
mini.SuperGrid = function () {
        mini.SuperGrid.superclass.constructor.call(this);
        this.columns = [];
        this.viewColumns = [];
        this.setData([])
    };
mini.extend(mini.SuperGrid, mini.Control, {
        width: 300,
        height: 150,
        virtualModel: false,
        data: null,
        _rowIdField: "_id",
        multiSelect: false,
        allowRowSelect: true,
        allowCellSelect: true,
        allowAlternating: true,
        allowResizeColumn: true,
        allowMoveColumn: true,
        allowSortColumn: true,
        allowDragDrop: false,
        showDirty: true,
        scrollLeft: 0,
        scrollTop: 0,
        scrollWidth: 0,
        scrollHeight: 0,
        headerHeight: 23,
        showHScroll: true,
        showVScroll: true,
        columnWidth: 100,
        rowHeight: 21,
        columnMinWidth: 10,
        columnMaxWidth: 800,
        rowCls: "mini-supergrid-row",
        cellCls: "mini-supergrid-cell",
        rowSelectedCls: "mini-supergrid-rowselected",
        cellSelectedCls: "mini-supergrid-cellselected",
        alternatingCls: "mini-supergrid-alternating",
        uiCls: "mini-supergrid",
        _create: function () {
            this.el = document.createElement("div");
            this.el.className = "mini-supergrid";
            var $ = "<div class=\"mini-supergrid-border\">" + "<div class=\"mini-supergrid-header\"></div>" + "<div class=\"mini-supergrid-viewport\">" + "<div class=\"mini-supergrid-cells\"></div>" + "<div class=\"mini-supergrid-lockedcells\"></div>" + "</div>" + "<div class=\"mini-supergrid-hscroller\"><div class=\"mini-supergrid-hscrollercontent\"></div></div>" + "<div class=\"mini-supergrid-vscroller\"><div class=\"mini-supergrid-vscrollercontent\"></div></div>" + "</div>";
            this.el.innerHTML = $;
            this.borderEl = this.el.firstChild;
            this.headerEl = this.borderEl.firstChild;
            this.viewportEl = this.borderEl.childNodes[1];
            this.cellsEl = this.viewportEl.childNodes[0];
            this.lockedcellsEl = this.viewportEl.childNodes[1];
            this.hscrollerEl = this.borderEl.childNodes[2];
            this.vscrollerEl = this.borderEl.childNodes[3];
            this.hscrollerContentEl = this.hscrollerEl.firstChild;
            this.vscrollerContentEl = this.vscrollerEl.firstChild;
            this._Select = new mini._SuperGridSelect(this);
            this._Splitter = new mini._SuperGridSplitter(this);
            this._ColumnDragger = new mini._SuperGridColumnMove(this);
            this._Sort = new mini._GridSort(this);
            this._DragDrop = new mini._GridDragDrop(this)
        },
        _initEvents: function () {
            mini.on(this.hscrollerEl, "scroll", this.__OnHScroll, this);
            mini.on(this.vscrollerEl, "scroll", this.__OnVScroll, this);
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "dblclick", this.__OnDblClick, this);
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            mini.on(this.el, "mousewup", this.__OnMouseUp, this);
            mini.on(this.el, "contextmenu", this.__OnContextMenu, this);
            mini.on(this.el, "keydown", this.__OnKeyDown, this);
            mini.on(this.el, "mousewheel", this.__OnMousewheel, this)
        },
        doLayout: function () {
            if (!this.canLayout()) return;
            var B = this.getHeight(true),
                A = this.getWidth(true);
            mini.setHeight(this.headerEl, this.headerHeight);
            var D = this.getViewportHeight();
            mini.setHeight(this.viewportEl, D);
            this.viewportWidth = this.getViewportWidth();
            this.viewportHeight = this.getViewportHeight();
            if (this.showHScroll) this.hscrollerEl.style.bottom = 0;
            else this.hscrollerEl.style.bottom = "-2000px";
            if (this.showVScroll) this.vscrollerEl.style.right = 0;
            else this.vscrollerEl.style.right = "-2000px";
            this.vscrollerEl.style.top = this.getHeaderHeight() + "px";
            this.vscrollerEl.style.height = this.getVScrollHeight() + "px";
            this.hscrollerEl.style.width = this.getHScrollWidth() + "px";
            var _ = this.getViewScrollWidth();
            this.hscrollerContentEl.style.width = _ + "px";
            this.vscrollerContentEl.style.height = this.scrollHeight + "px";
            this.cellsEl.style.width = this.viewportWidth + "px";
            this.cellsEl.style.height = this.viewportHeight + "px";
            this.scrollLeft = this.hscrollerEl.scrollLeft;
            this.scrollTop = this.vscrollerEl.scrollTop;
            var C = this.getHScrollWidth();
            if (this.scrollLeft > this.scrollWidth - C) this.scrollLeft = this.scrollWidth - C;
            var $ = this.getAllFrozenColumnWidth();
            this.cellsEl.style.left = $ + "px";
            this.lockedcellsEl.style.width = $ + "px";
            this.lockedcellsEl.style.height = this.viewportHeight + "px";
            this._refreshViewport(true)
        },
        setScrollLeft: function ($) {
            if ($ < 0) $ = 0;
            if ($ > this.scrollWidth) $ = this.scrollWidth;
            if (this.scrollLeft != $) {
                this.allowScroll = false;
                this.hscrollerEl.scrollLeft = $;
                this.scrollLeft = this.hscrollerEl.scrollLeft;
                this.allowScroll = true;
                this.inMaxLeft = (this.scrollLeft + parseInt(this.hscrollerEl.style.width)) == this.scrollWidth;
                this._refreshViewport()
            }
        },
        setScrollTop: function ($) {
            if ($ < 0) $ = 0;
            if ($ > this.scrollHeight) $ = this.scrollHeight;
            if (this.scrollTop != $) {
                this.scrollTop = $;
                this.allowScroll = false;
                this.vscrollerEl.scrollTop = $;
                if (this.isDisplay() && this.vscrollerEl.style.display != "none") this.scrollTop = this.vscrollerEl.scrollTop;
                this.allowScroll = true;
                this.inMaxTop = (this.scrollTop + parseInt(this.vscrollerEl.style.height)) == this.scrollHeight;
                if (this.virtualModel == false) this._refreshViewport()
            }
        },
        getScrollTop: function () {
            return this.scrollTop
        },
        getScrollLeft: function () {
            return this.scrollLeft
        },
        setScrollHeight: function ($) {
            $ = parseInt($);
            if (isNaN($)) $ = 0;
            if (this.scrollHeight != $) {
                this.scrollHeight = $;
                this.layoutChanged()
            }
        },
        setShowHScroll: function ($) {
            if (this.showHScroll != $) {
                this.showHScroll = $;
                this.layoutChanged()
            }
        },
        setShowVScroll: function ($) {
            if (this.showVScroll != $) {
                this.showVScroll = $;
                this.layoutChanged()
            }
        },
        setData: function ($) {
            if (this.data == $) return;
            if (typeof $ == "string") $ = mini.get($);
            if (!$) $ = [];
            $ = this._getSource($);
            if (this.data) this._unbindSource();
            this.data = $;
            this._bindSource();
            this.fire("datachanged");
            this.__OnDataChanged()
        },
        getDataView: function () {
            return this.data.getDataView()
        },
        _getSource: function (_) {
            if (!mini.isArray(_)) return _;
            var $ = new mini.DataTable();
            $.loadData(_);
            return $
        },
        _bindSource: function () {
            this.data.on("datachanged", this.__OnDataChanged, this);
            this.data.on("SelectionChanged", this.__OnDataSelectionChanged, this);
            this.data.setMultiSelect(this.multiSelect);
            this.data.on("collapse", this.__OnTreeCollapse, this);
            this.data.on("expand", this.__OnTreeExpand, this)
        },
        _unbindSource: function () {
            this.data.un("datachanged", this.__OnDataChanged, this);
            this.data.un("SelectionChanged", this.__OnDataSelectionChanged, this);
            this.data.un("collapse", this.__OnTreeCollapse, this);
            this.data.un("expand", this.__OnTreeExpand, this)
        },
        __OnDataChanged: function (E) {
            if (this._commitEditing !== true) this.cancelEdit();
            var B = this.getDataView(),
                D = 0;
            for (var $ = 0, C = B.length; $ < C; $++) {
                    var _ = B[$],
                        A = parseInt(mini.isNull(_._height) ? this.rowHeight : _._height);
                    if (isNaN(A)) A = this.rowHeight;
                    D += A
                }
            if (this.virtualModel == false) this.scrollHeight = D;
            this.vscrollerContentEl.style.height = this.scrollHeight + "px";
            this._refreshViewport(true)
        },
        __OnDataSelectionChanged: function (J) {
            var I = this.getDataView(),
                C = {};
            for (var F = this.viewRegion.startRow, D = this.viewRegion.endRow; F <= D; F++) {
                    var $ = I[F];
                    if (!$) continue;
                    C[$._id] = $
                }
            var E = this,
                _ = [],
                H = this.data,
                A = J.records;
            for (F = 0, D = A.length; F < D; F++) {
                    $ = A[F];
                    if (!C[$._id]) continue;
                    if (J.select) this.addRowCls($, this.rowSelectedCls);
                    else this.removeRowCls($, this.rowSelectedCls)
                }
            this.fire("selectionchanged", J);
            var J = {
                    sender: this,
                    selecteds: this.getSelecteds(),
                    selected: this.getSelected()
                },
                G = this.columns;
            for (F = 0, D = G.length; F < D; F++) {
                    var B = G[F];
                    if (B.onSelectionChanged) B.onSelectionChanged.call(this, J)
                }
        },
        refresh: function () {
            this.scrollWidth = this.getAllColumnWidth();
            this.doLayout()
        },
        _createHeaderCell: function ($) {
            var _ = $.header;
            if (typeof _ == "function") _ = _.call(this, $);
            if (mini.isNull(_)) _ = "&nbsp;";
            return _
        },
        _refreshHeader: function () {
            var F = [],
                C = this.viewColumns,
                K = 0,
                B = this.viewRegion,
                D = B.startRow,
                A = B.endRow,
                $ = B.startColumn,
                L = B.endColumn,
                I = this,
                H = jQuery.boxModel;

            function G(A, $) {
                    var _ = A.width;
                    F[F.length] = "<div id=\"";
                    F[F.length] = A._id;
                    F[F.length] = "\" class=\"mini-supergrid-headercell ";
                    if (A.headerCls) F[F.length] = A.headerCls;
                    if ($ == this.frozenEndColumn) F[F.length] = "mini-supergrid-frozenCell ";
                    F[F.length] = "\" style=\"left:";
                    F[F.length] = K;
                    F[F.length] = "px;width:";
                    F[F.length] = H ? _ - 1 : _;
                    F[F.length] = "px;height:";
                    F[F.length] = H ? this.headerHeight - 1 : this.headerHeight;
                    F[F.length] = "px;";
                    if (A.headerAlign) {
                        F[F.length] = "text-align:";
                        F[F.length] = A.headerAlign || "left";
                        F[F.length] = ";"
                    }
                    if (A.headerStyle) F[F.length] = A.headerStyle;
                    F[F.length] = "\"><div class=\"mini-supergrid-headercell-inner\" style=\"line-height:" + (this.headerHeight) + "px;\">";
                    F[F.length] = this._createHeaderCell(A);
                    F[F.length] = "</div></div>";
                    K += _;
                    if (this.allowResizeColumn && A.allowResize) {
                        F[F.length] = "<div cid=\"";
                        F[F.length] = A._id;
                        F[F.length] = "\" class=\"mini-supergrid-splitter\" style=\"left:";
                        F[F.length] = K - 3;
                        F[F.length] = "px;height:";
                        F[F.length] = this.headerHeight;
                        F[F.length] = "px;top:0px;\"></div>"
                    }
                }
            if (this.isFrozen()) for (var J = this.frozenStartColumn, E = this.frozenEndColumn; J <= E; J++) {
                    var _ = C[J];
                    if (_) G.call(this, _, J)
                }
            for (J = $, E = L; J <= E; J++) {
                    _ = C[J];
                    if (_) G.call(this, _, J)
                }
            F[F.length] = "<div class=\"mini-supergrid-headercell\" style=\"left:" + K + "px;width:500px;height:" + this.headerHeight + "px;\"></div>";
            this.headerEl.innerHTML = F.join("")
        },
        _refreshViewport: function (_) {
            if (this.refreshTimer) clearTimeout(this.refreshTimer);
            var $ = this;
            this.refreshTimer = setTimeout(function () {
                $._doRefreshViewport(_)
            }, 1)
        },
        _doRefreshViewport: function (M) {
            var A = this.rowHeight,
                J = this.columnWidth,
                L = this.getDataView(),
                C = this.viewColumns,
                K = this.data,
                B = this.markRegion();
            this.viewRegion = B;
            if (this._lastRegion && M === false) if (this._lastRegion.startRow == B.startRow && this._lastRegion.endRow == B.endRow && this._lastRegion.startColumn == B.startColumn && this._lastRegion.endColumn == B.endColumn) return;
            this._lastRegion = B;
            this._refreshHeader();
            var D = B.startRow,
                _ = B.endRow,
                $ = B.startColumn,
                N = B.endColumn,
                P = this.currentCell ? this.currentCell.record : null,
                I = this.currentCell ? this.currentCell.column : null,
                F = jQuery.boxModel;

            function H($, Y, a) {
                    var R = [],
                        G = 0;
                    for (var T = D, Q = _; T <= Q; T++) {
                            var B = L[T];
                            if (!B) continue;
                            var J = B._height ? B._height : A,
                                U = -1,
                                W = " ",
                                S = -1,
                                V = " ",
                                N = "mini-supergrid-row";
                            if (this.allowAlternating && T % 2 == 1) N += " " + this.alternatingCls;
                            var O = K.isSelected(B);
                            if (O) N += " " + this.rowSelectedCls;
                            R[R.length] = "<div id=\"";
                            R[R.length] = this._createRowId(B, a);
                            R[R.length] = "\" class=\"";
                            R[R.length] = N;
                            R[R.length] = " ";
                            U = R.length;
                            R[U] = W;
                            R[R.length] = "\" style=\"top:";
                            R[R.length] = G;
                            R[R.length] = "px;height:";
                            R[R.length] = J;
                            R[R.length] = "px;";
                            S = R.length;
                            R[S] = V;
                            R[R.length] = "\">";
                            var X = 0;
                            for (var Z = $, E = Y; Z <= E; Z++) {
                                    var M = C[Z];
                                    if (!M) continue;
                                    var H = M.width,
                                        c = this._OnDrawCell(B, M, T, Z);
                                    R[R.length] = "<div  id=\"";
                                    R[R.length] = this._createCellId(B, M);
                                    R[R.length] = "\" class=\"mini-supergrid-cell ";
                                    if (a && Z == this.frozenEndColumn) R[R.length] = "mini-supergrid-frozenCell ";
                                    var b = this.showDirty ? K.isModified(B, M.field) : false;
                                    if (b) R[R.length] = "mini-supergrid-cell-dirty ";
                                    if (P == B && I == M) R[R.length] = this.cellSelectedCls + " ";
                                    if (c.cellCls) R[R.length] = c.cellCls;
                                    R[R.length] = "\" style=\"left:";
                                    R[R.length] = X;
                                    R[R.length] = "px;width:";
                                    R[R.length] = F ? H - 1 : H;
                                    R[R.length] = "px;height:";
                                    R[R.length] = F ? J - 1 : J;
                                    R[R.length] = "px;";
                                    if (M.align) {
                                            R[R.length] = "text-align:";
                                            R[R.length] = M.align || "left";
                                            R[R.length] = ";"
                                        }
                                    if (c.cellStyle) R[R.length] = c.cellStyle;
                                    R[R.length] = "\"><div class=\"mini-supergrid-cell-inner\" >";
                                    R[R.length] = c.cellHtml;
                                    if (K.isModified(B, M.field)) R[R.length] = "</div><div class=\"mini-supergrid-cell-dirtytip\"></div></div>";
                                    else R[R.length] = "</div></div>";
                                    X += H;
                                    if (c.rowCls !== null) W = c.rowCls;
                                    if (c.rowStyle !== null) V = c.rowStyle
                                }
                            R[U] = W;
                            R[S] = V;
                            R[R.length] = "</div>";
                            G += J
                        }
                    return R
                }
            var Q = this.scrollLeft,
                O = this.scrollTop,
                E = H.call(this, $, N);
            this.cellsEl.innerHTML = E.join("");
            E = H.call(this, this.frozenStartColumn, this.frozenEndColumn, true);
            this.lockedcellsEl.innerHTML = E.join("");
            var G = this.cellsEl
        },
        getHeaderHeight: function () {
            return mini.getHeight(this.headerEl)
        },
        getViewportHeight: function () {
            var $ = this.getHeight(true) - this.getHeaderHeight();
            return $ >= 0 ? $ : 0
        },
        getViewportWidth: function () {
            var $ = this.getWidth(true);
            return $ >= 0 ? $ : 0
        },
        getViewportBox: function () {
            return mini.getBox(this.viewportEl)
        },
        getHScrollWidth: function () {
            this.viewportWidth = this.getViewportWidth();
            var $ = this.viewportWidth;
            if (this.showVScroll) $ -= 18;
            if ($ < 0) $ = 0;
            return $
        },
        getVScrollHeight: function () {
            this.viewportHeight = this.getViewportHeight();
            var $ = this.viewportHeight;
            if (this.showHScroll) $ -= 18;
            if ($ < 0) $ = 0;
            return $
        },
        markRegion: function () {
            var Y = this.scrollLeft,
                W = this.scrollTop;
            if (this.viewportWidth == null) {
                    this.viewportWidth = this.getViewportWidth();
                    this.viewportHeight = this.getViewportHeight()
                }
            var A = this.viewportWidth - this.getAllFrozenColumnWidth(),
                I = this.viewportHeight,
                U = W + I,
                L = Y + A,
                P = this.rowHeight,
                G = this.columnWidth,
                T = this.getDataView(),
                F = this.viewColumns,
                Q = 0,
                O = 0,
                $ = 0,
                V = 0,
                B = 0,
                _ = 0;
            for (var H = 0, R = T.length; H < R; H++) {
                    var N = T[H],
                        C = N._height ? N._height : P;
                    B += C;
                    if (B >= W) {
                            Q = H;
                            _ = B - C;
                            break
                        }
                }
            for (H = Q, R = T.length; H < R; H++) {
                    N = T[H],
                    C = N._height ? N._height : P;
                    if (B > U) {
                        O = H;
                        break
                    }
                    B += C
                }
            if (O == 0) O = T.length - 1;
            var K = 0,
                J = 0,
                S = 0;
            if (this.isFrozen()) S = this.frozenEndColumn + 1;
            for (H = S, R = F.length; H < R; H++) {
                    var D = F[H],
                        M = D.width;
                    J += M;
                    if (J >= Y) {
                            $ = H;
                            K = J - M;
                            J -= M;
                            break
                        }
                }
            for (H = $, R = F.length; H < R; H++) {
                    D = F[H],
                    M = D.width;
                    J += M;
                    if (J >= L) {
                        V = H;
                        break
                    }
                }
            if (V == 0) V = F.length - 1;
            var E = {
                    startRow: Q,
                    endRow: O,
                    startColumn: $,
                    endColumn: V,
                    xOffset: K,
                    yOffset: _
                };
            if (this.inMaxLeft) {
                    var $ = E.startColumn,
                        X = F.length - E.endColumn;
                    E.startColumn += X;
                    E.endColumn += X;
                    for (H = $, R = E.startColumn; H < R; H++) {
                            D = F[H],
                            M = D.width;
                            E.xOffset += M
                        }
                }
            if (this.inMaxTop) {
                    Q = E.startRow,
                    X = T.length - E.endRow;
                    E.startRow += X;
                    E.endRow += X;
                    for (H = Q, R = E.startRow; H < R; H++) {
                        N = T[H];
                        if (N) {
                            C = N._height ? N._height : P;
                            E.yOffset += C
                        }
                    }
                }
            return E
        },
        getRecord: function ($) {
            if (typeof $ == "object") return $;
            if (mini.isNumber($)) return this.data.getAt($);
            return this.data.getbyId($)
        },
        getRowHeight: function ($) {
            if (mini.isNumber($)) $ = this.data.getAt($);
            return mini.isNumber($.__height) ? $.__height : this.rowHeight
        },
        getRowBox: function (J) {
            if (!mini.isNumber(J)) J = this.data.indexOf(J);
            var C = this.rowHeight,
                F = this.columnWidth,
                I = this.getDataView(),
                D = this.viewColumns,
                $ = 0,
                H = 0;
            for (var G = 0, E = J; G <= E; G++) {
                    var _ = I[G],
                        A = _._height ? _._height : C;
                    $ += A;
                    if (G == E) {
                            $ -= A;
                            H = A
                        }
                }
            $ -= this.viewRegion.yOffset;
            var B = this.getViewportBox();
            B.height = H;
            B.y += $;
            B.bottom = B.y + B.height;
            return B
        },
        getColumnBox: function (I) {
            if (!mini.isNumber(I)) I = this.viewColumns.indexOf(I);
            var F = this.rowHeight,
                _ = this.columnWidth,
                G = this.viewColumns,
                D = 0,
                A = 0,
                D = 0;
            for (var $ = 0, H = I; $ <= H; $++) {
                    var E = G[$],
                        B = E.width;
                    D += B;
                    if ($ == H) {
                            D -= B;
                            A = B
                        }
                }
            D -= this.viewRegion.xOffset;
            if (this.isFrozen()) if (this.frozenStartColumn <= I && I <= this.frozenEndColumn) {
                    D = 0,
                    A = 0,
                    D = 0;
                    for ($ = this.frozenStartColumn, H = I; $ <= H; $++) {
                        E = G[$],
                        B = E.width;
                        D += B;
                        if ($ == H) {
                            D -= B;
                            A = B
                        }
                    }
                } else if (I > this.frozenEndColumn) {
                    B = this.getColumnsWidth(0, this.frozenStartColumn - 1);
                    D -= B
                }
            var C = this.getBox(true);
            C.width = A;
            C.x += D;
            C.right = C.x + C.width;
            C.height = this.getHeaderHeight();
            C.bottom = C.y + C.height;
            return C
        },
        getCellBox: function ($, A) {
            var B = this.getRowBox($),
                C = this.getColumnBox(A),
                _ = {
                    x: C.x,
                    y: B.y,
                    width: C.width,
                    height: B.height
                };
            _.right = _.x + _.width;
            _.bottom = _.y + _.height;
            return _
        },
        frozenCellCls: "mini-supergrid-frozenCell",
        frozenStartColumn: -1,
        frozenEndColumn: -1,
        isFrozen: function () {
            return this.frozenStartColumn >= 0 && this.frozenEndColumn >= this.frozenStartColumn
        },
        frozenColumn: function ($, A) {
            if (typeof $ == "object") $ = this.viewColumns.indexOf($);
            if (typeof A == "object") A = this.viewColumns.indexOf(A);
            if (!mini.isNumber($) || !mini.isNumber(A) || $ == -1 || A == -1) return;
            if ($ > A) {
                var _ = $;
                $ = A;
                A = _
            }
            this.frozenStartColumn = $;
            this.frozenEndColumn = A;
            this.setColumns(this.columns)
        },
        unfrozenColumn: function () {
            this.frozenStartColumn = this.frozenEndColumn = -1;
            this.setColumns(this.columns)
        },
        getAllFrozenColumnWidth: function () {
            var _ = 0,
                B = this.getViewColumns();
            for (var $ = this.frozenStartColumn; $ <= this.frozenEndColumn; $++) {
                    var A = B[$];
                    if (A) _ += A.width
                }
            return _
        },
        getColumnsWidth: function (A, C) {
            var _ = 0,
                D = this.getViewColumns();
            for (var $ = A; $ <= C; $++) {
                    var B = D[$];
                    if (B) _ += B.width
                }
            return _
        },
        getViewScrollWidth: function () {
            var $ = this.scrollWidth;
            return $
        },
        _vscrollTimer: null,
        _hscrollTimer: null,
        __OnVScroll: function (_) {
            if (this.allowScroll === false) return;
            this._scrollLeft = this.hscrollerEl.scrollLeft;
            this._scrollTop = this.vscrollerEl.scrollTop;
            var $ = this;
            if (this._vscrollTimer) return;
            this._vscrollTimer = setTimeout(function () {
                $.setScrollTop($._scrollTop);
                $._vscrollTimer = null;
                $.fire("scroll", {
                    direction: "vertical"
                })
            }, 30)
        },
        __OnHScroll: function (_) {
            if (this.allowScroll === false) return;
            this._scrollLeft = this.hscrollerEl.scrollLeft;
            this._scrollTop = this.vscrollerEl.scrollTop;
            var $ = this;
            if (this._hscrollTimer) return;
            this._hscrollTimer = setTimeout(function () {
                $.setScrollLeft($._scrollLeft);
                $._hscrollTimer = null;
                $.fire("scroll", {
                    direction: "horizontal"
                })
            }, 25)
        },
        __OnMousewheel: function (B, A) {
            var $ = B.wheelDelta || -B.detail * 24,
                _ = this.scrollTop;
            this.endEdit();
            _ -= $;
            this.setScrollTop(_);
            this.fire("scroll", {
                    direction: "vertical"
                });
            if (_ == this.vscrollerEl.scrollTop) B.preventDefault()
        },
        setHeaderHeight: function ($) {
            this.headerHeight = $;
            mini.setHeight(this.headerEl, $);
            this.layoutChanged()
        },
        __OnClick: function ($) {
            this._fireChildEvent($, "Click")
        },
        __OnDblClick: function ($) {
            this._fireChildEvent($, "Dblclick")
        },
        __OnMouseDown: function ($) {
            this._fireChildEvent($, "MouseDown")
        },
        __OnMouseUp: function ($) {
            this._fireChildEvent($, "MouseUp")
        },
        __OnContextMenu: function ($) {
            this._fireChildEvent($, "ContextMenu")
        },
        __OnKeyDown: function ($) {
            this._fireChildEvent($, "KeyDown")
        },
        getAttrs: function (_) {
            var E = mini.SuperGrid.superclass.getAttrs.call(this, _),
                C = mini.getChildNodes(_);
            for (var $ = 0, D = C.length; $ < D; $++) {
                    var B = C[$],
                        A = jQuery(B).attr("property");
                    if (!A) continue;
                    A = A.toLowerCase();
                    if (A == "columns") E.columns = mini._ParseColumns(B);
                    else if (A == "data") E.data = B.innerHTML
                }
            return E
        }
    });
mini.copyTo(mini.SuperGrid.prototype, mini.DataTableApplys);
mini.regClass(mini.SuperGrid, "supergrid");
mini.GridColumnModel = {
        addColumn: function (A, _, $) {
            if (!A) return;
            $ = this.getColumn($);
            if (!$) {
                $ = this;
                if (typeof action == "string") action = "append"
            }
            if (mini.isNull(_) || _ < 0) _ = 1000;
            switch (_) {
            case "before":
                parentColumn = this.getParentColumn($);
                _ = parentColumn.columns.indexOf($);
                parentColumn.columns.insert(_, A);
                break;
            case "after":
                parentColumn = this.getParentColumn($);
                _ = parentColumn.columns.indexOf($);
                parentColumn.columns.insert(_ + 1, A);
                break;
            case "append":
            case "add":
                if (!$.columns) $.columns = [];
                $.columns.push(A);
                break;
            default:
                if (mini.isNumber(_)) {
                    if (!$.columns) $.columns = [];
                    $.columns.insert(_, A)
                }
                break
            }
            this.setColumns(this.columns)
        },
        removeColumn: function ($) {
            $ = this.getColumn($);
            var _ = this.getParentColumn($);
            if ($ && _) {
                _.columns.remove($);
                this.setColumns(this.columns)
            }
            return $
        },
        updateColumn: function ($, _) {
            $ = this.getColumn($);
            mini.copyTo($, _);
            this.setColumns(this.columns)
        },
        moveColumn: function (C, _, A) {
            C = this.getColumn(C);
            _ = this.getColumn(_);
            if (!C || !_ || !A || C == _) return;
            if (this.isAncestorColumn(C, _)) return;
            var D = this.getParentColumn(C);
            if (D) D.columns.remove(C);
            var B = _,
                $ = A;
            if ($ == "before") {
                    B = this.getParentColumn(_);
                    $ = B.columns.indexOf(_)
                } else if ($ == "after") {
                    B = this.getParentColumn(_);
                    $ = B.columns.indexOf(_) + 1
                } else if ($ == "add" || $ == "append") {
                    if (!B.columns) B.columns = [];
                    $ = B.columns.length
                } else if (!mini.isNumber($)) return;
            B.columns.insert($, C);
            this.setColumns(this.columns)
        },
        getColumn: function (_) {
            if (typeof _ == "object") return _;
            var $ = this.nameColumns[_];
            if (!$) $ = this.idColumns[_];
            return $
        },
        getParentColumn: function ($) {
            $ = this.getColumn($);
            var _ = $ ? this.idColumns[$._pid] : null;
            if ($ && !_) _ = this;
            return _
        },
        isAncestorColumn: function (_, B) {
            if (_ == B) return true;
            if (!_ || !B) return false;
            var A = this.getAncestorColumns(B);
            for (var $ = 0, C = A.length; $ < C; $++) if (A[$] == _) return true;
            return false
        },
        getAncestorColumns: function (A) {
            var _ = [];
            while (1) {
                var $ = this.getParentColumn(A);
                if (!$ || $ == this) break;
                _[_.length] = $;
                A = $
            }
            _.reverse();
            return _
        },
        getViewColumns: function () {
            return this.viewColumns
        },
        getColumns: function ($) {
            $ = this.getColumn($);
            if (!$) $ = this;
            return $.columns
        },
        isVisibleColumn: function ($) {
            $ = this.getColumn($);
            if (!$.visible) return false;
            var _ = this.getParentColumn($);
            if (_ == this) return true;
            return this.isVisibleColumn(_)
        },
        getDisplayColumns: function ($) {
            $ = this.getColumn($);
            if (!$) $ = this;
            return $.displayColumns || []
        },
        eachColumns: function (B, F, C) {
            var D = this.getColumns(B);
            if (D) {
                var _ = D.clone();
                for (var A = 0, E = _.length; A < E; A++) {
                    var $ = _[A];
                    if (F.call(C, $, A, B) === false) break
                }
            }
        },
        eachDisplayColumns: function (B, F, C) {
            var D = this.getDisplayColumns(B);
            if (D) {
                var _ = D.clone();
                for (var A = 0, E = _.length; A < E; A++) {
                    var $ = _[A];
                    if (F.call(C, $, A, B) === false) break
                }
            }
        },
        _columnId: 0,
        setColumns: function (D) {
            if (!mini.isArray(D)) D = [];
            this.columns = D;
            this.displayColumns = [];
            this.viewColumns = [];
            this.idColumns = {};
            this.nameColumns = {};
            var _ = 0,
                $ = 0;

            function B(E, A, F) {
                    this._initColumn(E);
                    E.__id = this._columnId++;
                    E._id = this.id + "$column$" + E.__id;
                    E._pid = F._id;
                    var G = E.name;
                    if (G) this.nameColumns[G] = E;
                    this.idColumns[E._id] = E;
                    E.level = $;
                    $ += 1;
                    this.eachColumns(E, B, this);
                    $ -= 1;
                    E.displayColumns = (E.columns || []).clone();
                    for (var C = E.displayColumns.length - 1; C >= 0; C--) {
                        var D = E.displayColumns[C];
                        if (D.visible == false) E.displayColumns.removeAt(C)
                    }
                    if (E.displayColumns.length == 0 && this.isVisibleColumn(E)) this.viewColumns.push(E);
                    if (E.level > _) _ = E.level
                }
            this.eachColumns(this, B, this);
            this.displayColumns = D.clone();
            for (var A = this.displayColumns.length - 1; A >= 0; A--) {
                    var C = this.displayColumns[A];
                    if (C.visible == false) this.displayColumns.removeAt(A)
                }
            this.maxColumnLevel = _;
            this.refresh()
        },
        _initColumn: function (column) {
            column._gridUID = this.uid;
            column._rowIdField = this._rowIdField;
            if (column.type && column.inited != true) {
                column.typeInited = true;
                var col = mini.getColumn(column.type),
                    _column = mini.copyTo({}, column);
                mini.copyTo(column, col);
                mini.copyTo(column, _column)
            }
            column.width = parseInt(column.width);
            if (mini.isNull(column.width) || isNaN(column.width)) column.width = this.columnWidth;
            column.visible = column.visible !== false;
            column.allowResize = column.allowResize !== false;
            column.allowMove = column.allowMove !== false;
            column.allowSort = column.allowSort === true;
            column.allowDrag = !! column.allowDrag;
            column.readOnly = !! column.readOnly;
            if (column.editor) {
                if (typeof column.editor == "string") {
                    var cls = mini.getClass(column.editor);
                    if (cls) column.editor = {
                        type: column.editor
                    };
                    else column.editor = eval("(" + column.editor + ")")
                }
                if (column.editor && !mini.isControl(column.editor)) column.editor = mini.create(column.editor)
            }
            if (column.editor) column.editor.setVisible(false);
            if (typeof column.init == "function" && column.inited != true) column.init(this);
            delete column.colspan;
            delete column.rowspan;
            column.inited = true
        },
        getDisplayColumnRows: function () {
            var _ = this.getMaxColumnLevel(),
                D = [];
            for (var C = 0, F = _; C <= F; C++) D.push([]);

            function A(C) {
                    var D = mini.treeToArray(C.displayColumns, "displayColumns"),
                        A = 0;
                    for (var $ = 0, B = D.length; $ < B; $++) {
                            var _ = D[$];
                            if (_.displayColumns.length == 0) A += 1
                        }
                    return A
                }
            var $ = mini.treeToArray(this.displayColumns, "displayColumns");
            for (C = 0, F = $.length; C < F; C++) {
                    var E = $[C],
                        B = D[E.level];
                    if (E.displayColumns.length > 0) E.colspan = A(E);
                    if (E.displayColumns.length == 0 && E.level < _) E.rowspan = _ - E.level + 1;
                    B.push(E)
                }
            return D
        },
        getMaxColumnLevel: function () {
            return this.maxColumnLevel
        },
        getAllColumnWidth: function () {
            var C = this.getViewColumns(),
                B = 0,
                _ = this.columnWidth;
            for (var $ = 0, E = C.length; $ < E; $++) {
                    var D = C[$],
                        A = mini.isNull(D.width) ? _ : D.width;
                    B += A
                }
            return B
        }
    };
mini.copyTo(mini.SuperGrid.prototype, mini.GridColumnModel);
mini.GridCellEditModel = {
        addRowCls: function (_, A) {
            _ = this.getRecord(_);
            if (!_) return;
            var $ = this._getRowEl(_);
            if ($) mini.addClass($, A);
            $ = this._getRowEl(_, true);
            if ($) mini.addClass($, A)
        },
        removeRowCls: function (_, A) {
            _ = this.getRecord(_);
            if (!_) return;
            var $ = this._getRowEl(_);
            if ($) mini.removeClass($, A);
            $ = this._getRowEl(_, true);
            if ($) mini.removeClass($, A)
        },
        _createRowId: function ($, _) {
            var A = typeof $ == "string" ? $ : $._id;
            if (_) return this.id + "$locked$" + A;
            return this.id + "$" + A
        },
        _createCellId: function ($, _) {
            return this.id + "$" + $._id + "$" + _.__id
        },
        _getRowEl: function ($, _) {
            if (!$) return null;
            var A = this._createRowId($, _);
            return document.getElementById(A)
        },
        _getHeaderCellEl: function ($) {
            return document.getElementById($._id)
        },
        _getCellEl: function ($, _) {
            _ = this.getColumn(_);
            if (!_) return null;
            var A = this._createCellId($, _);
            return document.getElementById(A)
        },
        _getRecordByEvent: function (B) {
            var _ = mini.findParent(B.target, this.rowCls);
            if (!_) return null;
            var $ = _.id.split("$"),
                A = $[$.length - 1];
            return this.data.getbyId(A)
        },
        _getColumnByEvent: function (C) {
            var B = mini.findParent(C.target, this.cellCls);
            if (B) {
                var _ = B.id.split("$"),
                    A = parseInt(_[_.length - 1]),
                    $ = this.id + "$column$" + A;
                return this.getColumn($)
            } else {
                B = mini.findParent(C.target, "mini-supergrid-headercell");
                if (B) return this.getColumn(B.id)
            }
            return null
        },
        _getCellByEvent: function (A) {
            var $ = this._getRecordByEvent(A),
                _ = this._getColumnByEvent(A);
            return {
                    record: $,
                    column: _
                }
        },
        _fireChildEvent: function (F, D) {
            if (this.disabled) return;
            var C = this._getCellByEvent(F),
                _ = C.record,
                B = C.column;
            if (_) {
                    var E = this["_OnRow" + D];
                    if (E) E.call(this, _, F);
                    else {
                        var A = {
                            record: _,
                            htmlEvent: F
                        };
                        this.fire("row" + D, A)
                    }
                }
            if (B) {
                    E = this["_OnColumn" + D];
                    if (E) E.call(this, B, F);
                    else {
                        A = {
                            column: B,
                            field: B.field,
                            htmlEvent: F
                        };
                        this.fire("column" + D, A)
                    }
                }
            if (_ && B) {
                    E = this["_OnCell" + D];
                    if (E) E.call(this, _, B, F);
                    else {
                        A = {
                            record: _,
                            column: B,
                            field: B.field,
                            htmlEvent: F
                        };
                        this.fire("cell" + D, A)
                    }
                }
            if (!_ && B) {
                    E = this["_OnHeaderCell" + D];
                    if (E) E.call(this, B, F);
                    else {
                        var A = {
                            sender: this,
                            column: B,
                            htmlEvent: F
                        },
                            $ = "onHeaderCell" + D;
                        if (B[$]) {
                                A.sender = this;
                                B[$](A)
                            }
                        this.fire("headercell" + D, A)
                    }
                }
        },
        currentCell: null,
        editingCell: null,
        editControl: null,
        editWrap: null,
        _doCurrentCell: function (C) {
            if (this.currentCell) {
                var $ = this.currentCell.record,
                    A = this.currentCell.column,
                    B = this._createCellId($, A),
                    _ = document.getElementById(B);
                if (_) if (C) mini.addClass(_, this.cellSelectedCls);
                else mini.removeClass(_, this.cellSelectedCls)
            }
        },
        setCurrentCell: function ($) {
            if (this.currentCell != $) {
                this._doCurrentCell(false);
                this.currentCell = $;
                this._doCurrentCell(true);
                this.fire("currentcellchanged")
            }
        },
        getCurrentCell: function () {
            var $ = this.currentCell;
            if ($) if (!this.data.hasRecord($.record)) {
                this.currentCell = null;
                $ = null
            }
            return $
        },
        beginEdit: function (A) {
            if (this.editingCell) this.endEdit();
            var $ = this.getCurrentCell();
            if ($) {
                var _ = this._OnCellBeginEdit($.record, $.column);
                if (_ !== false) {
                    this.editingCell = $;
                    this._OnCellShowingEdit($.record, $.column)
                }
            }
        },
        commitEdit: function ($) {
            var _ = this.editingCell;
            if (_) {
                this._commitEditing = true;
                this._OnCellCommitEdit(_.record, _.column, $);
                this._commitEditing = false
            }
        },
        endEdit: function () {
            var $ = this.editingCell;
            if ($) {
                this.commitEdit();
                this._OnCellEndEdit($.record, $.column);
                this.editingCell = null
            }
        },
        cancelEdit: function () {
            var $ = this.editingCell;
            if ($) {
                this._OnCellEndEdit($.record, $.column);
                this.editingCell = null
            }
        },
        getEditWrap: function ($) {
            if (!this.editWrap) {
                this.editWrap = mini.append(document.body, "<div class=\"mini-supergrid-editwrap\" style=\"position:absolute;\"></div>");
                mini.on(this.editWrap, "keydown", this.___OnEditControlKeyDown, this)
            }
            this.editWrap.style.zIndex = 1000000000;
            this.editWrap.style.display = "block";
            mini.setXY(this.editWrap, $.x, $.y);
            mini.setWidth(this.editWrap, $.width);
            return this.editWrap
        },
        ___OnEditControlKeyDown: function (_) {
            if (_.keyCode == 13) {
                var $ = this.editingCell;
                if ($ && $.column && $.column.enterCommit === false) return;
                this.endEdit();
                this.focus()
            } else if (_.keyCode == 27) {
                this.cancelEdit();
                this.focus()
            } else if (_.keyCode == 9) this.cancelEdit()
        },
        __OnBodyMouseDown: function (A) {
            if (this.editingControl) {
                var $ = this.editingControl.within(A);
                if ($ == false) {
                    var _ = this;
                    _.endEdit();
                    mini.un(document, "mousedown", this.__OnBodyMouseDown, this)
                }
            }
        },
        _OnCellBeginEdit: function ($, _) {
            var A = {
                sender: this,
                source: this,
                record: $,
                column: _,
                field: _.field,
                editor: _.editor,
                value: $[_.field],
                cancel: false
            };
            if (_.oncellbeginedit) _.oncellbeginedit(A);
            this.fire("cellbeginedit", A);
            if (A.cancel) return false;
            if (!A.editor) return false;
            this.editingControl = A.editor;
            if (this.editingControl.setValue) this.editingControl.setValue(A.value);
            return true
        },
        _OnCellShowingEdit: function (_, C) {
            if (!this.editingControl) return false;
            var $ = this.getCellBox(_, C),
                E = {
                    sender: this,
                    source: this,
                    record: _,
                    column: C,
                    field: C.field,
                    cellBox: $,
                    editor: this.editingControl
                };
            if (C.oncellshowingedit) C.oncellshowingedit(E);
            this.fire("cellshowingedit", E);
            var B = this.getEditWrap($),
                D = E.editor;
            if (D.render) {
                    D.render(this.editWrap);
                    D.focus();
                    setTimeout(function () {
                        D.focus()
                    }, 10);
                    D.setVisible(true)
                } else if (D.el) {
                    this.editWrap.appendChild(D.el);
                    try {
                        D.el.focus()
                    } catch (E) {}
                    setTimeout(function () {
                        try {
                            D.el.focus()
                        } catch ($) {}
                    }, 10)
                }
            if (D.setWidth) {
                    var A = $.width;
                    if (mini.isNumber(D.minWidth)) if (A < D.minWidth) A = D.minWidth;
                    D.setWidth(A)
                }
            mini.on(document, "mousedown", this.__OnBodyMouseDown, this)
        },
        _OnCellCommitEdit: function ($, A, _) {
            var C = {
                sender: this,
                source: this,
                record: $,
                column: A,
                field: A.field,
                editor: this.editingControl,
                value: _,
                cancel: false
            };
            if (C.editor && C.editor.getValue && _ === undefined) {
                try {
                    C.editor.blur()
                } catch (B) {
                    try {
                        C.editor.el.blur()
                    } catch (C) {}
                }
                C.value = C.editor.getValue()
            }
            if (A.oncellcommitedit) A.oncellcommitedit(C);
            this.fire("cellcommitedit", C);
            if (C.cancel == false) this.data.updateRecord($, A.field, C.value)
        },
        _OnCellEndEdit: function (_, C) {
            var E = {
                sender: this,
                source: this,
                record: _,
                column: C,
                field: C.field,
                editor: this.editingControl,
                value: _[C.field]
            };
            if (C.oncellendedit) C.oncellendedit(E);
            this.fire("cellendedit", E);
            if (this.editWrap) this.editWrap.style.display = "none";
            var A = this.editWrap.childNodes;
            for (var $ = A.length - 1; $ >= 0; $--) {
                var B = A[$];
                this.editWrap.removeChild(B)
            }
            var D = E.editor;
            if (D && D.hidePopup) D.hidePopup();
            if (D && D.clearValue) D.clearValue();
            this.editingControl = null
        },
        _OnDrawCell: function ($, B, C, D) {
            var _ = $[B.field],
                E = {
                    sender: this,
                    source: this,
                    rowIndex: C,
                    columnIndex: D,
                    record: $,
                    column: B,
                    field: B.field,
                    value: _,
                    cellHtml: _,
                    rowCls: null,
                    cellCls: B.cellCls || "",
                    rowStyle: null,
                    cellStyle: B.cellStyle || ""
                };
            if (B.dateFormat) if (mini.isDate(E.value)) E.cellHtml = mini.formatDate(_, B.dateFormat);
            else E.cellHtml = "";
            var A = B.renderer;
            if (A) {
                    fn = typeof A == "function" ? A : window[A];
                    if (fn) E.cellHtml = fn.call(B, E)
                }
            this.fire("drawcell", E);
            if (E.cellHtml === null || E.cellHtml === undefined) E.cellHtml = "";
            return E
        },
        setRowHeight: function ($) {
            if ($ != this.rowHeight) {
                this.rowHeight = $;
                this.layoutChanged()
            }
        },
        setMultiSelect: function ($) {
            if (this.multiSelect != $) {
                this.multiSelect = $;
                this.data.setMultiSelect($);
                this.layoutChanged()
            }
        },
        setAllowCellSelect: function ($) {
            if (this.allowCellSelect != $) {
                this.allowCellSelect = $;
                this.layoutChanged()
            }
        },
        setAllowRowSelect: function ($) {
            if (this.allowRowSelect != $) {
                this.allowRowSelect = $;
                this.layoutChanged()
            }
        },
        setAllowAlternating: function ($) {
            if (this.allowAlternating != $) {
                this.allowAlternating = $;
                this.layoutChanged()
            }
        },
        setAllowResizeColumn: function ($) {
            if (this.allowResizeColumn != $) {
                this.allowResizeColumn = $;
                this.layoutChanged()
            }
        },
        setAllowMoveColumn: function ($) {
            if (this.allowMoveColumn != $) this.allowMoveColumn = $
        },
        setAllowSortColumn: function ($) {
            if (this.allowSortColumn != $) this.allowSortColumn = $
        },
        setAllowDragDrop: function ($) {
            if (this.allowDragDrop != $) {
                this.allowDragDrop = $;
                this.layoutChanged()
            }
        },
        setShowDirty: function ($) {
            if (this.showDirty != $) {
                this.showDirty = $;
                this.layoutChanged()
            }
        },
        _getDragData: function () {
            return this.data.getSelecteds().clone()
        },
        _getDragText: function ($) {
            return "Rows " + $.length
        },
        _OnRowDragStart: function ($, _) {
            var A = {
                record: $,
                column: _,
                cancel: false
            };
            this.fire("RowDragStart", A);
            return A
        },
        _OnRowDragDrop: function ($, _, A) {
            $ = $.clone();
            var B = {
                records: $,
                targetRecord: _,
                action: A,
                cancel: false
            };
            this.fire("RowDragDrop", B);
            return B
        },
        _OnGiveFeedback: function (_, $, A) {
            var B = {};
            B.effect = _;
            B.records = $;
            B.targetRecord = A;
            this.fire("GiveFeedback", B);
            return B
        },
        isAllowDragDrop: function ($, _) {
            if (!this.allowDragDrop) return false;
            if (_.allowDrag !== true) return false;
            var A = this._OnRowDragStart($, _);
            return !A.cancel
        }
    };
mini.copyTo(mini.SuperGrid.prototype, mini.GridCellEditModel);
mini._GridSort = function ($) {
        this.grid = $;
        this.grid.on("headercellclick", this.__onGridHeaderCellClick, this);
        this.grid.on("headercellmousedown", this.__OnGridHeaderCellMouseDown, this);
        mini.on($.headerEl, "mousemove", this.__OnGridHeaderMouseMove, this);
        mini.on($.headerEl, "mouseout", this.__OnGridHeaderMouseOut, this)
    };
mini._GridSort.prototype = {
        __OnGridHeaderMouseOut: function ($) {
            if (this.focusedColumnEl) mini.removeClass(this.focusedColumnEl, "mini-supergrid-headercell-hover")
        },
        __OnGridHeaderMouseMove: function (_) {
            var $ = mini.findParent(_.target, "mini-supergrid-headercell");
            if ($) {
                mini.addClass($, "mini-supergrid-headercell-hover");
                this.focusedColumnEl = $
            }
        },
        __onGridHeaderCellClick: function (B) {
            var $ = this.grid,
                A = mini.findParent(B.target, "mini-supergrid-headercell");
            if (A) {
                    var _ = $.getColumn(A.id.split("$")[2]);
                    if ($.allowMoveColumn && _ && _.allowDrag) {
                        this.dragColumn = _;
                        this._columnEl = A;
                        this.getDrag().start(B)
                    }
                }
        }
    };
mini._SuperGridSelect = function ($) {
        this.grid = $;
        this.grid.on("cellmousedown", this.__onGridCellMouseDown, this);
        this.grid.on("cellclick", this.__onGridCellClick, this);
        mini.on(this.grid.el, "keydown", this.__OnGridKeyDown, this)
    };
mini._SuperGridSelect.prototype = {
        __OnGridKeyDown: function (G) {
            var $ = this.grid,
                A = $.getCurrentCell();
            if (G.shiftKey || G.ctrlKey) return;
            if (!A) return;
            G.preventDefault();
            var C = $.getViewColumns(),
                B = A.column,
                _ = A.record,
                F = C.indexOf(B),
                D = $.indexOf(_),
                E = $.getCount();
            switch (G.keyCode) {
                case 27:
                    break;
                case 13:
                    $.beginEdit();
                    break;
                case 37:
                    if (F > 0) F -= 1;
                    break;
                case 38:
                    if (D > 0) D -= 1;
                    break;
                case 39:
                    if (F < C.length - 1) F += 1;
                    break;
                case 40:
                    if (D < E - 1) D += 1;
                    break;
                default:
                    break
                }
            B = C[F];
            _ = $.getAt(D);
            if (B && _) {
                    A = {
                        record: _,
                        column: B
                    };
                    $.setCurrentCell(A)
                }
            if (_) {
                    $.deselectAll();
                    $.select(_)
                }
        },
        __onGridCellClick: function (A) {
            var $ = A.record,
                _ = A.column;
            if (!_.readOnly && !this.grid.isReadOnly()) if (A.htmlEvent.shiftKey || A.htmlEvent.ctrlKey);
            else this.grid.beginEdit()
        },
        __onGridCellMouseDown: function (C) {
            var $ = C.record,
                A = C.column;
            if (this.grid.allowCellSelect) {
                    var _ = {
                        record: $,
                        column: A
                    };
                    this.grid.setCurrentCell(_)
                }
            if (!this.grid.allowRowSelect) return;
            var B = {
                    record: $,
                    column: A,
                    cancel: false
                };
            this.grid.fire("beforeselect", B);
            if (B.cancel == true) return;
            if (this.grid.multiSelect) {
                    this.grid.el.onselectstart = function () {};
                    if (C.htmlEvent.shiftKey) {
                        this.grid.el.onselectstart = function () {
                            return false
                        };
                        C.htmlEvent.preventDefault();
                        if (!this.currentRecord) {
                            this.grid.data.select($);
                            this.currentRecord = this.grid.getSelected()
                        } else {
                            this.grid.deselectAll();
                            this.grid.selectRange(this.currentRecord, $)
                        }
                    } else {
                        this.grid.el.onselectstart = function () {};
                        if (C.htmlEvent.ctrlKey) {
                            this.grid.el.onselectstart = function () {
                                return false
                            };
                            C.htmlEvent.preventDefault()
                        }
                        if (A.multiSelect || C.htmlEvent.ctrlKey) {
                            if (this.grid.data.isSelected($)) {
                                if (C.htmlEvent.button != 2) this.grid.data.deselect($)
                            } else this.grid.data.select($)
                        } else if (this.grid.data.isSelected($));
                        else {
                            this.grid.data.deselectAll();
                            this.grid.data.select($)
                        }
                        this.currentRecord = this.grid.getSelected()
                    }
                }
        }
    };
mini._SuperGridSplitter = function ($) {
        this.grid = $;
        mini.on(this.grid.el, "mousedown", this.__onGridMouseDown, this)
    };
mini._SuperGridSplitter.prototype = {
        __onGridMouseDown: function (C) {
            var $ = this.grid,
                A = C.target;
            if (mini.hasClass(A, "mini-supergrid-splitter")) {
                    var B = mini.getAttr(A, "cid"),
                        _ = $.getColumn(B);
                    if ($.allowResizeColumn && _) {
                            this.splitterColumn = _;
                            this.getDrag().start(C)
                        }
                }
        },
        getDrag: function () {
            if (!this.drag) this.drag = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
            return this.drag
        },
        _OnDragStart: function (_) {
            var $ = this.grid,
                B = $.getColumnBox(this.splitterColumn);
            this.columnBox = B;
            this.dragProxy = mini.append(document.body, "<div class=\"mini-supergrid-proxy\"></div>");
            var A = $.getBox(true);
            A.x = B.x;
            A.width = B.width;
            A.right = B.right;
            mini.setBox(this.dragProxy, A)
        },
        _OnDragMove: function (A) {
            var $ = this.grid,
                B = mini.copyTo({}, this.columnBox),
                _ = B.width + (A.now[0] - A.init[0]);
            if (_ < $.columnMinWidth) _ = $.columnMinWidth;
            if (_ > $.columnMaxWidth) _ = $.columnMaxWidth;
            mini.setWidth(this.dragProxy, _)
        },
        _OnDragStop: function (_) {
            var $ = this.grid,
                A = mini.getBox(this.dragProxy);
            jQuery(this.dragProxy).remove();
            this.dragProxy = null;
            $.updateColumn(this.splitterColumn, {
                    width: A.width
                })
        }
    };
mini._SuperGridColumnMove = function ($, _, A) {
        this.grid = $;
        this.headerCellCls = _;
        this.splitterCls = A;
        mini.on(this.grid.el, "mousedown", this.__onGridMouseDown, this)
    };
mini._SuperGridColumnMove.prototype = {
        __onGridMouseDown: function (B) {
            var $ = this.grid;
            if (mini.hasClass(B.target, "mini-supergrid-splitter")) return;
            if (B.button == mini.MouseButton.Right) return;
            var A = mini.findParent(B.target, "mini-supergrid-headercell");
            if (A) {
                var _ = $.getColumn(A.id);
                if ($.allowMoveColumn && _ && _.allowMove) {
                    this.dragColumn = _;
                    this._columnEl = A;
                    this.getDrag().start(B)
                }
            }
        },
        getDrag: function () {
            if (!this.drag) this.drag = new mini.Drag({
                capture: mini.isIE9 ? false : true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
            return this.drag
        },
        _OnDragStart: function (_) {
            var $ = this.grid;
            this.dragProxy = mini.append(document.body, "<div class=\"mini-supergrid-columnproxy\"></div>");
            this.dragProxy.innerHTML = "<div class=\"mini-supergrid-columnproxy-inner\">" + $._createHeaderCell(this.dragColumn) + "</div>";
            mini.setXY(this.dragProxy, _.now[0] + 15, _.now[1] + 18);
            mini.addClass(this.dragProxy, "mini-supergrid-no");
            this.moveTop = mini.append(document.body, "<div class=\"mini-supergrid-movetop\"></div>");
            this.moveBottom = mini.append(document.body, "<div class=\"mini-supergrid-movebottom\"></div>")
        },
        _OnDragMove: function (_) {
            var $ = this.grid,
                E = _.now[0];
            mini.setXY(this.dragProxy, E + 15, _.now[1] + 18);
            this.targetColumn = this.insertAction = null;
            var C = mini.findParent(_.event.target, "mini-supergrid-headercell");
            if (C) {
                    var B = $.getColumn(C.id);
                    if (B && B != this.dragColumn && !$.isAncestorColumn(this.dragColumn, B)) {
                        this.targetColumn = B;
                        this.insertAction = "before";
                        var D = $.getColumnBox(this.targetColumn);
                        if (E > D.x + D.width / 2) this.insertAction = "after"
                    }
                }
            if (this.targetColumn) {
                    mini.addClass(this.dragProxy, "mini-supergrid-ok");
                    mini.removeClass(this.dragProxy, "mini-supergrid-no");
                    var A = $.getColumnBox(this.targetColumn);
                    this.moveTop.style.display = "block";
                    this.moveBottom.style.display = "block";
                    if (this.insertAction == "before") {
                        mini.setXY(this.moveTop, A.x - 4, A.y - 9);
                        mini.setXY(this.moveBottom, A.x - 4, A.bottom)
                    } else {
                        mini.setXY(this.moveTop, A.right - 4, A.y - 9);
                        mini.setXY(this.moveBottom, A.right - 4, A.bottom)
                    }
                } else {
                    mini.removeClass(this.dragProxy, "mini-supergrid-ok");
                    mini.addClass(this.dragProxy, "mini-supergrid-no");
                    this.moveTop.style.display = "none";
                    this.moveBottom.style.display = "none"
                }
        },
        _OnDragStop: function (_) {
            var $ = this.grid;
            mini.removeNode(this.dragProxy);
            mini.removeNode(this.moveTop);
            mini.removeNode(this.moveBottom);
            $.moveColumn(this.dragColumn, this.targetColumn, this.insertAction);
            this.dragProxy = this.moveTop = this.moveBottom = this.dragColumn = this.targetColumn = null
        }
    };
mini._GridDragDrop = function ($) {
        this.owner = $;
        this.owner.on("CellMouseDown", this.__OnGridCellMouseDown, this)
    };
mini._GridDragDrop.prototype = {
        __OnGridCellMouseDown: function (B) {
            if (B.htmlEvent.button == mini.MouseButton.Right) return;
            var $ = this.owner;
            if ($.isReadOnly() || $.isAllowDragDrop(B.record, B.column) == false) return;
            var _ = B.record;
            this.isTree = $.data.isTree;
            this.dragData = $._getDragData();
            if (this.dragData.indexOf(_) == -1) this.dragData.push(_);
            var A = this._getDrag();
            A.start(B.htmlEvent)
        },
        _OnDragStart: function (_) {
            var $ = this.owner;
            this.feedbackEl = mini.append(document.body, "<div class=\"mini-feedback\"></div>");
            this.feedbackEl.innerHTML = $._getDragText(this.dragData);
            this.lastFeedbackClass = ""
        },
        _OnDragMove: function (_) {
            var $ = this.owner,
                C = _.now[0],
                B = _.now[1];
            mini.setXY(this.feedbackEl, C + 15, B + 18);
            var A = $._getRecordByEvent(_.event);
            this.dropRecord = A;
            if (A) {
                    if (this.isTree) this.dragAction = this.getFeedback(A, B, 3);
                    else this.dragAction = this.getFeedback(A, B, 2)
                } else this.dragAction = "no";
            this.lastFeedbackClass = "mini-feedback-" + this.dragAction;
            this.feedbackEl.className = "mini-feedback " + this.lastFeedbackClass;
            if (this.dragAction == "no") A = null;
            this.setRowFeedback(A, this.dragAction)
        },
        _OnDragStop: function (B) {
            var G = this.owner;
            mini.removeNode(this.feedbackEl);
            this.feedbackEl = null;
            this.setRowFeedback(null);
            if (this.isTree) {
                var I = [];
                for (var H = 0, F = this.dragData.length; H < F; H++) {
                    var K = this.dragData[H],
                        C = false;
                    for (var J = 0, A = this.dragData.length; J < A; J++) {
                            var E = this.dragData[J];
                            if (E != K) {
                                C = G.data.isAncestor(E, K);
                                if (C) break
                            }
                        }
                    if (!C) I.push(K)
                }
                this.dragData = I
            }
            if (this.dropRecord && this.dragAction != "no") {
                var L = G._OnRowDragDrop(this.dragData, this.dropRecord, this.dragAction);
                if (!L.cancel) {
                    var I = L.records,
                        D = L.targetRecord,
                        _ = L.action;
                    if (G.data.isTree) G.data.moveNodes(I, D, _);
                    else {
                            var $ = G.data.indexOf(D);
                            if (_ == "after") $ += 1;
                            G.data.move(I, $)
                        }
                }
            }
            this.dropRecord = null;
            this.dragData = null
        },
        setRowFeedback: function (_, E) {
            var $ = this.owner;
            if (this.lastAddDomRow) $.removeRowCls(this.lastAddDomRow, "mini-supergrid-feedback-add");
            if (_ == null || this.dragAction == "add") {
                mini.removeNode(this.feedbackLine);
                this.feedbackLine = null
            }
            this.lastRowFeedback = _;
            if (_ != null) if (E == "before" || E == "after") {
                if (!this.feedbackLine) this.feedbackLine = mini.append(document.body, "<div class='mini-feedback-line'></div>");
                this.feedbackLine.style.display = "block";
                var C = $.getRowBox(_),
                    D = C.x,
                    B = C.y - 1;
                if (E == "after") B += C.height;
                mini.setXY(this.feedbackLine, D, B);
                var A = $.getBox(true);
                mini.setWidth(this.feedbackLine, A.width)
            } else {
                $.addRowCls(_, "mini-supergrid-feedback-add");
                this.lastAddDomRow = _
            }
        },
        getFeedback: function (J, H, E) {
            var C = this.owner,
                I = C.getRowBox(J),
                $ = I.height,
                G = H - I.y,
                F = null;
            if (this.dragData.indexOf(J) != -1) return "no";
            var A = false;
            if (E == 3) {
                    A = C.isLeaf(J);
                    for (var D = 0, B = this.dragData.length; D < B; D++) {
                        var K = this.dragData[D],
                            _ = C.isAncestor(K, J);
                        if (_) {
                                F = "no";
                                break
                            }
                    }
                }
            if (F == null) if (E == 2) {
                    if (G > $ / 2) F = "after";
                    else F = "before"
                } else if (A) {
                    if (G > $ / 2) F = "after";
                    else F = "before"
                } else if (G > ($ / 3) * 2) F = "after";
            else if ($ / 3 <= G && G <= ($ / 3 * 2)) F = "add";
            else F = "before";
            var L = C._OnGiveFeedback(F, this.dragData, J);
            return L.effect
        },
        _getDrag: function () {
            if (!this.drag) this.drag = new mini.Drag({
                capture: false,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
            return this.drag
        }
    };
mini.SuperTree = function () {
        mini.SuperTree.superclass.constructor.call(this)
    };
mini.extend(mini.SuperTree, mini.SuperGrid, {
        treeColumn: null,
        showTreeIcon: false,
        allowColumnSort: false,
        leafIcon: "mini-supertree-leaf",
        folderIcon: "mini-supertree-folder",
        uiCls: "mini-supertree",
        _create: function () {
            mini.SuperTree.superclass._create.call(this);
            this.addCls("mini-supergrid")
        },
        _initEvents: function () {
            mini.SuperTree.superclass._initEvents.call(this)
        },
        _getSource: function ($) {
            if (!mini.isArray($)) return $;
            var _ = new mini.DataTree();
            _.loadData($);
            return _
        },
        __OnTreeCollapse: function ($) {
            this.fire("collapse", $)
        },
        __OnTreeExpand: function ($) {
            this.fire("expand", $)
        },
        isLeaf: function ($) {
            return this.data.isLeaf($)
        },
        getLevel: function ($) {
            return $ ? $._level : 0
        },
        isExpanded: function ($) {
            return this.data.isExpanded($)
        },
        isAncestor: function ($, _) {
            return this.data.isAncestor($, _)
        },
        _OnDrawCell: function ($, _, H, C) {
            var K = mini.SuperTree.superclass._OnDrawCell.call(this, $, _, H, C);
            if (this.treeColumn !== _.name) return K;
            var A = $;
            if (!A) return K;
            var I = K.cellHtml,
                D = _.width,
                G = this.isLeaf(A),
                E = this.getLevel(A) * 18,
                B = "";
            if (!G) B = this.isExpanded(A) ? "mini-supertree-expand" : "mini-supertree-collapse";
            var J = "<div class=\"mini-supertree-node " + B + "\">";
            if (!G) J += "<a href=\"#\" onclick=\"return false;\"  hidefocus class=\"mini-supertree-ec-icon\" style=\"left:" + (E) + "px;\"></a>";
            E += 18;
            if (this.showTreeIcon) {
                    var F = this.getIcon(A);
                    J += "<div class=\"" + F + " mini-supertree-nodeicon\" style=\"left:" + E + "px;\"></div>";
                    E += 18
                }
            J += "<div class=\"mini-supertree-nodetext\" style=\"padding-left:" + (E + 2) + "px;\">" + I + "</div>";
            J += "</div>";
            I = J;
            K.cellHtml = I;
            return K
        },
        getIcon: function (_) {
            var $ = _[this.iconField];
            if (!$) if (this.isLeaf(_)) $ = this.leafIcon;
            else $ = this.folderIcon;
            return $
        },
        setTreeColumn: function ($) {
            if (this.treeColumn != $) {
                this.treeColumn = $;
                this.layoutChanged()
            }
        },
        setShowTreeIcon: function ($) {
            if (this.showTreeIcon != $) {
                this.showTreeIcon = $;
                this.layoutChanged()
            }
        },
        _OnCellMouseDown: function ($, A, B) {
            if (mini.findParent(B.target, "mini-supertree-ec-icon")) this.data.toggle($);
            else {
                var _ = {
                    record: $,
                    column: A,
                    field: A.field,
                    htmlEvent: B
                };
                this.fire("cellmousedown", _)
            }
        },
        _OnCellClick: function ($, A, B) {
            if (mini.findParent(B.target, "mini-supertree-ec-icon"));
            else {
                var _ = {
                    record: $,
                    column: A,
                    field: A.field,
                    htmlEvent: B
                };
                this.fire("cellclick", _)
            }
        },
        addNodeCls: function ($, _) {
            this.addRowCls($, _)
        },
        removeNodeCls: function ($, _) {
            this.removeRowCls($, _)
        },
        getAttrs: function (A) {
            var F = mini.SuperTree.superclass.getAttrs.call(this, A),
                E = jQuery(A),
                D = E.attr("treeColumn");
            if (D) F.treeColumn = D;
            var B = E.attr("iconField");
            if (B) F.iconField = B;
            var $ = E.attr("nodesField");
            if ($) F.nodesField = $;
            var C = E.attr("useArrows");
            if (C) F.useArrows = C == "false" ? false : true;
            var _ = E.attr("showTreeIcon");
            if (_) F.showTreeIcon = _ == "false" ? false : true;
            return F
        }
    });
mini.copyTo(mini.SuperTree.prototype, mini.DataTreeApplys);
mini.regClass(mini.SuperTree, "supertree");

mini.Gantt = function () {
        mini.Gantt.superclass.constructor.call(this);
        this.newProject();
        this.ganttView.showCriticalPath = this.showCriticalPath
    };
mini.extend(mini.Gantt, mini.Splitter, {
        width: 450,
        height: 200,
        baselineIndex: 0,
        viewModel: "gantt",
        setViewModel: function ($) {
            this.viewModel = $;
            this.ganttView.setViewModel($)
        },
        setBaselineIndex: function ($) {
            this.baselineIndex = $;
            this.ganttView.baselineIndex = $;
            this.ganttView.layout()
        },
        refresh: function () {
            this.syncTasks();
            this.doLayout()
        },
        data: null,
        headerHeight: 36,
        rowHeight: 21,
        columnWidth: 100,
        tableWidth: "50%",
        splitWidth: 4,
        minViewWidth: 100,
        treeColumn: null,
        columns: null,
        readOnly: false,
        allowDragDrop: false,
        multiSelect: false,
        showDirty: true,
        showGridLines: true,
        timeLines: null,
        showTableView: true,
        showGanttView: true,
        tableViewExpanded: true,
        ganttViewExpanded: true,
        allowResize: true,
        setAllowResize: function ($) {
            this.allowResize = $;
            this.doLayout()
        },
        uiCls: "mini-gantt",
        _create: function () {
            mini.Gantt.superclass._create.call(this);
            this._createTableView();
            this._createGanttView();
            this.pane1.showCollapseButton = true;
            this.pane2.showCollapseButton = true;
            this.resizeEl = mini.append(this.borderEl, "<div class=\"mini-grid-resizeGrid\" style=\"\"></div>");
            this._Resizer = new mini._GridResizer(this)
        },
        tableViewType: "SuperTree",
        _createTableView: function () {
            this.tableView = new mini[this.tableViewType]();
            this.tableView.set({
                headerHeight: this.headerHeight,
                rowHeight: this.rowHeight,
                columnWidth: this.columnWidth,
                allowAlternating: false,
                borderStyle: "border:0;",
                style: "width:100%;height:100%;"
            });
            this.tableView.owner = this;
            this.tableView.render(this.getPaneEl(1))
        },
        ganttViewType: "GanttView",
        _createGanttView: function () {
            this.ganttView = new mini[this.ganttViewType]();
            this.ganttView.set({
                headerHeight: this.headerHeight,
                rowHeight: this.rowHeight,
                style: "width:100%;height:100%"
            });
            this.ganttView.isWorking = mini.createDelegate(this.isWorking, this);
            this.ganttView.owner = this;
            this.ganttView.render(this.getPaneEl(2))
        },
        _initEvents: function () {
            mini.Gantt.superclass._initEvents.call(this);
            var $ = this;
            this.tableView.on("scroll", this.__OnTableViewScroll, this);
            this.ganttView.on("scroll", this.__OnGanttViewScroll, this);
            this.tableView.on("beforeselect", function ($) {
                $.task = $.record;
                this.fire("beforeselect", $)
            }, this);
            this.tableView.on("drawcell", function ($) {
                $.task = $.record;
                this.fire("drawcell", $)
            }, this);
            this.ganttView.on("drawitem", function ($) {
                $.task = $.item;
                this.fire("drawitem", $)
            }, this);
            this.tableView.on("cellbeginedit", this.__OnTableViewCellBeginEdit, this);
            this.tableView.on("cellcommitedit", this.__OnTableViewCellCommitEdit, this);
            this.ganttView.on("itemdragstart", this.__OnGanttViewItemDragStart, this);
            this.ganttView.on("itemdragcomplete", this.__OnGanttViewItemDragComplete, this);
            this.ganttView.on("ScrollToolTipNeeded", this.__OnGanttViewScrollToolTipNeeded, this);
            this.ganttView.on("itemtooltipneeded", this.__OnGanttViewItemToolTipNeeded, this);
            this.ganttView.on("LinkToolTipNeeded", this.__OnGanttViewLinkToolTipNeeded, this);
            this.ganttView.on("ItemDragTipNeeded", this.__OnGanttViewItemDragTipNeeded, this);
            this.tableView.on("cellmousedown", function ($) {
                $.task = $.record;
                this.fire("taskmousedown", $)
            }, this);
            this.tableView.on("cellclick", function ($) {
                $.task = $.record;
                this.fire("taskclick", $)
            }, this);
            this.tableView.on("celldblclick", function ($) {
                $.task = $.record;
                this.fire("taskdblclick", $)
            }, this);
            this.ganttView.on("itemmousedown", function ($) {
                $.task = $.item;
                if (this.multiSelect) {
                    if (this.isSelected($.item));
                    else this.deselectAll();
                    this.select($.item, true, false)
                } else {
                    this.deselectAll();
                    this.select($.item, true, false)
                }
                this.fire("taskmousedown", $)
            }, this);
            this.ganttView.on("itemclick", function ($) {
                $.task = $.item;
                this.fire("taskclick", $)
            }, this);
            this.ganttView.on("itemdblclick", function ($) {
                $.task = $.item;
                this.fire("taskdblclick", $)
            }, this);
            this.tableView.on("expand", function ($) {
                $.task = $.node;
                this.fire("expand", $)
            }, this);
            this.tableView.on("collapse", function ($) {
                $.task = $.node;
                this.fire("collapse", $)
            }, this);
            this.tableView.on("RowDragStart", function ($) {
                $.task = $.record;
                this.fire("taskdragstart", $)
            }, this);
            this.tableView.on("rowdragdrop", function ($) {
                $.tasks = $.records;
                $.targetTask = $.targetRecord;
                this.fire("taskdragdrop", $);
                if ($.cancel == false) this.fire("dodragdrop", $);
                $.cancel = true
            }, this);
            this.on("beforecollapse", this.__OnBeforeCollapse, this);
            this.on("beforeexpand", this.__OnBeforeExpand, this)
        },
        __OnTableViewScroll: function ($) {
            if ($.direction == "vertical") if (this.showGanttView == true && this.ganttViewExpanded == true) this.ganttView.setScrollTop(this.tableView.scrollTop)
        },
        __OnGanttViewScroll: function ($) {
            if ($.direction == "vertical") if (this.ganttView.refreshScrollComplete);
            else if (this.showTableView == true && this.tableViewExpanded == true) this.tableView.setScrollTop(this.ganttView.scrollTop)
        },
        __OnTableViewCellBeginEdit: function ($) {
            $.task = $.record;
            this.fire("cellbeginedit", $)
        },
        __OnTableViewCellCommitEdit: function ($) {
            $.task = $.record;
            this.fire("cellcommitedit", $);
            if ($.cancel == false) this.fire("aftercellcommitedit", $)
        },
        __OnGanttViewItemDragStart: function ($) {
            this.fire("itemdragstart", $)
        },
        __OnGanttViewItemDragComplete: function ($) {
            this.fire("itemdragcomplete", $)
        },
        __OnGanttViewScrollToolTipNeeded: function ($) {
            $.tooltip = mini.Gantt.ID_Text + "\uff1a" + $.item.ID + "<br/>" + mini.Gantt.Name_Text + "\uff1a" + $.item.Name
        },
        __OnGanttViewItemToolTipNeeded: function (C) {
            C.task = C.item;
            var A = C.item;

            function B($) {
                if (mini.isDate($)) return $.getFullYear() + "-" + ($.getMonth() + 1) + "-" + $.getDate() + "";
                else return ""
            }
            C.tooltip = "";
            var _ = A.Start,
                $ = A.Finish;
            if (C.baseline) {
                    C.tooltip += "<div style='text-align:center;'><b >" + mini.Gantt.Baseline_Text + "</b></div>";
                    _ = C.baseline.Start;
                    $ = C.baseline.Finish
                } else if (A.Summary) C.tooltip += "<div style='text-align:center;'><b >" + mini.Gantt.Summary_Text + "</b></div>";
            else if (A.Critical) C.tooltip += "<div style='text-align:center;'><b >" + mini.Gantt.Critical_Text + "</b></div>";
            else C.tooltip += "<div style='text-align:center;'><b >" + mini.Gantt.Task_Text + "</b></div>";
            C.tooltip += "<div>" + mini.Gantt.Name_Text + "\uff1a" + A.Name + "</div>" + "<div ><div style='float:left;'>" + mini.Gantt.PercentComplete_Text + "\uff1a<b>" + A.PercentComplete + "%</b></div>" + "<div style='float:right;'>" + mini.Gantt.Duration_Text + "\uff1a" + A.Duration + "\u65e5</div></div>" + "<div style='clear:both;'>" + mini.Gantt.Start_Text + "\uff1a" + B(_) + "</div>" + "<div>" + mini.Gantt.Finish_Text + "\uff1a" + B($) + "</div>";
            this.fire("itemtooltipneeded", C)
        },
        __OnGanttViewLinkToolTipNeeded: function (C) {
            var $ = C.fromItem,
                B = C.toItem,
                A = C.link,
                _ = "" + mini.Gantt.LinkType_Text + "\uff1a" + mini.Gantt.PredecessorLinkType[A.Type].Name + "<br/>" + mini.Gantt.LinkLag_Text + "\uff1a" + (A.LinkLag || 0) + "\u5929" + "<br/>" + mini.Gantt.From_Text + "\uff1a" + $.Name + "" + "<br/>" + mini.Gantt.To_Text + "\uff1a" + B.Name + "";
            C.tooltip = _;
            this.fire("linktooltipneeded", C)
        },
        __OnGanttViewItemDragTipNeeded: function (C) {
            var A = "",
                $ = C.item;
            C.task = $;
            if (!$ || !$.Start || !$.Finish);
            else {
                    var _ = this.ganttView.bottomTimeScale.tooltip($.Start, "bottom", this.ganttView.bottomTimeScale.type),
                        B = this.ganttView.bottomTimeScale.tooltip($.Finish, "bottom", this.ganttView.bottomTimeScale.type);
                    A = mini.Gantt.Name_Text + "\uff1a" + $.Name + "<br/>" + mini.Gantt.PercentComplete_Text + "\uff1a<b>" + $.PercentComplete + "%</b>" + "<br/>" + mini.Gantt.Start_Text + "\uff1a<b>" + _ + "</b>" + "<br/>" + mini.Gantt.Finish_Text + "\uff1a<b>" + B + "</b>"
                }
            C.tooltip = A;
            this.fire("TaskDragTipNeeded", C)
        },
        isWorking: function (C, _) {
            if (!this.data) return true;
            var A = _.type;
            if ((A == "day" && _.number > 1) || A == "week" || A == "month" || A == "quarter" || A == "halfyear") return true;
            var B = C.getDay(),
                $ = C.getTime();
            if (B == 6 || B == 0) return false;
            return true
        },
        doLayout: function () {
            if (!this.canLayout()) return;
            this.resizeEl.style.display = this.allowResize ? "" : "none";
            mini.Gantt.superclass.doLayout.call(this);
            if (this.ganttViewExpanded == false || this.showGanttView == false) this.tableView.setShowVScroll(true);
            else this.tableView.setShowVScroll(false)
        },
        __OnBeforeExpand: function ($) {
            $.cancel = true;
            if ($.paneIndex == 1) this.setTableViewExpanded(true);
            else this.setGanttViewExpanded(true)
        },
        __OnBeforeCollapse: function ($) {
            $.cancel = true;
            if ($.paneIndex == 1) this.setTableViewExpanded(false);
            else this.setGanttViewExpanded(false)
        },
        setShowGanttView: function ($) {
            if (this.showGanttView != $) {
                this.showGanttView = $;
                this.allowLayout = false;
                if ($) this.showPane(2);
                else this.hidePane(2);
                this._doShow();
                this.ganttView.setScrollTop(this.tableView.getScrollTop())
            }
        },
        setShowTableView: function ($) {
            if (this.showTableView != $) {
                this.showTableView = $;
                this.allowLayout = false;
                if ($) this.showPane(1);
                else this.hidePane(1);
                this._doShow();
                this.tableView.setScrollTop(this.ganttView.getScrollTop())
            }
        },
        setGanttViewExpanded: function ($) {
            if (this.ganttViewExpanded != $) {
                this.ganttViewExpanded = $;
                this.allowLayout = false;
                if ($) this.expandPane(2);
                else this.collapsePane(2);
                this._doShow();
                this.ganttView.setScrollTop(this.tableView.getScrollTop())
            }
        },
        setTableViewExpanded: function ($) {
            if (this.tableViewExpanded != $) {
                this.tableViewExpanded = $;
                this.allowLayout = false;
                if ($) this.expandPane(1);
                else this.collapsePane(1);
                this._doShow();
                this.tableView.setScrollTop(this.ganttView.getScrollTop())
            }
        },
        _doShow: function () {
            this.tableViewExpanded = this.pane1.expanded;
            this.ganttViewExpanded = this.pane2.expanded;
            this.showTableView = this.pane1.visible;
            this.showGanttView = this.pane2.visible;
            this.allowLayout = true;
            this.doLayout();
            this.ganttView.doUpdate()
        },
        setTableViewWidth: function ($) {
            this.updatePane(1, {
                size: $
            })
        },
        setGanttViewWidth: function ($) {
            this.updatePane(2, {
                size: $
            })
        },
        setShowDirty: function ($) {
            if (this.showDirty != $) {
                this.showDirty = $;
                this.tableView.setShowDirty($)
            }
        },
        setShowCriticalPath: function ($) {
            if (this.showCriticalPath != $) {
                this.showCriticalPath = $;
                this.ganttView.showCriticalPath = $;
                this.orderProject()
            }
        },
        setShowGridLines: function ($) {
            if (this.showGridLines != $) {
                this.showGridLines = $;
                this.ganttView.setShowGridLines($)
            }
        },
        showLabel: true,
        setShowLabel: function ($) {
            if (this.showLabel != $) {
                this.showLabel = $;
                this.ganttView.setShowLabel($)
            }
        },
        setTimeLines: function ($) {
            if (this.timeLines != $) {
                this.timeLines = $;
                this.ganttView.setTimeLines($)
            }
        },
        setRowHeight: function ($) {
            $ = parseInt($);
            if (isNaN($)) return;
            if ($ != this.rowHeight) {
                this.rowHeight = $;
                this.tableView.setRowHeight($);
                this.ganttView.setRowHeight($)
            }
        },
        setMultiSelect: function ($) {
            if (this.multiSelect != $) {
                this.multiSelect = $;
                this.tableView.setMultiSelect($)
            }
        },
        setAllowDragDrop: function ($) {
            if (this.allowDragDrop != $) {
                this.allowDragDrop = $;
                this.tableView.setAllowDragDrop($)
            }
        },
        scrollIntoView: function (_, $) {
            this.ganttView.scrollIntoView(_, $)
        },
        zoomIn: function () {
            this.ganttView.zoomIn();
            var $ = this.getSelected();
            if ($) this.scrollIntoView($)
        },
        zoomOut: function () {
            this.ganttView.zoomOut();
            var $ = this.getSelected();
            if ($) this.scrollIntoView($)
        },
        setTopTimeScale: function ($) {
            this.ganttView.setTopTimeScale($)
        },
        setBottomTimeScale: function ($) {
            this.ganttView.setBottomTimeScale($)
        },
        frozenColumn: function ($, _) {
            this.tableView.frozenColumn($, _)
        },
        unfrozenColumn: function () {
            this.tableView.unfrozenColumn()
        },
        getViewStartColumn: function () {
            return this.tableView.viewRegion.startColumn
        },
        getViewEndColumn: function () {
            return this.tableView.viewRegion.endColumn
        },
        getSelectedColumn: function () {
            var $ = this.tableView.getCurrentCell();
            return $ ? $.column : null
        },
        indexOfColumn: function ($) {
            $ = this.tableView.getColumn($);
            return this.tableView.viewColumns.indexOf($)
        },
        setColumns: function ($) {
            this.tableView.setColumns($)
        },
        updateColumn: function ($, _) {
            this.tableView.updateColumn($, _)
        },
        getColumn: function ($) {
            return this.tableView.getColumn($)
        },
        getColumnAt: function ($) {
            return this.tableView.getColumnAt($)
        },
        setTreeColumn: function ($) {
            this.tableView.setTreeColumn($)
        },
        setRowHeight: function ($) {
            if (this.rowHeight != $) {
                this.rowHeight = $;
                this.tableView.setRowHeight($);
                this.ganttView.setRowHeight($)
            }
        },
        allowProjectDateRange: false,
        getDateRange: function () {
            var A = this.getStartDate(),
                _ = this.getFinishDate();
            if (this.allowProjectDateRange == false) A = null,
            _ = null;
            var E = this.getTaskList();
            for (var $ = 0, D = E.length; $ < D; $++) {
                    var B = E[$];
                    if (B.Start) if (!A || A > B.Start) A = B.Start;
                    if (B.Finish) if (!_ || _ < B.Finish) _ = B.Finish;
                    if (this.viewModel != "gantt") {
                        var C = this.ganttView.getBaseline(B);
                        if (C) {
                            if (C.Start) if (!A || A > C.Start) A = C.Start;
                            if (C.Finish) if (!_ || _ < C.Finish) _ = C.Finish
                        }
                    }
                }
            if (!A || !_) return null;
            return [A, _]
        },
        createDefaultCalendars: function () {
            return eval("[{UID: 1,IsBaseCalendar: 1,BaseCalendarUID:-1,Name: '',WeekDays: [{DayType: 1,DayWorking: 0},{DayType: 2,DayWorking: 1},{DayType: 3,DayWorking: 1},{DayType: 4,DayWorking: 1},{DayType: 5,DayWorking: 1},{DayType: 6,DayWorking: 1},{DayType: 7,DayWorking: 0}],Exceptions:[]}]")
        },
        getTask: function ($) {
            if ($ === null || $ === undefined) return null;
            $ = typeof $ == "object" ? $.UID : $;
            return this._TaskUIDs[$]
        },
        getTaskAt: function ($) {
            return this.tasks.getAt($)
        },
        getTaskByID: function ($) {
            $ = parseInt($) - 1;
            return this.taskList[$]
        },
        findTasks: function (_, $) {
            return this.tasks.findRecords(_, $)
        },
        eachChild: function (_, A, $) {
            this.tasks.eachChild(_, A, $)
        },
        cascadeChild: function (_, A, $) {
            this.tasks.cascadeChild(_, A, $)
        },
        bubbleParent: function (_, A, $) {
            this.tasks.bubbleParent(_, A, $)
        },
        collapseLevel: function ($, _) {
            this.tasks.collapseLevel($, _)
        },
        expandLevel: function ($, _) {
            this.tasks.expandLevel($, _)
        },
        collapse: function ($, _) {
            this.tasks.collapse($, _)
        },
        expand: function ($, _) {
            this.tasks.expand($, _)
        },
        toggle: function ($) {
            this.tasks.toggle($)
        },
        collapseAll: function () {
            this.tasks.collapseAll()
        },
        expandAll: function () {
            this.tasks.expandAll()
        },
        newProject: function () {
            var $ = new Date(),
                _ = new Date($.getFullYear(), $.getMonth(), $.getDate()),
                A = new Date($.getFullYear(), $.getMonth() + 1, $.getDate());
            this.data = {
                    Name: "",
                    StartDate: _,
                    FinishDate: A,
                    CalendarUID: "1",
                    Calendars: this.createDefaultCalendars(),
                    Tasks: [],
                    Resources: []
                };
            this._initProject(this.data);
            this.loadTasks([])
        },
        _initProject: function (A) {
            if (!mini.isDate(A.StartDate)) throw new Error("StartDate must be Date type");
            if (!mini.isDate(A.FinishDate)) throw new Error("FinishDate must be Date type");
            if (A.StartDate >= A.FinishDate) throw new Error("StartDate not >= FinishDate");
            if (!A.CalendarUID || !A.Calendars) {
                A.CalendarUID = "1";
                A.Calendars = this.createDefaultCalendars()
            }
            this.startDate = A.StartDate;
            this.finishDate = A.FinishDate;
            this.rootTaskUID = -1;
            this._TaskUIDs = {};
            this.taskList = [];
            this._ResourceUIDs = {};
            var C = A.Resources || [];
            for (var $ = 0, B = C.length; $ < B; $++) {
                var _ = C[$];
                this._ResourceUIDs[_.UID] = _
            }
            this._Validator = new MyProjectSchedule.Validator(this);
            this._Critical = new MyProjectSchedule.Critical(this)
        },
        getRemovedTasks: function () {
            var A = this.tasks.getChanges("removed");
            for (var $ = 0, _ = A.length; $ < _; $++) delete A[$].children;
            return A
        },
        getTaskTree: function () {
            return this.tasks.toTree()
        },
        getTaskList: function () {
            return this.tasks.toArray()
        },
        getChangedTasks: function () {
            var $ = this.tasks.getChanges();
            return $
        },
        acceptChanges: function () {
            this.tasks.accept()
        },
        parseTasks: function (_, $) {
            return _
        },
        loadTasks: function (B) {
            if (!mini.isArray(B)) B = [];
            this.parseTasks(B, this.data.TASKMAP);
            delete this.data.TASKMAP;
            this.allowTaskModified = false;
            this.data.Tasks = B;
            this.tasks = new mini.DataTree();
            this.tasks.idField = "UID";
            this.tasks.parentField = "ParentTaskUID";
            this.tasks.loadData(B);
            this.tasks.getRootNode().UID = this.rootTaskUID;
            var B = this.getTaskList();
            for (var $ = 0, A = B.length; $ < A; $++) {
                var _ = B[$];
                if (_.Start && !mini.isDate(_.Start)) _.Start = mini.parseDate(_.Start);
                if (_.Finish && !mini.isDate(_.Finish)) _.Finish = mini.parseDate(_.Finish);
                if (!mini.isDate(_.Start)) _.Start = null;
                if (!mini.isDate(_.Finish)) _.Finish = null
            }
            this.tableView.setData(this.tasks);
            this.ganttView.setData(this.tasks);
            this.syncTasks();
            _ = this.getTaskAt(0);
            if (_) this.scrollIntoView(_);
            B = this.getTaskList();
            for ($ = 0, A = B.length; $ < A; $++) {
                _ = B[$];
                _._x = _.ID + ":" + _.OutlineNumber
            }
            this.tasks.on("selectionchanged", function ($) {}, this);
            this.tasks.on("datachanged", function ($) {
                this.fire("datachanged", $)
            }, this);
            this.allowTaskModified = true
        },
        syncTasks: function (_) {
            var E = this.taskList = this.getTaskList();
            this._TaskUIDs = {};
            for (var $ = 0, D = E.length; $ < D; $++) {
                var C = E[$];
                this._TaskUIDs[C.UID] = C
            }
            var F = this.tasks.getRootNode()[this.tasks.nodesField];
            this._syncTaskNodes(F, 1, "", this.rootTaskUID);
            var B = new Date();
            if (this._Validator && _ !== false) this._Validator.valid();
            if (_ !== false) {
                var A = this.getDateRange();
                if (A) {
                    this.ganttView.setDateRange(A[0], A[1]);
                    this.ganttView.doLayout(true)
                }
            }
            for ($ = 0, D = E.length; $ < D; $++) {
                C = E[$];
                if (C._x && C._x != C.ID + ":" + C.OutlineNumber) this.setTaskModified(C)
            }
        },
        __TaskID: 1,
        autoSyncSummary: true,
        allowSummaryLink: true,
        _syncTaskNodes: function (D, M, K, C) {
            if (C == this.rootTaskUID) this.__TaskID = 1;
            var A = null,
                J = null,
                H = 0;
            for (var I = 0, E = D.length; I < E; I++) {
                    var N = D[I];
                    N["ID"] = this.__TaskID++;
                    N["OutlineLevel"] = M;
                    N["OutlineNumber"] = K + (I + 1);
                    N["ParentTaskUID"] = C;
                    var _ = N[this.tasks.nodesField];
                    if (_ != null && _.length > 0) {
                        N.Summary = 1;
                        var $ = this._syncTaskNodes(_, M + 1, N.OutlineNumber + ".", N.UID);
                        if (this.autoSyncSummary) {
                            if ($[0]) N.Start = $[0];
                            if ($[1]) N.Finish = $[1];
                            if ($[2]) N.Work = $[2]
                        }
                    } else if (N.isLeaf === false);
                    else N.Summary = 0;
                    if (N.Summary == 1 || !N.PredecessorLink) N.PredecessorLink = [];
                    var G = N.PredecessorLink;
                    for (var L = G.length - 1; L >= 0; L--) {
                        var B = G[L],
                            F = this._TaskUIDs[B.PredecessorUID];
                        if (F == null || (this.allowSummaryLink == false && F.Summary == 1)) {
                                G.removeAt(L);
                                this.setTaskModified(N, "PredecessorLink")
                            } else if (this.tasks.isAncestor(N, F) || this.tasks.isAncestor(F, N)) {
                                G.removeAt(L);
                                this.setTaskModified(N, "PredecessorLink")
                            }
                    }
                    if (this.autoSyncSummary) {
                        if (N.Start && (!A || A.getTime() > N.Start.getTime())) A = new Date(N.Start.getTime());
                        if (N.Finish && (!J || J.getTime() < N.Finish.getTime())) J = new Date(N.Finish.getTime());
                        if (!isNaN(N.Work)) H += N.Work
                    }
                }
            return this.autoSyncSummary ? [A, J, H] : null
        },
        getNextTask: function ($) {
            $ = this.getTask($);
            return this.tasks.getNextNode($)
        },
        getPrevTask: function ($) {
            $ = this.getTask($);
            return this.tasks.getPrevNode($)
        },
        getFirstTask: function ($) {
            $ = this.getTask($);
            return this.tasks.getFirstNode($)
        },
        getLastTask: function ($) {
            $ = this.getTask($);
            return this.tasks.getLastNode($)
        },
        getParentTask: function (_) {
            _ = this.getTask(_);
            if (!_) return null;
            var $ = this.tasks.getParentNode(_);
            if ($ == this.tasks.getRootNode()) return null;
            return $
        },
        getChildTasks: function (_, $) {
            return this.tasks.getChildNodes(_, $, false)
        },
        getRoot: function () {
            return this.tasks.getRootNode()
        },
        getAllChildTasks: function ($) {
            return this.getChildTasks($, true)
        },
        getAncestorTasks: function ($) {
            return this.tasks.getAncestors($)
        },
        isAncestor: function ($, _) {
            $ = this.getTask($);
            _ = this.getTask(_);
            return this.tasks.isAncestor($, _)
        },
        getViewStartDate: function () {
            return this.ganttView.startDate
        },
        getViewFinishDate: function () {
            return this.ganttView.finishDate
        },
        getStartDate: function () {
            return this.data.StartDate
        },
        getFinishDate: function () {
            return this.data.FinishDate
        },
        newTask: function () {
            task = {};
            task.UID = UUID();
            task.Name = "";
            task.PercentComplete = 0;
            task.Work = 0;
            task.Weight = 0;
            task.ConstraintType = 0;
            var $ = this.ganttView.startDate;
            task.Start = new Date($.getFullYear(), $.getMonth(), $.getDate());
            task.Finish = new Date($.getFullYear(), $.getMonth(), $.getDate(), 23, 59, 59);
            task.Duration = 1;
            task.Work = 0;
            var _ = {
                task: task
            };
            this.fire("taskcreated", _);
            return _.task
        },
        addTask: function (C, $, B) {
            if (!C || typeof C != "object") return;
            if ($ == "add") $ = "append";
            if (!$) $ = -1;
            B = this.getTask(B);
            if (!B) B = this.tasks.getRootNode();
            if (B == this.tasks.getRootNode() && typeof $ == "string") $ = "append";
            var A = this.newTask();
            mini.copyIf(C, A);
            this.tasks.beginChange();
            switch ($) {
            case "before":
                $ = this.tasks.indexOfNode(B);
                var _ = this.tasks.getParentNode(B);
                this.tasks.insertNode(C, $, _);
                break;
            case "after":
                $ = this.tasks.indexOfNode(B);
                _ = this.tasks.getParentNode(B);
                this.tasks.insertNode(C, $ + 1, _);
                break;
            case "append":
            case "add":
                this.tasks.addNode(C, B);
                break;
            default:
                if (mini.isNumber($)) this.tasks.insertNode(C, $, B);
                break
            }
            this.orderProject();
            this.tasks.endChange()
        },
        addTasks: function (G, $, C) {
            if (!mini.isArray(C)) C = [C];
            if (!mini.isArray(C) || !mini.isArray(G)) return;
            this.tasks.beginChange();
            this.beginOrder();
            for (var _ = 0, F = G.length; _ < F; _++) {
                var E = G[_];
                for (var B = 0, A = C.length; B < A; B++) {
                    var D = C[B];
                    D = this.getTask(D);
                    E = mini.clone(E);
                    this.addTask(E, $, D)
                }
            }
            this.endOrder();
            this.tasks.endChange()
        },
        removeTask: function ($) {
            $ = this.getTask($);
            if (!$) return null;
            if ($.UID == this.rootTaskUID) {
                this.clearTasks();
                return $
            }
            this.tasks.beginChange();
            this.tasks.removeNode($);
            this.orderProject();
            this.tasks.endChange()
        },
        clearTasks: function () {
            this.tasks.beginChange();
            this.data.Tasks = [];
            this.tasks.clear();
            this.syncTasks();
            this.tasks.endChange()
        },
        updateTask: function (A, _, $) {
            var A = this.getTask(A);
            if (!A || !_) return;
            this.tasks.beginChange();
            this.tasks.updateRecord(A, _, $);
            this.orderProject();
            this.tasks.endChange()
        },
        updateTasks: function (D, _) {
            if (!mini.isArray(D) || typeof _ != "object") return;
            this.tasks.beginChange();
            this.beginOrder();
            for (var $ = 0, B = D.length; $ < B; $++) {
                var A = D[$];
                A = this.getTask(A);
                var C = mini.clone(_);
                this.tasks.updateRecord(A, C)
            }
            this.endOrder();
            this.tasks.endChange()
        },
        moveTask: function (A, _, $) {
            A = this.getTask(A);
            _ = this.getTask(_);
            if (!A || !_ || mini.isNull($)) return;
            this.tasks.beginChange();
            this.tasks.moveNode(A, _, $);
            this.orderProject();
            this.tasks.endChange()
        },
        moveTasks: function (C, A, _) {
            A = this.getTask(A);
            if (!C || C.length == 0 || !A || mini.isNull(_)) return;
            this.tasks.beginChange();
            for (var $ = 0, B = C.length; $ < B; $++) C[$] = this.getTask(C[$]);
            this.tasks.moveNodes(C, A, _);
            this.orderProject();
            this.tasks.endChange()
        },
        upgradeTask: function ($) {
            $ = this.getTask($);
            if (!$) return;
            this.tasks.beginChange();
            this.tasks.upGrade($);
            this.orderProject();
            this.tasks.endChange()
        },
        downgradeTask: function ($) {
            $ = this.getTask($);
            if (!$) return;
            this.tasks.beginChange();
            this.tasks.downGrade($);
            this.orderProject();
            this.tasks.endChange()
        },
        moveUpTask: function (A) {
            var _ = this.getParentTask(A),
                $ = this.getPrevTask(A);
            if ($) this.moveTask(A, $, "before")
        },
        moveDownTask: function (A) {
            var $ = this.getParentTask(A),
                _ = this.getNextTask(A);
            if (_) this.moveTask(A, _, "after")
        },
        removeTasks: function (A) {
            if (!mini.isArray(A)) return;
            for (var $ = 0, _ = A.length; $ < _; $++) A[$] = this.getTask(A[$]);
            this.tasks.beginChange();
            this.tasks.removeNodes(A);
            this.orderProject();
            this.tasks.endChange()
        },
        allowLinkLimit: false,
        getPredecessorLink: function (B, C) {
            B = this.getTask(B);
            C = this.getTask(C);
            if (B == null || !C) return null;
            var D = B.PredecessorLink;
            if (D != null && D.length > 0) for (var $ = 0, A = D.length; $ < A; $++) {
                var _ = D[$];
                if (_.PredecessorUID == C.UID) return _
            }
            return null
        },
        getLinkString: function (E) {
            if (typeof E == "string") return E;
            if (!E) E = [];
            var D = [];
            for (var $ = 0, A = E.length; $ < A; $++) {
                var _ = E[$];
                if (!_.LinkLag) _.LinkLag = 0;
                var C = this.getTask(_.PredecessorUID);
                if (!C) continue;
                var B = C.ID;
                if (_.Type != 1 || _.LinkLag != 0) B += mini.Gantt.PredecessorLinkType[_.Type].Short;
                if (_.LinkLag != 0) {
                    if (_.LinkLag > 0) B += "+";
                    B += _.LinkLag
                }
                if (this.allowLinkLimit) if (!_.Limit) B = "~" + B;
                D.push(B)
            }
            return D.join(",")
        },
        getLinksByString: function (J) {
            var F = [];
            if (mini.isArray(J)) F = J;
            if (typeof J == "string") {
                var D = J.split(",");
                for (var G = 0, B = D.length; G < B; G++) {
                    var I = D[G];
                    try {
                        var H = -1,
                            _ = -1,
                            $ = true,
                            K = 0,
                            M = I.trim().toUpperCase();
                        if (M.substring(0, 1) == "~") {
                                $ = false;
                                M = M.substring(1)
                            }
                        H = parseInt(M);
                        if (H <= 0 || isNaN(H)) continue;
                        var E = this.getTaskByID(H);
                        if (E == null) continue;
                        M = M.substring(H.toString().length);
                        if (M.indexOf("+") != -1) {
                                var L = M.split("+");
                                M = L[0];
                                if (L.length > 1) K = parseInt(L[1])
                            } else if (M.indexOf("-") != -1) {
                                L = M.split("-");
                                M = L[0];
                                if (L.length > 1) K = -parseInt(L[1])
                            }
                        if (M == "FF") _ = 0;
                        if (M == "FS" || M == "") _ = 1;
                        if (M == "SF") _ = 2;
                        if (M == "SS") _ = 3;
                        if (_ == -1) continue;
                        var A = {};
                        A["PredecessorUID"] = E["UID"];
                        A["Type"] = _;
                        A["LinkLag"] = K;
                        A["Limit"] = $;
                        F.push(A)
                    } catch (C) {}
                }
            }
            return F
        },
        setLinks: function (I, D) {
            I = this.getTask(I);
            D = this.getLinksByString(D);
            if (I == null) return;
            var F = {},
                H = [];
            for (var E = 0, _ = D.length; E < _; E++) {
                    var $ = D[E],
                        C = this.getTask($.PredecessorUID);
                    if (!C && $.PredecessorID) C = this.getTaskByID($.PredecessorID);
                    if (!C || mini.isNull($.Type)) continue;
                    var J = C.UID;
                    if (F[J]) continue;
                    if (!$.LinkLag) $.LinkLag = 0;
                    H.push($);
                    F[J] = $
                }
            D = I.PredecessorLink;
            var A = this.getLinkString(D),
                G = this.getLinkString(H);
            if (A == G) return;
            try {
                    I.PredecessorLink = H;
                    this._Validator.valid();
                    this.setTaskModified(I, "PredecessorLink");
                    this.orderProject()
                } catch (B) {
                    I.PredecessorLink = D;
                    throw B
                }
        },
        setAssignments: function (D, $) {
            D = this.getTask(D);
            if (D == null) return;
            if (!mini.isArray($)) $ = [];
            for (var _ = $.length - 1; _ >= 0; _--) {
                var A = $[_],
                    B = A.ResourceUID,
                    C = this.getResource(B);
                if (C == null) $.removeAt(_);
                else C.TaskUID = D.UID
            }
            D["Assignments"] = $;
            this.setTaskModified(D, "Assignments")
        },
        showCriticalPath: true,
        clearCriticalPath: function () {
            if (this._Critical) this._Critical.clearCritical()
        },
        createCriticalPath: function () {},
        beginUpdate: function () {
            this.tasks.beginChange();
            this.beginOrder()
        },
        endUpdate: function () {
            this.endOrder();
            this.tasks.endChange()
        },
        _orderCount: 0,
        allowOrderProject: false,
        beginOrder: function () {
            this._orderCount++
        },
        endOrder: function (_) {
            this._orderCount--;
            if (this._orderCount < 0) this._orderCount = 0;
            if ((_ !== false && this._orderCount == 0) || _ == true) {
                this._orderCount = 0;
                var $ = null;
                if (_ && _ !== true) $ = _;
                this.orderProject($)
            }
        },
        orderProject: function () {
            this.tasks.beginChange();
            this.syncTasks(false);
            if (this._orderCount == 0) {
                if (this.showCriticalPath) this.createCriticalPath();
                else this.clearCriticalPath();
                var $ = this.getDateRange();
                if ($) this.ganttView.setDateRange($[0], $[1])
            }
            this.tasks.endChange();
            this.doLayout()
        },
        setTaskModified: function (A, $, _) {
            if (this.allowTaskModified == false) return;
            if ($ && mini.isNull(_)) _ = null;
            this.tasks._setModified(A, $, _)
        },
        getStartByCalendar: function ($, _) {
            return this._Calendar.getStart($, _)
        },
        getFinishByCalendar: function (_, $) {
            return this._Calendar.getFinish(_, $)
        },
        getDurationByCalendar: function (_, $) {
            return this._Calendar.getWorkingDays(_, $)
        },
        getSelected: function () {
            var $ = this.tableView.getCurrentCell();
            if ($) return $.record;
            return null
        },
        getSelecteds: function () {
            return this.tasks.getSelecteds()
        },
        isSelected: function ($) {
            return this.tasks.isSelected($)
        },
        select: function (_, A, $) {
            if (!_) return;
            if (typeof _ == "number") _ = this.tasks.getAt(_);
            if (A) {
                var C = this.tableView.getCurrentCell(),
                    B = this.tableView.getViewColumns()[0];
                if (C) B = C.column;
                C = {
                        record: _,
                        column: B
                    };
                this.tableView.setCurrentCell(C)
            }
            if ($ !== false) this.tasks.select(_)
        },
        deselect: function ($) {
            this.tasks.deselect($)
        },
        selectAll: function () {
            this.tasks.selectAll()
        },
        deselectAll: function () {
            this.tasks.deselectAll()
        },
        selects: function ($) {
            this.tasks.selects($)
        },
        deselects: function ($) {
            this.tasks.deselects($)
        },
        filter: function (_, $) {
            this.tasks.filter(_, $)
        },
        clearFilter: function () {
            this.tasks.clearFilter()
        },
        sort: function ($) {
            this.tasks.sort($)
        },
        clearSort: function () {
            this.tasks.clearSort()
        },
        addTaskCls: function (_, $) {
            this.tableView.addNodeCls(_, $)
        },
        removeTaskCls: function (_, $) {
            this.tableView.removeNodeCls(_, $)
        },
        setTableHeaderMenu: function ($) {
            $ = mini.getAndCreate($);
            this.tableHeaderMenu = $;
            $.owner = this;
            mini.on(this.tableView.headerEl, "contextmenu", function (_) {
                $.showAtPos(_.pageX, _.pageY);
                return false
            }, this)
        },
        setTableBodyMenu: function ($) {
            $ = mini.getAndCreate($);
            this.tableBodyMenu = $;
            $.owner = this;
            mini.on(this.tableView.viewportEl, "contextmenu", function (_) {
                $.showAtPos(_.pageX, _.pageY);
                return false
            }, this)
        },
        setGanttHeaderMenu: function ($) {
            $ = mini.getAndCreate($);
            this.ganttHeaderMenu = $;
            $.owner = this;
            mini.on(this.ganttView.headerEl, "contextmenu", function (_) {
                $.showAtPos(_.pageX, _.pageY);
                return false
            }, this)
        },
        setGanttBodyMenu: function ($) {
            $ = mini.getAndCreate($);
            this.ganttBodyMenu = $;
            $.owner = this;
            mini.on(this.ganttView.viewportEl, "contextmenu", function (_) {
                $.showAtPos(_.pageX, _.pageY);
                return false
            }, this)
        }
    });
mini.regClass(mini.Gantt, "gantt");
mini.Gantt.PredecessorLinkType = [{
        ID: 0,
        Name: "Finish-Finish(FF)",
        Short: "FF"
    },
    {
        ID: 1,
        Name: "Finish-Start(FS)",
        Short: "FS"
    },
    {
        ID: 2,
        Name: "Start-Finish(SF)",
        Short: "SF"
    },
    {
        ID: 3,
        Name: "Start-Start(SS)",
        Short: "SS"
    }];
mini.Gantt.ConstraintType = [{
        ID: 0,
        Name: "The sooner the better"
    },
    {
        ID: 1,
        Name: "The later the better"
    },
    {
        ID: 2,
        Name: "Must be begin in"
    },
    {
        ID: 3,
        Name: "Must be completed in"
    },
    {
        ID: 4,
        Name: "Beginning no earlier than ..."
    },
    {
        ID: 5,
        Name: "Beginning no later than ..."
    },
    {
        ID: 6,
        Name: "Completed no earlier than ..."
    },
    {
        ID: 7,
        Name: "Completed no later than ..."
    }];
mini.copyTo(mini.Gantt, {
        ID_Text: "ID",
        Name_Text: "Name",
        PercentComplete_Text: "Progress",
        Duration_Text: "Duration",
        Start_Text: "Start",
        Finish_Text: "Finish",
        Critical_Text: "Critical",
        PredecessorLink_Text: "PredecessorLink",
        Work_Text: "Work",
        Priority_Text: "Priority",
        Weight_Text: "Weight",
        OutlineNumber_Text: "OutlineNumber",
        OutlineLevel_Text: "OutlineLevel",
        ActualStart_Text: "ActualStart",
        ActualFinish_Text: "ActualFinish",
        WBS_Text: "WBS",
        ConstraintType_Text: "ConstraintType",
        ConstraintDate_Text: "ConstraintDate",
        Department_Text: "Department",
        Principal_Text: "Principal",
        Assignments_Text: "Assignments",
        Summary_Text: "Summary",
        Task_Text: "Task",
        Baseline_Text: "Baseline",
        LinkType_Text: "LinkType",
        LinkLag_Text: "LinkLag",
        From_Text: "From",
        To_Text: "To",
        Goto_Text: "Goto",
        UpGrade_Text: "UpGrade",
        DownGrade_Text: "DownGrade",
        Add_Text: "Add Task",
        Edit_Text: "Edit Task",
        Remove_Text: "Remove Task",
        ZoomIn_Text: "ZoomIn",
        ZoomOut_Text: "ZoomOut",
        Deselect_Text: "Un Select",
        Split_Text: "Split Task"
    });
PlusGantt = mini.Gantt;
MyProjectSchedule = function ($) {
        this.project = $;
        $.on("cellbeginedit", this.__OnCellBeginEdit, this);
        $.on("aftercellcommitedit", this.__OnCellCommitEdit, this);
        $.on("itemdragstart", this.__OnItemDragStart, this);
        $.on("itemdragcomplete", this.__OnItemDragComplete, this);
        $.on("dodragdrop", this.__OnDoTaskDragDrop, this);
        $.set({
            readOnly: false,
            allowDragDrop: true
        })
    };
MyProjectSchedule.prototype = {
        __OnDoTaskDragDrop: function (B) {
            var _ = B.tasks,
                A = B.targetTask,
                $ = B.action;
            this.project.moveTasks(_, A, $)
        },
        __OnCellBeginEdit: function (A) {
            var _ = A.record,
                $ = A.field;
            if (_.Summary && _.FixedDate != 1) if ($ == "Start" || $ == "Finish" || $ == "Duration") A.cancel = true
        },
        __OnCellCommitEdit: function (D) {
            D.cancel = true;
            var B = D.record,
                _ = D.field,
                $ = D.value,
                A = B[_];
            if (mini.isEquals(A, $)) return;
            try {
                    this.project.updateTask(B, _, $)
                } catch (C) {
                    alert(C.message)
                }
        },
        __OnItemDragStart: function ($) {
            if ($.action == "start") $.cancel = true
        },
        __OnItemDragComplete: function (C) {
            var _ = C.action,
                $ = C.value,
                B = C.item,
                A = new Date();
            if (_ == "finish") this.project.updateTask(B, "Finish", $);
            if (_ == "percentcomplete") this.project.updateTask(B, "PercentComplete", $);
            if (_ == "move") this.project.updateTask(B, "Start", $)
        }
    };
MyProjectSchedule.Calendar = function ($) {
        this.project = $;
        this.calendar = $.getProjectCalendar();
        this.validCalendar(this.calendar);
        this.WeekDays = this.calendar["WeekDays"];
        this.Exceptions = this.calendar["Exceptions"];
        mini.sort(this.WeekDays, function ($, _) {
            return $.DayType > _.DayType
        });
        this.caches = {}
    };
MyProjectSchedule.Calendar.prototype = {
        validCalendar: function (F) {
            if (F.UID == null) throw new Error("\u65e5\u5386\u6ca1\u6709UID\u6807\u8bc6\u53f7");
            var $ = F["WeekDays"],
                I = F["Exceptions"];
            if ($ == null || $.length != 7) throw new Error("\u5de5\u4f5c\u5468\u6570\u636e\u9519\u8bef");
            if (I == null) F["Exceptions"] = I = [];
            var A = false;
            for (var H = 0; H < 7; H++) {
                    var B = $[H],
                        _ = parseInt(B["DayType"]),
                        K = parseInt(B["DayWorking"]);
                    if ((K != 0 && K != 1) || _ < 1 || _ > 7) throw new Error("\u5de5\u4f5c\u5468\u6570\u636e\u9519\u8bef");
                    if (K == 1) A = true
                }
            if (A == false) throw new Error("\u5de5\u4f5c\u5468\u5fc5\u987b\u81f3\u5c11\u6709\u4e00\u5929\u662f\u5de5\u4f5c\u65e5");
            for (var H = 0, C = I.length; H < C; H++) {
                    var D = I[H],
                        _ = parseInt(D["DayType"]),
                        K = parseInt(D["DayWorking"]);
                    if ((K != 0 && K != 1) || _ != 0) throw new Error("\u4f8b\u5916\u65e5\u671f\u9519\u8bef");
                    if (K == 1) {
                            var J = D["TimePeriod"];
                            if (J == null || !mini.isDate(J["FromDate"]) || !mini.isDate(J["ToDate"])) throw new Error("\u4f8b\u5916\u65e5\u671f\u6570\u636e\u9519\u8bef");
                            var G = J["FromDate"],
                                E = J["ToDate"];
                            J["FromDate"] = mini.clearTime(G);
                            J["ToDate"] = mini.maxTime(E)
                        }
                }
        },
        isWorkingDate: function (_) {
            var $ = this.getDay(_.getDay(), _);
            return $.DayWorking == 1
        },
        getDay: function (J, B) {
            var G = "getDay$" + B.getTime() + J,
                E = this.caches[G];
            if (E) return E;
            var _ = this.WeekDays[J];
            if (B != null) {
                    var $ = B.getTime();
                    for (var F = 0, C = this.Exceptions.length; F < C; F++) {
                        var D = this.Exceptions[F],
                            I = D["TimePeriod"],
                            A = I["FromDate"].getTime(),
                            H = I["ToDate"].getTime();
                        if (A <= $ && $ <= H) {
                                _ = D;
                                break
                            }
                    }
                }
            this.caches[G] = _;
            return _
        },
        getStart: function (_, A) {
            if (A <= 0) return new Date(_.getTime());
            var B = "getstart" + _.getTime() + A,
                $ = this.caches[B];
            if ($) return new Date($);
            var D = new Date(_.getFullYear(), _.getMonth(), _.getDate());
            while (A > 0) {
                    var C = this.isWorkingDate(D);
                    if (C) {
                        A--;
                        if (A == 0) break
                    }
                    D = new Date(D.getFullYear(), D.getMonth(), D.getDate() - 1)
                }
            this.caches[B] = D.getTime();
            return D
        },
        getFinish: function (A, _) {
            if (_ <= 0) return new Date(A.getTime());
            var B = "getfinish" + A.getTime() + _,
                $ = this.caches[B];
            if ($) return new Date($);
            var D = new Date(A.getFullYear(), A.getMonth(), A.getDate());
            while (_ > 0) {
                    var C = this.isWorkingDate(D);
                    if (C) {
                        _--;
                        if (_ == 0) break
                    }
                    D = new Date(D.getFullYear(), D.getMonth(), D.getDate() + 1)
                }
            D = new Date(D.getFullYear(), D.getMonth(), D.getDate(), 23, 59, 59);
            this.caches[B] = D.getTime();
            return D
        },
        getWorkingDays: function (B, A) {
            if (B.getTime() == A.getTime()) return 0;
            var D = "getWorkingDays" + B.getTime() + A.getTime(),
                _ = this.caches[D];
            if (_ !== undefined) return _;
            var C = B > A;
            if (C) {
                    var E = B;
                    B = A;
                    A = B
                }
            B = new Date(B.getFullYear(), B.getMonth(), B.getDate());
            A = new Date(A.getFullYear(), A.getMonth(), A.getDate(), 23, 59, 59);
            var $ = 0,
                F = A.getTime();
            for (var H = B; H.getTime() < F;) {
                    var G = this.isWorkingDate(H);
                    if (G) $++;
                    H = new Date(H.getFullYear(), H.getMonth(), H.getDate() + 1)
                }
            this.caches[D] = $;
            return C ? -$ : $
        },
        getWorkingDate: function (C, D) {
            var A = "getWorkingDate" + C.getTime() + D,
                $ = this.caches[A];
            if ($) return new Date($);
            C = new Date(C.getFullYear(), C.getMonth(), C.getDate());
            var _ = D ? 1 : -1;
            while (true) {
                    var B = this.isWorkingDate(C);
                    if (B) break;
                    C = new Date(C.getFullYear(), C.getMonth(), C.getDate() + _)
                }
            C = D ? C : new Date(C.getFullYear(), C.getMonth(), C.getDate(), 23, 59, 59);
            this.caches[A] = C.getTime();
            return C
        },
        getWorkingStartDate: function (D, _) {
            if (_ == 0) return D;
            var A = "getWorkingStartDate" + D.getTime() + _,
                $ = this.caches[A];
            if ($) return new Date($);
            D = new Date(D.getFullYear(), D.getMonth(), D.getDate());
            var B = _ > 0 ? 1 : -1;
            while (true) {
                    if (_ == 0) break;
                    D = new Date(D.getFullYear(), D.getMonth(), D.getDate() + B);
                    var C = this.isWorkingDate(D);
                    if (C) _ -= B
                }
            this.caches[A] = D.getTime();
            return D
        }
    };
MyProjectSchedule.Validator = function ($) {
        this.project = $
    };
MyProjectSchedule.Validator.prototype = {
        valid: function () {
            var $ = this.project.getTaskList();
            this.validTasks($)
        },
        validTasks: function (B) {
            this.validedTasks = {};
            B = B.clone();
            for (var $ = 0, A = B.length; $ < A; $++) {
                var _ = {};
                this.validTask(B[$], _)
            }
        },
        validTask: function (D, _) {
            var F = D.UID;
            if (this.validedTasks[F] != null) return;
            if (_[F] != null) throw new Error("\u524d\u7f6e\u4efb\u52a1\u51fa\u9519, \u6709\u56de\u73af\u5f15\u7528");
            _[F] = D;
            this.validedTasks[F] = D;
            this.validTaskProperties(D);
            var A = this.project.getParentTask(F);
            if (A && A.UID != this.project.rootTaskUID) {
                this.validTask(A, _);
                delete _[A.UID]
            }
            var E = D.PredecessorLink;
            if (E != null) for (var $ = 0, C = E.length; $ < C; $++) {
                var B = E[$];
                this.validLink(D, B, _);
                delete _[B.PredecessorUID]
            }
        },
        validLink: function (B, A, $) {
            var C = this.project.getTask(A.PredecessorUID);
            if (C == null) return;
            var D = B.UID,
                _ = C.UID;
            if ($[_] != null) throw new Error("\u524d\u7f6e\u4efb\u52a1\u4e0d\u80fd\u6709\u56de\u73af\u5f15\u7528\u5173\u7cfb");
            if (this.project.isAncestor(D, _) || this.project.isAncestor(_, D)) throw new Error("\u7236\u5b50\u4efb\u52a1\u4e0d\u80fd\u6709\u4efb\u52a1\u76f8\u5173\u6027");
            this.validTask(C, $)
        },
        validTaskProperties: function (C) {
            if (C.Name === null || C.Name === undefined) C.Name = "";
            if (isNaN(C.Duration)) C.Duration = 0;
            if (isNaN(C.Work)) C.Work = 0;
            if (isNaN(C.PercentComplete)) C.PercentComplete = 0;
            if (C.PercentComplete < 0) C.PercentComplete = 0;
            if (C.PercentComplete > 100) C.PercentComplete = 100;
            if (C.Summary) {
                C.ConstraintType = 0;
                C.ConstraintDate = null
            }
            if (isNaN(C.Critical)) C.Critical = 0;
            if (isNaN(C.ConstraintType) || !C.ConstraintDate) C.ConstraintType = 0;
            if (C.ConstraintDate) {
                var _ = C.ConstraintDate;
                C.ConstraintDate = new Date(_.getFullYear(), _.getMonth(), _.getDate())
            }
            if (!mini.isDate(C.Start)) C.Start = null;
            if (!mini.isDate(C.Finish)) C.Finish = null;
            if (!mini.isDate(C.ActualStart)) C.ActualStart = null;
            if (!mini.isDate(C.ActualFinish)) C.ActualFinish = null;
            if (C.FixedDate == null) C.FixedDate = 0;
            var D = C.PredecessorLink;
            if (D && D.length > 0) for (var $ = 0, B = D.length; $ < B; $++) {
                var A = D[$];
                A.Type = parseInt(A.Type);
                A.LinkLag = parseInt(A.LinkLag);
                if (isNaN(A.LinkLag)) A.LinkLag = 0
            }
        }
    };
MyProjectSchedule.PercentComplete = function ($) {
        this.project = $
    };
MyProjectSchedule.PercentComplete.prototype = {
        syncComplete: function ($) {
            this.syncParentComplete($);
            this.syncChildrenComplete($)
        },
        syncParentComplete: function (H) {
            var A = "Duration",
                K = H.UID,
                _ = this.project.getParentTask(K);
            if (_ != null && _.UID != this.project.rootTaskUID) {
                    var G = _.PercentComplete,
                        F = this.getChildrenAll(_),
                        B = 0,
                        I = 0;
                    for (var D = 0, C = F.length; D < C; D++) {
                            var $ = F[D],
                                J = parseInt($[A]),
                                E = parseInt($["PercentComplete"]);
                            B += J;
                            I += J * E / 100
                        }
                    _["PercentComplete"] = parseInt(I / B * 100);
                    this.syncParentComplete(_);
                    if (G != _.PercentComplete) this.project.setTaskModified(_, "PercentComplete")
                }
        },
        syncChildrenComplete: function (G) {
            var A = "Duration",
                H = this.getChildrenAll(G),
                B = 0,
                I = 0;
            for (var E = 0, C = H.length; E < C; E++) {
                    var _ = H[E],
                        J = parseInt(_[A]);
                    B += J
                }
            I = B * parseInt(G["PercentComplete"]) / 100;
            var D = B == I;
            for (E = 0, C = H.length; E < C; E++) {
                    var _ = H[E],
                        F = _.PercentComplete,
                        J = parseInt(_[A]);
                    if (I <= 0) _["PercentComplete"] = 0;
                    else {
                            var $ = I - J;
                            if ($ >= 0) _["PercentComplete"] = 100;
                            else _["PercentComplete"] = parseInt(I / J * 100);
                            I = $
                        }
                    if (D) _["PercentComplete"] = 100;
                    if (F != _.PercentComplete) this.project.setTaskModified(_, "PercentComplete")
                }
            for (E = 0, C = H.length; E < C; E++) {
                    _ = H[E];
                    this.syncParentComplete(_)
                }
        },
        getChildrenAll: function (C) {
            var D = this.project.getChildTasks(C, true),
                B = [];
            for (var $ = 0, A = D.length; $ < A; $++) {
                    var _ = D[$];
                    if (_.Summary == 0) B.push(_)
                }
            return B
        }
    };
MyProjectSchedule.Critical = function ($) {
        this.project = $
    };
MyProjectSchedule.Critical.prototype = {
        clearCritical: function () {
            this.Tasks = this.project.getTaskList();
            this.clearCriticalTasks(this.Tasks)
        },
        createCritical: function () {
            this.nodesField = this.project.tasks.nodesField;
            this.Tasks = this.project.getTaskList();
            this.StartDate = this.project.getStartDate();
            this.FinishDate = this.project.getFinishDate();
            this.Calendar = this.project._Calendar;
            var C = this.Tasks,
                _ = {};
            for (var $ = 0, B = C.length; $ < B; $++) {
                    var A = C[$];
                    _[A.UID] = A.Critical
                }
            this.doCreateCritical();
            for ($ = 0, B = C.length; $ < B; $++) {
                    A = C[$];
                    if (_[A.UID] != A.Critical);
                }
        },
        doCreateCritical: function () {
            var J = this.Tasks;
            this.clearCriticalTasks(J);
            var S = this.getLastTasks(),
                L = this.getTaskChains(S);
            for (var M = 0, G = L.length; M < G; M++) {
                    var A = L[M];
                    for (var Q = 0, _ = A.length; Q < _; Q++) {
                        var T = A[Q];
                        if (T.Name == "\u786e\u5b9a\u9879\u76ee\u8303\u56f4");
                        var R = T.Duration,
                            H = Q + 1;
                        if (0 <= H && H <= _ - 1) {
                                var K = A[H],
                                    I = mini.cloneDate(K.Start),
                                    O = mini.cloneDate(K.Finish);
                                if (!I || !O) continue;
                                var F = this.project.getPredecessorLink(T, K),
                                    B = F.Type;
                                switch (B) {
                                    case 0:
                                        T.EarlyFinish = O;
                                        T.EarlyStart = this.Calendar.getStart(T.EarlyFinish, R);
                                        break;
                                    case 1:
                                        O.setDate(O.getDate() + 1);
                                        T.EarlyStart = this.Calendar.getWorkingDate(O, true);
                                        T.EarlyFinish = this.Calendar.getFinish(T.EarlyStart, R);
                                        break;
                                    case 2:
                                        I.setDate(I.getDate() - 1);
                                        T.EarlyFinish = this.Calendar.getWorkingDate(I, false);
                                        T.EarlyStart = this.Calendar.getStart(T.EarlyFinish, R);
                                        break;
                                    case 3:
                                        T.EarlyStart = I;
                                        T.EarlyFinish = this.Calendar.getFinish(T.EarlyStart, R);
                                        break
                                    }
                            } else {
                                T.EarlyStart = T.Start;
                                T.EarlyFinish = T.Finish
                            }
                        var $ = Q - 1;
                        if (0 <= $ && $ <= _ - 1) {
                                var P = A[$],
                                    N = mini.cloneDate(P.Start),
                                    E = mini.cloneDate(P.Finish);
                                if (!N || !E) continue;
                                F = this.project.getPredecessorLink(P, T),
                                B = F.Type;
                                switch (B) {
                                    case 0:
                                        T.LateFinish = E;
                                        T.LateStart = this.Calendar.getStart(T.LateFinish, R);
                                        break;
                                    case 1:
                                        N.setDate(N.getDate() - 1);
                                        T.LateFinish = this.Calendar.getWorkingDate(N, false);
                                        T.LateStart = this.Calendar.getStart(T.LateFinish, R);
                                        break;
                                    case 2:
                                        E.setDate(E.getDate() + 1);
                                        T.LateStart = this.Calendar.getWorkingDate(E, true);
                                        T.LateFinish = this.Calendar.getFinish(T.LateStart, R);
                                        break;
                                    case 3:
                                        T.LateStart = N;
                                        T.LateFinish = this.Calendar.getFinish(T.LateStart, R);
                                        break
                                    }
                            } else {
                                T.LateStart = T.Start;
                                T.LateFinish = T.Finish
                            }
                    }
                    for (Q = 0, _ = A.length; Q < _; Q++) {
                        T = A[Q];
                        if (T.Name == "\u786e\u5b9a\u9879\u76ee\u8303\u56f4");
                        if (T.Critical == 1) continue;
                        var C = T.EarlyStart,
                            D = T.LateStart;
                        if (!C || !D) continue;
                        if (C.getTime() >= D.getTime()) T.Critical = 1;
                        $ = Q - 1;
                        if (0 > $ || $ > _ - 1) T.Critical = 1;
                        if (T.Milestone != null && T.Milestone == 1) T.Critical = 1;
                        if (T.Critical == null || T.Critical == 0) break
                    }
                }
        },
        chains: null,
        chain: null,
        getTaskChains: function (B) {
            this.chains = [];
            this.chain = [];
            for (var $ = 0, A = B.length; $ < A; $++) {
                var _ = B[$];
                this.createTaskChain(_)
            }
            return this.chains
        },
        clearCriticalTasks: function (B) {
            for (var $ = 0, A = B.length; $ < A; $++) {
                var _ = B[$];
                delete _.EarlyStart;
                delete _.EarlyFinish;
                delete _.LateStart;
                delete _.LateFinish;
                _.Critical = 0
            }
        },
        createTaskChain: function (C) {
            if (C == null || C.Start == null || C.Finish == null) return;
            this.chain.add(C);
            var E = C.PredecessorLink;
            if (E != null && E.length > 0) {
                for (var $ = 0, B = E.length; $ < B; $++) {
                    var A = E[$],
                        D = this.project.getTask(A.PredecessorUID);
                    this.createTaskChain(D)
                }
            } else {
                var _ = this.chain.clone();
                this.chains.add(_)
            }
            this.chain.removeAt(this.chain.length - 1)
        },
        getLastTasks: function () {
            var D = [],
                E = this.Tasks,
                A = -1;
            for (var $ = 0, C = E.length; $ < C; $++) {
                    var B = E[$];
                    if (B == null || B.Finish == null) continue;
                    var _ = B.Finish.getTime();
                    if (_ > A) A = _
                }
            for ($ = 0, C = E.length; $ < C; $++) {
                    B = E[$];
                    if (B == null || B.Finish == null) continue;
                    _ = B.Finish.getTime();
                    if (_ == A) D.add(B)
                }
            return D
        }
    };
mini.RGanttView = function () {
        mini.RGanttView.superclass.constructor.call(this)
    };
mini.extend(mini.RGanttView, mini.GanttView, {
        selectedCls: "mini-gantt-selected",
        showLabel: false,
        _initPlugins: function () {
            this._ToolTip = new mini._GanttViewToolTip(this);
            this._DragDrop = new mini._RGanttViewDragDrop(this);
            this._Select = new mini._RGanttViewSelect(this)
        },
        getItem: function ($) {
            if (typeof $ == "object") $ = $._id;
            return this.owner.getTaskById($)
        },
        getItemTop: function ($) {
            var _ = this._TaskUIDs[$.ParentUID];
            return this._TaskTops[_._id]
        },
        getItemHeight: function ($) {
            var A = this._TaskUIDs[$.ParentUID],
                _ = mini.isNumber(A._height) ? A._height : this.rowHeight;
            return _
        },
        getItemBox: function ($, A, C, _) {
            var B = mini.RGanttView.superclass.getItemBox.apply(this, arguments);
            B.top += 0;
            B.height = 19;
            B.bottom = B.top + B.height;
            return B
        },
        _OnItemDragDrop: function ($, _) {
            var A = {
                item: $,
                dropNode: _,
                cancel: false
            };
            this.fire("ItemDragDrop", A);
            return A
        },
        headerCellOffset: 1,
        createItem: function ($, H, I, M, N, _) {
            var D = H.height,
                B = H.top,
                K = H.left,
                A = H.right,
                C = A - K;
            if (C < 0) return;
            if (C < 2) C = 2;
            var L = $.PercentComplete || 0,
                J = parseInt(C * L / 100);
            if (L == 0) J = 0;
            var E = "mini-gantt-item ",
                F = this._OnItemDragStart($, "move");
            if (!this._ReadOnly && !F.cancel) E += " mini-gantt-move ";
            var O = this._OnDrawItem($, H);
            if (O.itemCls) E += " " + O.itemCls + " ";
            if (O.itemHtml === null) {
                    if (this.isSelected($)) E += " " + this.selectedCls + " ";
                    var G = this.id + "$" + $._id;
                    I[I.length] = "<div id=\"";
                    I[I.length] = G;
                    I[I.length] = "\" class=\"";
                    I[I.length] = E;
                    I[I.length] = "\" style=\"left:";
                    I[I.length] = K;
                    I[I.length] = "px;top:";
                    I[I.length] = B;
                    I[I.length] = "px;height:";
                    I[I.length] = jQuery.boxModel ? D - 2 : D;
                    I[I.length] = "px;width:";
                    I[I.length] = jQuery.boxModel ? C - 2 : C;
                    I[I.length] = "px;\"><div class=\"mini-gantt-itembg\"></div><div class=\"mini-gantt-percentcomplete\" style=\"width:";
                    I[I.length] = J;
                    I[I.length] = "px;";
                    if (J == 0) I[I.length] = "display:none;";
                    I[I.length] = "\"></div><div class=\"mini-gantt-text\" >";
                    if (C > 10) I[I.length] = mini.isNull($.Name) ? "" : $.Name;
                    I[I.length] = "</div></div>"
                } else I[I.length] = O.itemHtml
        },
        _refreshViewport: function (B, C) {
            var I = this.rowHeight,
                A = this.topTimeScale.type,
                E = this.bottomTimeScale.type,
                J = B.startRow,
                H = B.endRow,
                L = this.getOffsetByDate(B.startDate);
            this._ReadOnly = this.isReadOnly();
            var Q = this.getDataView(),
                S = this.getViewportBounds(B),
                N = S.left,
                R = S.top,
                T = S.width,
                W = S.height,
                O = [],
                P = [],
                U = this._refreshItem ? this._refreshItem._id : null;
            for (var F = J, K = H; F <= K; F++) {
                    var $ = Q[F];
                    if (!$) continue;
                    var D = $.Tasks;
                    if (!D) continue;
                    for (var G = 0, _ = D.length; G < _; G++) {
                        var V = D[G];
                        if (!mini.isDate(V.Start) || !mini.isDate(V.Finish) || (U && U != V._id)) continue;
                        var M = this.getItemBox(V, N, R);
                        this.createItem(V, M, O, U, false, false);
                        P.push(V)
                    }
                }
            if (C) return O.join("");
            this._createCross(P, O, B);
            this.cellsEl.innerHTML = O.join("")
        },
        _createCross: function (D, S, C) {
            var W = this.getViewportBounds(C),
                R = W.left,
                V = W.top,
                X = W.width,
                Z = W.height,
                P = {};
            for (var E = 0, Q = D.length; E < Q; E++) {
                    var Y = D[E],
                        N = Y.Start.getTime(),
                        L = Y.Finish.getTime(),
                        T = this.getItemBox(Y, R, V),
                        A = T.bottom + 2;
                    for (var J = 0, $ = D.length; J < $; J++) {
                            var K = D[J];
                            if (Y._id == K._id || Y.ParentUID != K.ParentUID) continue;
                            var F = Y._id + "$" + K._id,
                                I = K._id + "$" + Y._id;
                            if (P[F] || P[I]) continue;
                            var B = U = null,
                                O = K.Start.getTime(),
                                G = K.Finish.getTime();
                            if (N <= O && O <= L) var B = K.Start,
                                U = G < L ? K.Finish : Y.Finish;
                            else if (N <= O && G <= L) {
                                    U = K.Finish;
                                    B = O > N ? K.Start : Y.Start
                                }
                            if (B) {
                                    P[F] = 1;
                                    P[I] = 1;
                                    var H = this.getOffsetByDate(B) - R,
                                        M = this.getOffsetByDate(U) - R,
                                        _ = M - H;
                                    S[S.length] = "<div class=\"mini-gantt-cross\" style=\"left:" + H + "px;top:" + A + "px;width:" + _ + "px;\"></div>"
                                }
                        }
                }
        },
        setData: function ($) {
            this.selecteds = [];
            this.idSelecteds = {};
            return mini.RGanttView.superclass.setData.call(this, $)
        },
        selected: null,
        selecteds: null,
        idSelecteds: null,
        getSelecteds: function () {
            return this.selecteds
        },
        getSelected: function () {
            return this.selected
        },
        isSelected: function ($) {
            return this.idSelecteds[$._id]
        },
        select: function ($) {
            this.selects([$])
        },
        deselect: function ($) {
            this.deselects([$])
        },
        selectAll: function () {
            this.selects(this.selecteds)
        },
        deselectAll: function () {
            this.deselects(this.selecteds)
        },
        selects: function (C) {
            if (!C || C.length == 0) return;
            C = C.clone();
            for (var $ = 0, B = C.length; $ < B; $++) {
                var A = C[$];
                if (!this.isSelected(A)) {
                    this.selecteds.push(A);
                    this.idSelecteds[A._id] = A;
                    var _ = document.getElementById(this.id + "$" + A._id);
                    if (_) mini.addClass(_, this.selectedCls)
                }
            }
            this.fire("selectionchanged")
        },
        deselects: function (C) {
            if (!C || C.length == 0) return;
            C = C.clone();
            for (var $ = 0, B = C.length; $ < B; $++) {
                var A = C[$];
                if (this.isSelected(A)) {
                    this.selecteds.remove(A);
                    delete this.idSelecteds[A._id];
                    var _ = document.getElementById(this.id + "$" + A._id);
                    if (_) mini.removeClass(_, this.selectedCls)
                }
            }
            if (this.selected && !this.isSelected(this.selected)) this.selected = null;
            this.fire("selectionchanged")
        }
    });
mini._RGanttViewDragDrop = function ($) {
        mini._RGanttViewDragDrop.superclass.constructor.call(this, $)
    };
mini.extend(mini._RGanttViewDragDrop, mini._GanttViewDragDrop, {
        renderDragProxy: function () {
            var J = this.owner;
            if (!J.allowDrag || J.isReadOnly()) return;
            var C = J.viewRegion,
                L = J.getViewportBounds(C),
                G = L.left,
                M = L.top,
                O = L.width,
                R = L.height,
                K = J.getDataView(),
                D = C.startRow,
                B = C.endRow,
                H = [];
            for (var I = D, E = B; I <= E; I++) {
                    var $ = K[I];
                    if (!$) continue;
                    var F = $.Tasks;
                    if (!F) continue;
                    for (var N = 0, _ = F.length; N < _; N++) {
                        var P = F[N],
                            A = J.getItemBox(P, G, M);
                        this.renderItemDragProxy(P, A, H)
                    }
                }
            var Q = "<div>" + H.join("") + "</div>";
            mini.append(J.cellsEl, Q)
        },
        _BeforeDragMove: function ($, A) {
            var _ = this.owner._OnItemDragStart($, "move");
            if (!_.cancel) this.getDrag().start(A);
            this.allowDragUpdown = _.dragUpdown
        },
        _OnDragStart: function (A) {
            var _ = this.owner,
                $ = this.dragItem;
            this.viewBox = _.getViewportBounds(_.viewRegion);
            var D = _.getItemBox($);
            this.MoveOffset = D.left - A.init[0];
            this.timeSpan = $.Finish - $.Start;
            this.itemBox = D;
            if (this.dragAction != "percentcomplete") {
                    var C = document.getElementById(_.id + "$" + $._id),
                        B = mini.getBox(C);
                    this.barBox = B;
                    this.proxy = mini.append(document.body, "<div class='mini-gantt-proxy'></div>");
                    mini.setBox(this.proxy, B);
                    mini.on(this.proxy, "mousewheel", function (A, $) {
                            _.__OnMousewheel(A, $)
                        }, this)
                }
            this.dragIcon = mini.append(document.body, "<div class='mini-gantt-dragicon'></div>")
        },
        _OnDragMove: function (_) {
            var F = this.owner,
                $ = this.dragItem,
                G = this.viewBox,
                J = F.getViewportBox(),
                C = _.now[0] - _.init[0],
                A = _.now[1] - _.init[1];
            switch (this.dragAction) {
                case "start":
                    var B = F.getDateByPageX(_.now[0]);
                    $.Start = B;
                    var K = this.barBox.x + C;
                    mini.setX(this.proxy, K);
                    mini.setWidth(this.proxy, this.barBox.right - K);
                    break;
                case "finish":
                    B = F.getDateByPageX(_.now[0]);
                    $.Finish = B;
                    if ($.Start > $.Finish) $.Finish = $.Start;
                    mini.setWidth(this.proxy, this.barBox.width + C);
                    break;
                case "percentcomplete":
                    var E = this.itemBox.width,
                        D = _.now[0] - J.x + G.left - this.itemBox.x,
                        H = parseInt(D * 100 / E);
                    if (H < 0) H = 0;
                    if (H > 100) H = 100;
                    $.PercentComplete = H;
                    setTimeout(function () {
                            F.refreshItem($, false)
                        }, 10);
                    break;
                case "move":
                    D = _.now[0] + this.MoveOffset,
                    B = F.getDateByOffset(D);
                    $.Start = B;
                    $.Finish = new Date(B.getTime() + this.timeSpan);
                    var K = this.barBox.x + C,
                        I = this.barBox.y + A;
                    mini.setX(this.proxy, K);
                    if (this.allowDragUpdown) mini.setY(this.proxy, I);
                    break;
                case "link":
                    break
                }
            var L = F._OnItemDragMove($, _, this.dragAction);
            if (this.dragAction == "move" && this.allowDragUpdown) {
                    this.dropNode = F.getDragRecord(_.now[1]);
                    L = F._OnItemDragDrop(this.dragItem, this.dropNode);
                    if (L.cancel) {
                        this.dragIcon.style.display = "block";
                        mini.setXY(this.dragIcon, _.now[0] + 8, _.now[1] + 13)
                    } else this.dragIcon.style.display = "none"
                }
        },
        _OnItemDragComplete: function (_) {
            var A = this.owner,
                $ = this.dragItem;
            if (!this.allowDragUpdown) this.dropNode = null;
            A._OnItemDragComplete(this.dragItem, this.dragAction, _, this.dropNode)
        },
        stopDrag: function (A) {
            var _ = this.owner,
                $ = this.dragItem;
            if (A == false) _.refresh();
            this.dragItem = this.originalItem = this.dragAction = null;
            if (this.proxy) {
                    mini.removeNode(this.proxy);
                    this.proxy = null
                }
            if (this.dragIcon) {
                    mini.removeNode(this.dragIcon);
                    this.dragIcon = null
                }
        }
    });
mini._RGanttViewSelect = function ($) {
        this.gantt = $;
        mini.on($.el, "mousedown", this.__OnGanttMouseDown, this)
    };
mini._RGanttViewSelect.prototype = {
        __OnGanttMouseDown: function (B) {
            var A = B.target,
                _ = this.gantt;
            if (_.isReadOnly()) return;
            mini.selectable(A, false);
            var $ = _.getItemByEvent(B);
            if (!$) return;
            if (B.ctrlKey) {
                    _.selected = $;
                    _.select($)
                } else {
                    _.deselectAll();
                    _.selected = $;
                    _.select($)
                }
        }
    };
mini.RGantt = function () {
        mini.RGantt.superclass.constructor.call(this);
        this.data = {
            Calendar: this.createDefaultCalendars(),
            Resources: []
        };
        this.rootTaskUID = -1;
        this._NodesUIDs = {};
        this._TasksUIDs = {};
        this._TasksIDs = {}
    };
mini.RGantt.TaskID = 1;
mini.extend(mini.RGantt, mini.Splitter, {
        OrderType: "day",
        refresh: function () {
            this.syncTasks();
            this.doLayout()
        },
        panel1Width: 180,
        collapsePanel: 1,
        allowMove: false,
        headerHeight: 44,
        rowHeight: 28,
        columnWidth: 100,
        tableWidth: "50%",
        splitWidth: 4,
        minViewWidth: 100,
        treeColumn: null,
        columns: null,
        readOnly: false,
        allowDragDrop: false,
        multiSelect: false,
        showGridLines: true,
        timeLines: null,
        showTableView: true,
        showGanttView: true,
        allowResize: true,
        setAllowResize: function ($) {
            this.allowResize = $;
            this.doLayout()
        },
        uiCls: "mini-rgantt mini-gantt",
        _create: function () {
            mini.RGantt.superclass._create.call(this);
            this._createTableView();
            this._createGanttView();
            this.resizeEl = mini.append(this.borderEl, "<div class=\"mini-grid-resizeGrid\" style=\"\"></div>");
            this._Resizer = new mini._GridResizer(this)
        },
        _createTableView: function () {
            this.tableView = new mini.SuperTree();
            this.tableView.set({
                headerHeight: this.headerHeight,
                rowHeight: this.rowHeight,
                columnWidth: this.columnWidth,
                allowAlternating: false,
                borderStyle: "border:0",
                showVScroll: false,
                style: "width:100%;height:100%"
            });
            this.tableView.owner = this;
            this.tableView.render(this.getPaneEl(1));
            this.pane1.size = this.columnWidth
        },
        _createGanttView: function () {
            this.ganttView = new mini.RGanttView();
            this.ganttView.set({
                headerHeight: this.headerHeight,
                rowHeight: this.rowHeight,
                style: "width:100%;height:100%"
            });
            this.ganttView.isWorking = mini.createDelegate(this.isWorking, this);
            this.ganttView.owner = this;
            this.ganttView.render(this.getPaneEl(2))
        },
        _initEvents: function () {
            mini.RGantt.superclass._initEvents.call(this);
            var $ = this;
            this.tableView.on("scroll", function ($) {
                if ($.direction == "vertical") this.ganttView.setScrollTop(this.tableView.scrollTop)
            }, this);
            this.ganttView.on("scroll", function ($) {
                if ($.direction == "vertical") if (this.ganttView.refreshScrollComplete);
                else this.tableView.setScrollTop(this.ganttView.scrollTop)
            }, this);
            this.tableView.on("drawcell", function ($) {
                $.node = $.record;
                this.fire("drawcell", $)
            }, this);
            this.tableView.on("RowDragStart", function ($) {
                $.task = $.record;
                this.fire("nodedragstart", $)
            }, this);
            this.tableView.on("rowdragdrop", function ($) {
                $.nodes = $.records;
                $.targetNode = $.targetRecord;
                this.fire("nodedragdrop", $)
            }, this);
            this.ganttView.on("drawitem", function ($) {
                $.resource = $.item;
                this.fire("drawitem", $)
            }, this);
            this.tableView.on("cellbeginedit", this.__OnTableViewCellBeginEdit, this);
            this.tableView.on("cellcommitedit", this.__OnTableViewCellCommitEdit, this);
            this.ganttView.on("itemdragstart", this.__OnGanttViewItemDragStart, this);
            this.ganttView.on("itemdragdrop", this.__OnGanttViewItemDragDrop, this);
            this.ganttView.on("itemdragcomplete", this.__OnGanttViewItemDragComplete, this);
            this.ganttView.on("ScrollToolTipNeeded", this.__OnGanttViewScrollToolTipNeeded, this);
            this.ganttView.on("itemtooltipneeded", this.__OnGanttViewItemToolTipNeeded, this);
            this.ganttView.on("LinkToolTipNeeded", this.__OnGanttViewLinkToolTipNeeded, this);
            this.ganttView.on("ItemDragTipNeeded", this.__OnGanttViewItemDragTipNeeded, this);
            this.tableView.on("cellmousedown", function ($) {
                $.node = $.record;
                this.fire("nodemousedown", $)
            }, this);
            this.tableView.on("cellclick", function ($) {
                $.node = $.record;
                this.fire("nodeclick", $)
            }, this);
            this.tableView.on("celldblclick", function ($) {
                $.node = $.record;
                this.fire("nodedblclick", $)
            }, this);
            this.ganttView.on("itemmousedown", function ($) {
                $.task = $.item;
                this.fire("taskmousedown", $)
            }, this);
            this.ganttView.on("itemclick", function ($) {
                $.task = $.item;
                this.fire("taskclick", $)
            }, this);
            this.ganttView.on("itemdblclick", function ($) {
                $.task = $.item;
                this.fire("taskdblclick", $)
            }, this);
            this.ganttView.on("itemcontextmenu", function ($) {
                $.task = $.item;
                this.fire("taskcontextmenu", $)
            }, this);
            this.tableView.on("expand", function ($) {
                $.node = $.node;
                this.fire("expand", $)
            }, this);
            this.tableView.on("collapse", function ($) {
                $.node = $.node;
                this.fire("collapse", $)
            }, this);
            this.ganttView.on("selectionchanged", function (_) {
                var $ = this.getSelectedTask();
                if ($) this.fire("taskselect");
                else this.fire("taskdeselect")
            }, this)
        },
        __OnTableViewCellBeginEdit: function ($) {
            $.node = $.record;
            this.fire("cellbeginedit", $)
        },
        __OnTableViewCellCommitEdit: function ($) {
            $.node = $.record;
            this.fire("cellcommitedit", $)
        },
        __OnGanttViewItemDragStart: function ($) {
            $.task = $.item;
            $.node = this.getOwnerNode($.task);
            this.fire("taskdragstart", $)
        },
        __OnGanttViewItemDragDrop: function ($) {
            $.task = $.item;
            $.node = this.getOwnerNode($.task);
            if (!$.dropNode) $.cancel = true;
            this.fire("taskdragdrop", $)
        },
        __OnGanttViewItemDragComplete: function ($) {
            $.task = $.item;
            $.node = this.getOwnerNode($.task);
            this.fire("taskdragcomplete", $)
        },
        __OnGanttViewScrollToolTipNeeded: function ($) {
            $.task = $.item;
            $.tooltip = mini.Gantt.Name_Text + "\uff1a" + $.item.Name
        },
        __OnGanttViewItemToolTipNeeded: function (C) {
            C.task = C.item;
            var A = C.item;

            function B($) {
                if (mini.isDate($)) return $.getFullYear() + "-" + ($.getMonth() + 1) + "-" + $.getDate() + "";
                else return ""
            }
            C.tooltip = "";
            var _ = A.Start,
                $ = A.Finish;
            if (C.baseline) {
                    C.tooltip += "<div style='text-align:center;'><b >" + mini.Gantt.Baseline_Text + "</b></div>";
                    _ = C.baseline.Start;
                    $ = C.baseline.Finish
                } else if (A.Summary) C.tooltip += "<div style='text-align:center;'><b >" + mini.Gantt.Summary_Text + "</b></div>";
            else if (A.Critical) C.tooltip += "<div style='text-align:center;'><b >" + mini.Gantt.Critical_Text + "</b></div>";
            else C.tooltip += "<div style='text-align:center;'><b >" + mini.Gantt.Task_Text + "</b></div>";
            C.tooltip += "<div>" + mini.Gantt.Name_Text + "\uff1a" + A.Name + "</div>" + "<div ><div style='float:left;'>" + mini.Gantt.PercentComplete_Text + "\uff1a<b>" + A.PercentComplete + "%</b></div>" + "<div style='float:right;'>" + mini.Gantt.Duration_Text + "\uff1a" + A.Duration + "\u65e5</div></div>" + "<div style='clear:both;'>" + mini.Gantt.Start_Text + "\uff1a" + B(_) + "</div>" + "<div>" + mini.Gantt.Finish_Text + "\uff1a" + B($) + "</div>";
            this.fire("itemtooltipneeded", C)
        },
        __OnGanttViewItemDragTipNeeded: function (C) {
            var A = "",
                $ = C.item;
            C.task = $;
            if (!$ || !$.Start || !$.Finish);
            else {
                    var _ = this.ganttView.bottomTimeScale.tooltip($.Start, "bottom", this.ganttView.bottomTimeScale.type),
                        B = this.ganttView.bottomTimeScale.tooltip($.Finish, "bottom", this.ganttView.bottomTimeScale.type);
                    A = mini.Gantt.Name_Text + "\uff1a" + $.Name + "<br/>" + mini.Gantt.PercentComplete_Text + "\uff1a<b>" + $.PercentComplete + "%</b>" + "<br/>" + mini.Gantt.Start_Text + "\uff1a<b>" + _ + "</b>" + "<br/>" + mini.Gantt.Finish_Text + "\uff1a<b>" + B + "</b>"
                }
            C.tooltip = A;
            this.fire("TaskDragTipNeeded", C)
        },
        syncTasks: function () {
            this._NodesUIDs = {};
            this._TasksUIDs = {};
            this._TasksIDs = {};
            var F = this.getNodeList();
            for (var $ = 0, E = F.length; $ < E; $++) {
                var A = F[$];
                this._NodesUIDs[A.UID] = A;
                var G = A.Tasks;
                if (!G) continue;
                for (var C = 0, _ = G.length; C < _; C++) {
                    var D = G[C];
                    D.ParentUID = A.UID;
                    this._TasksUIDs[D.UID] = D;
                    if (!D._id) D._id = mini.RGantt.TaskID++;
                    this._TasksIDs[D._id] = D
                }
            }
            var B = this.getDateRange();
            if (B) {
                this.ganttView.setDateRange(B[0], B[1]);
                this.ganttView.doLayout(true)
            }
        },
        isWorking: function (C, _) {
            if (!this.data) return true;
            var A = _.type;
            if ((A == "day" && _.number > 1) || A == "week" || A == "month" || A == "quarter" || A == "halfyear") return true;
            var B = C.getDay(),
                $ = C.getTime();
            return true
        },
        loadData: function ($) {
            if (!mini.isArray($)) $ = [];
            this.data.Resources = $;
            this.nodes = new mini.DataTree();
            this.nodes.idField = "UID";
            this.nodes.parentField = "ParentTaskUID";
            this.nodes.loadData($);
            this.nodes.getRootNode().UID = this.rootTaskUID;
            this.tableView.setData(this.nodes);
            this.ganttView.setData(this.nodes);
            this.syncTasks();
            this.nodes.on("datachanged", function ($) {
                this.fire("datachanged", $)
            }, this)
        },
        getData: function () {
            return this.data.Resources
        },
        getNodeTree: function () {
            return this.data.Resources
        },
        getNodeList: function () {
            return this.nodes.toArray()
        },
        doLayout: function () {
            this.resizeEl.style.display = this.allowResize ? "" : "none";
            mini.RGantt.superclass.doLayout.call(this)
        },
        setShowGridLines: function ($) {
            if (this.showGridLines != $) {
                this.showGridLines = $;
                this.ganttView.setShowGridLines($)
            }
        },
        setTimeLines: function ($) {
            if (this.timeLines != $) {
                this.timeLines = $;
                this.ganttView.setTimeLines($)
            }
        },
        setRowHeight: function ($) {
            $ = parseInt($);
            if (isNaN($)) return;
            if ($ != this.rowHeight) {
                this.rowHeight = $;
                this.tableView.setRowHeight($);
                this.ganttView.setRowHeight($)
            }
        },
        setMultiSelect: function ($) {
            if (this.multiSelect != $) {
                this.multiSelect = $;
                this.tableView.setMultiSelect($)
            }
        },
        setTableWidth: function ($) {
            if (this.tableWidth != $) {
                this.tableWidth = $;
                this.panel1Width = $;
                this.layoutChanged("tablewidth")
            }
        },
        scrollIntoView: function ($) {
            this.ganttView.scrollIntoView($)
        },
        zoomIn: function () {
            this.ganttView.zoomIn()
        },
        zoomOut: function () {
            this.ganttView.zoomOut()
        },
        setTopTimeScale: function ($) {
            this.ganttView.setTopTimeScale($)
        },
        setBottomTimeScale: function ($) {
            this.ganttView.setBottomTimeScale($)
        },
        setColumns: function ($) {
            this.tableView.setColumns($);
            this.pane1.size = this.tableView.getAllColumnWidth() + 1;
            this.doLayout()
        },
        updateColumn: function ($, _) {
            this.tableView.updateColumn($, _)
        },
        getColumn: function ($) {
            return this.tableView.getColumn($)
        },
        getColumnAt: function ($) {
            return this.tableView.getColumnAt($)
        },
        setTreeColumn: function ($) {
            this.tableView.setTreeColumn($)
        },
        setRowHeight: function ($) {
            if (this.rowHeight != $) {
                this.rowHeight = $;
                this.tableView.setRowHeight($);
                this.ganttView.setRowHeight($)
            }
        },
        getDateRange: function () {
            var B = null,
                A = null,
                G = this.getNodeList();
            for (var $ = 0, F = G.length; $ < F; $++) {
                    var C = G[$],
                        H = C.Tasks;
                    if (!H) continue;
                    for (var D = 0, _ = H.length; D < _; D++) {
                            var E = H[D];
                            if (E.Start) if (!B || B > E.Start) B = E.Start;
                            if (E.Finish) if (!A || A < E.Finish) A = E.Finish
                        }
                }
            if (!B || !A) return null;
            return [B, A]
        },
        createDefaultCalendars: function () {
            return eval("[{UID: 1,IsBaseCalendar: 1,BaseCalendarUID:-1,Name: '',WeekDays: [{DayType: 1,DayWorking: 0},{DayType: 2,DayWorking: 1},{DayType: 3,DayWorking: 1},{DayType: 4,DayWorking: 1},{DayType: 5,DayWorking: 1},{DayType: 6,DayWorking: 1},{DayType: 7,DayWorking: 0}],Exceptions:[]}]")
        },
        getNode: function ($) {
            if ($ === null || $ === undefined) return null;
            $ = typeof $ == "object" ? $.UID : $;
            return this._NodesUIDs[$]
        },
        getTask: function ($) {
            if ($ === null || $ === undefined) return null;
            $ = typeof $ == "object" ? $.UID : $;
            return this._TasksUIDs[$]
        },
        getTaskById: function ($) {
            return this._TasksIDs[$]
        },
        getOwnerNode: function ($) {
            $ = this.getTask($);
            if (!$) return null;
            return this.getNode($.ParentUID)
        },
        getTasks: function () {
            var $ = this.getNodeList(),
                C = [];
            for (var _ = 0, B = $.length; _ < B; _++) {
                    var A = $[_].Tasks;
                    if (A) C.addRange(A)
                }
            return C
        },
        findTasks: function (E, C) {
            C = C || this;
            var B = this.getTasks();
            if (!E) return B;
            var A = [];
            for (var _ = 0, D = B.length; _ < D; _++) {
                var $ = B[_];
                if (E.call(C, $) == true) A[A.length] = $
            }
            return A
        },
        eachChild: function (_, A, $) {
            this.tasks.eachChild(_, A, $)
        },
        cascadeChild: function (_, A, $) {
            this.tasks.cascadeChild(_, A, $)
        },
        bubbleParent: function (_, A, $) {
            this.tasks.bubbleParent(_, A, $)
        },
        collapseLevel: function ($, _) {
            this.tasks.collapseLevel($, _)
        },
        expandLevel: function ($, _) {
            this.tasks.expandLevel($, _)
        },
        collapse: function ($, _) {
            this.tasks.collapse($, _)
        },
        expand: function ($, _) {
            this.tasks.expand($, _)
        },
        toggle: function ($) {
            this.tasks.toggle($)
        },
        collapseAll: function () {
            this.tasks.collapseAll()
        },
        expandAll: function () {
            this.tasks.expandAll()
        },
        getNextNode: function ($) {
            $ = this.getNode($);
            return this.nodes.getNextNode($)
        },
        getPrevTask: function ($) {
            $ = this.getNode($);
            return this.nodes.getPrevNode($)
        },
        getFirstNode: function ($) {
            $ = this.getNode($);
            return this.nodes.getFirstNode($)
        },
        getLastNode: function ($) {
            $ = this.getNode($);
            return this.nodes.getLastNode($)
        },
        getParentNode: function (_) {
            _ = this.getNode(_);
            if (!_) return null;
            var $ = this.nodes.getParentNode(_);
            if ($ == this.nodes.getRootNode()) return null;
            return $
        },
        getChildNodes: function ($, _) {
            return this.nodes.getChildNodes($, _, false)
        },
        getAllChildNodes: function ($) {
            return this.getChildNodes($, true)
        },
        getAncestorNodes: function ($) {
            return this.nodes.getAncestors($)
        },
        isAncestor: function ($, _) {
            $ = this.getNode($);
            _ = this.getNode(_);
            return this.nodes.isAncestor($, _)
        },
        newTask: function () {
            task = {};
            task.UID = UUID();
            task.Name = "";
            task.PercentComplete = 0;
            var $ = this.ganttView.startDate;
            task.Start = new Date($.getFullYear(), $.getMonth(), $.getDate());
            task.Finish = new Date($.getFullYear(), $.getMonth(), $.getDate(), 23, 59, 59);
            task.Duration = 1 * 3600 * 24;
            var _ = {
                task: task
            };
            this.fire("taskcreated", _);
            return _.task
        },
        updateTask: function (B, A, $) {
            B = this.getTask(B);
            if (!B || !A) return;
            if (typeof A == "string") B[A] = $;
            else for (var _ in A) B[_] = A[_];
            this.refresh()
        },
        removeTask: function (_) {
            _ = this.getTask(_);
            if (!_) return;
            var $ = this.getOwnerNode(_);
            if (!$) return;
            $.Tasks.remove(_);
            this.refresh()
        },
        addTask: function (A, _, $) {
            _ = this.getNode(_);
            if (!A || !_) return;
            if (!_.Tasks) _.Tasks = [];
            if (mini.isNull($)) $ = _.Tasks.length;
            _.Tasks.insert($, A);
            this.refresh()
        },
        removeTasks: function (A) {
            if (!mini.isArray(A)) return;
            A = A.clone();
            for (var $ = 0, _ = A.length; $ < _; $++) this.removeTask(A[$])
        },
        isSelectedTask: function ($) {
            $ = this.getTask($);
            if (!$) return false;
            return this.ganttView.isSelected($)
        },
        getSelectedTasks: function () {
            return this.ganttView.getSelecteds()
        },
        getSelectedTask: function () {
            return this.ganttView.getSelected()
        },
        selectAllTasks: function () {
            this.ganttView.selectAll()
        },
        deselectAllTasks: function () {
            this.ganttView.deselectAll()
        },
        selectTasks: function ($) {
            this.ganttView.selects($)
        },
        deselectTasks: function ($) {
            this.ganttView.deselects($)
        },
        selectTask: function ($) {
            this.ganttView.select($)
        },
        deselectTask: function ($) {
            this.ganttView.deselect($)
        },
        addNodes: function (_, $) {
            this.nodes.beginChange();
            this.nodes.addNodes(_, $);
            this.syncTasks();
            this.nodes.endChange()
        },
        getSelected: function () {
            var $ = this.tableView.getCurrentCell();
            if ($) return $.record;
            return null
        },
        getSelecteds: function () {
            return this.nodes.getSelecteds()
        },
        isSelected: function ($) {
            $ = this.getNode($);
            return this.nodes.isSelected($)
        },
        select: function ($) {
            this.nodes.select($)
        },
        deselect: function ($) {
            this.nodes.deselect($)
        },
        selectAll: function () {
            this.nodes.selectAll()
        },
        deselectAll: function () {
            this.nodes.deselectAll()
        },
        selects: function ($) {
            this.nodes.selects($)
        },
        deselects: function ($) {
            this.nodes.deselects($)
        },
        addNodeCls: function (_, $) {
            this.tableView.addNodeCls(_, $)
        },
        removeNodeCls: function (_, $) {
            this.tableView.removeNodeCls(_, $)
        },
        setTaskMenu: function ($) {
            $ = mini.getAndCreate($);
            this.taskMenu = $;
            $.owner = this;
            this.on("taskcontextmenu", function (A) {
                var _ = A.task;
                $.showAtPos(A.htmlEvent.pageX, A.htmlEvent.pageY);
                A.htmlEvent.preventDefault()
            }, this)
        },
        setTableHeaderMenu: function ($) {
            $ = mini.getAndCreate($);
            this.tableHeaderMenu = $;
            $.owner = this;
            mini.on(this.tableView.headerEl, "contextmenu", function (_) {
                $.showAtPos(_.pageX, _.pageY);
                return false
            }, this)
        },
        setTableBodyMenu: function ($) {
            $ = mini.getAndCreate($);
            this.tableBodyMenu = $;
            $.owner = this;
            mini.on(this.tableView.viewportEl, "contextmenu", function (_) {
                $.showAtPos(_.pageX, _.pageY);
                return false
            }, this)
        },
        setGanttHeaderMenu: function ($) {
            $ = mini.getAndCreate($);
            this.ganttHeaderMenu = $;
            $.owner = this;
            mini.on(this.ganttView.headerEl, "contextmenu", function (_) {
                $.showAtPos(_.pageX, _.pageY);
                return false
            }, this)
        },
        setGanttBodyMenu: function ($) {
            $ = mini.getAndCreate($);
            this.ganttBodyMenu = $;
            $.owner = this;
            mini.on(this.ganttView.el, "contextmenu", function (A) {
                if (!mini.isAncestor(this.ganttView.viewportEl, A.target)) return;
                var _ = this.ganttView.getItemByEvent(A);
                if (!_) {
                    $.showAtPos(A.pageX, A.pageY);
                    return false
                }
            }, this)
        }
    });
mini.regClass(mini.RGantt, "rgantt");
MyRGantt = mini.RGantt;
PlusRGantt = mini.RGantt;

mini.Project = function () {
        mini.Project.superclass.constructor.call(this);
        new MyProjectSchedule(this);
        this.setTreeColumn("Name")
    };
mini.extend(mini.Project, mini.Gantt, {
        allowProjectDateRange: true,
        allowSummaryLink: false,
        showCriticalPath: false,
        clearCriticalPath: function () {
            if (this._Critical) this._Critical.clearCritical()
        },
        createCriticalPath: function () {
            if (this._Critical) this._Critical.createCritical()
        },
        allowOrderProject: true,
        autoSyncSummary: false,
        orderProject: function (A) {
            if (A && !mini.isArray(A)) A = [A];
            var _ = new Date();
            this.tasks.beginChange();
            this.syncTasks(false);
            if (this._orderCount == 0) {
                if (this._Validator) this._Validator.valid();
                if (this._Order) this._Order.orderByStart(A);
                if (this.showCriticalPath) this.createCriticalPath();
                else this.clearCriticalPath();
                var $ = this.getDateRange();
                if ($) this.ganttView.setDateRange($[0], $[1])
            }
            this.tasks.endChange();
            this.doLayout()
        },
        _createPrintSWF: function ($, _) {
            var C = this.id + "-print";
            if (!this._printSWF) {
                this._printSWF = document.createElement("div");
                this._printSWF.id = C;
                this.el.appendChild(this._printSWF);
                swfobject.embedSWF($, C, "0", "0", "10.0.0")
            }
            this._printSWF = document.getElementById(C);
            var A = this,
                B = setInterval(function () {
                    if (A._printSWF.PrintGantt) {
                        clearInterval(B);
                        _()
                    }
                }, 100)
        },
        _createPrintConfig: function () {
            var E = new Array(),
                B = this.getTaskList();
            for (var _ = 0, D = B.length; _ < D; _++) {
                    var $ = B[_],
                        C = {
                            id: $.UID,
                            parent: $.ParentTaskUID,
                            name: $.Name,
                            start: $.Start,
                            finish: $.Finish,
                            progress: $.PercentComplete
                        };
                    mini.copyTo(C, $);
                    delete C.children;
                    E.push(C)
                }
            var A = {
                    name: "gantt",
                    treeNode: 0,
                    leftLabelField: "start",
                    rightLabelField: "finish",
                    columns: [{
                        header: "\u4efb\u52a1\u540d\u79f0",
                        field: "name",
                        width: 200
                    },
                    {
                        header: "\u5f00\u59cb\u65e5\u671f",
                        field: "start",
                        width: 100,
                        headerAlign: "center",
                        align: "right"
                    },
                    {
                        header: "\u5b8c\u6210\u65e5\u671f",
                        field: "finish",
                        width: 100,
                        headerAlign: "center",
                        align: "right"
                    }],
                    data: E,
                    printUrl: ""
                };
            return A
        },
        print: function (A) {
            if (!A.printUrl) return;
            if (!A.swfUrl) return;
            var $ = this._createPrintConfig();
            $ = mini.copyTo($, A);
            var _ = this;
            this._createPrintSWF(A.swfUrl, function () {
                _._printSWF.PrintGantt($)
            })
        },
        isWorking: function (D, L) {
            if (!this.data) return true;
            var A = L.type;
            if ((A == "day" && L.number > 1) || A == "week" || A == "month" || A == "quarter" || A == "halfyear") return true;
            var M = D.getDay(),
                J = D.getTime(),
                C = null,
                I = this.getCalendar(this.data.CalendarUID),
                $ = I.WeekDays,
                _ = I.Exceptions;
            for (var K = 0, E = $.length; K < E; K++) {
                    var B = $[K];
                    if (B.DayType - 1 == M) {
                        C = B;
                        break
                    }
                }
            for (K = 0, E = _.length; K < E; K++) {
                    var F = _[K],
                        H = F.TimePeriod.FromDate.getTime(),
                        G = F.TimePeriod.ToDate.getTime();
                    if (H <= J && J <= G) {
                            C = F;
                            break
                        }
                }
            return C.DayWorking == 1
        },
        _initProject: function ($) {
            mini.Project.superclass._initProject.call(this, $);
            this._Validator = new MyProjectSchedule.Validator(this);
            this._Calendar = new MyProjectSchedule.Calendar(this);
            this._Order = new MyProjectSchedule.Order(this);
            this._Critical = new MyProjectSchedule.Critical(this);
            this._PercentComplete = new MyProjectSchedule.PercentComplete(this)
        },
        parseTasks: function (E, D) {
            if (!D) return E;
            for (var A = 0, C = E.length; A < C; A++) {
                var B = E[A],
                    F = {};
                for (var _ in D) {
                        var $ = D[_],
                            G = B[$];
                        if (G !== null) F[_] = G;
                        if (_ == "children" && G) this.parseTasks(G, D)
                    }
                E[A] = F
            }
            return E
        },
        loadData: function ($) {
            this.data = $;
            this._initProject($);
            this.loadTasks(this.data.Tasks)
        },
        getData: function () {
            return this.data
        },
        getProjectCalendar: function () {
            return this.getCalendar(this.data.CalendarUID)
        },
        getCalendar: function (B) {
            if (typeof B == "object") return B;
            var $ = null;
            for (var _ = 0, C = this.data.Calendars.length; _ < C; _++) {
                var A = this.data.Calendars[_];
                if (A.UID == B) {
                    $ = A;
                    break
                }
            }
            return $
        },
        getCalendars: function () {
            return this.data.Calendars.clone()
        },
        getResource: function ($) {
            return this._ResourceUIDs[$]
        },
        setStartDate: function (F) {
            if (!mini.isDate(F)) return;
            var A = this.data.StartDate,
                $ = this._Calendar.getWorkingDays(A, F),
                I = this._Calendar.getWorkingDays(A, this.data.FinishDate);
            this.data.StartDate = F;
            this.data.FinishDate = this._Calendar.getFinish(F, I);
            var G = this.getTaskList();
            for (var _ = 0, E = G.length; _ < E; _++) {
                    var D = G[_],
                        B = D.Start;
                    if (B != null && D.Finish != null) {
                            var C = this._Calendar.getWorkingDays(A, D.Finish);
                            D.Finish = this._Calendar.getFinish(F, C);
                            D.Start = this._Calendar.getStart(D.Finish, D.Duration)
                        }
                    var H = D.ConstraintDate;
                    if (H != null) {
                            H = mini.clearTime(D.ConstraintDate);
                            C = this._Calendar.getWorkingDays(A, H);
                            D.ConstraintDate = this._Calendar.getFinish(F, C)
                        }
                }
            this.orderProject()
        },
        setCalendars: function (_) {
            if (!mini.isArray(_)) return;
            var A = this.data.Calendars,
                $ = this._Calendar;
            try {
                    this.data.Calendars = _;
                    var B = this.getProjectCalendar();
                    if (!B) throw new Error("\u5fc5\u987b\u6709\u5f53\u524d\u9879\u76ee\u65e5\u5386");
                    this._Calendar = new MyProjectSchedule.Calendar(this);
                    this.orderProject()
                } catch (C) {
                    this.data.Calendars = A;
                    this._Calendar = $;
                    alert(C.message)
                }
        },
        setCalendarUID: function (A) {
            var _ = this.getCalendar(A);
            if (!_) {
                alert("\u6ca1\u6709\u627e\u5230\u9879\u76ee\u65e5\u5386");
                return
            }
            var C = this.data.CalendarUID,
                $ = this._Calendar;
            try {
                    this.data.CalendarUID = A;
                    this._Calendar = new MyProjectSchedule.Calendar(this);
                    this.orderProject()
                } catch (B) {
                    this.data.CalendarUID = C;
                    this._Calendar = $;
                    alert(B.message)
                }
        },
        updateTask: function (C, B, _) {
            var C = this.getTask(C);
            if (!C || !B) return;
            if (typeof B == "object") {
                this._updateTask(C, B);
                return
            }
            switch (B) {
            case "Duration":
                var $ = parseInt(_);
                if (!mini.isNumber($)) return;
                if ($ < 0) $ = 0;
                this.tasks.beginChange();
                this.tasks.updateRecord(C, "Duration", $);
                if (C.Start != null) {
                    C.Start = this._Calendar.getWorkingDate(C.Start, true);
                    C.Finish = this._Calendar.getFinish(C.Start, $)
                }
                this.orderProject(C);
                this.tasks.endChange();
                break;
            case "Start":
                this.tasks.beginChange();
                this.tasks.updateRecord(C, "Start", _);
                if (C.Start != null) {
                    C.Start = this._Calendar.getWorkingDate(C.Start, true);
                    C.Finish = this._Calendar.getFinish(C.Start, C.Duration);
                    var D = parseInt(C.ConstraintType);
                    if (D != 2 && D != 3) {
                        C.ConstraintType = 4;
                        C.ConstraintDate = new Date(C.Start.getTime())
                    }
                }
                this.orderProject(C);
                this.tasks.endChange();
                break;
            case "Finish":
                if (C.ConstraintType == 3 && C.Start != null) break;
                this.tasks.beginChange();
                if (mini.isDate(_)) {
                    if (_ < C.Start) _ = C.Start;
                    _ = new Date(_.getFullYear(), _.getMonth(), _.getDate(), 23, 59, 59)
                }
                this.tasks.updateRecord(C, "Finish", _);
                if (C.Finish != null) {
                    C.Finish = this._Calendar.getWorkingDate(C.Finish, false);
                    if (C.Start == null) C.Start = this._Calendar.getStart(C.Finish, C.Duration);
                    else C.Duration = this._Calendar.getWorkingDays(C.Start, C.Finish)
                }
                var A = new Date();
                this.orderProject(C);
                this.tasks.endChange();
                break;
            case "PercentComplete":
                _ = parseInt(_);
                if (!mini.isNumber(_)) return;
                if (_ < 0) _ = 0;
                if (_ > 100) _ = 100;
                this.tasks.beginChange();
                this.tasks.updateRecord(C, "PercentComplete", _);
                this._PercentComplete.syncComplete(C);
                this.tasks.endChange();
                break;
            case "ConstraintDate":
            case "ConstraintType":
                this.tasks.beginChange();
                this.tasks.updateRecord(C, B, _);
                if (C.ConstraintType == 0 || C.ConstraintType == 1) C.ConstraintDate = null;
                this.orderProject(C);
                this.tasks.endChange();
                break;
            case "PredecessorLink":
                this.setLinks(C, _);
                break;
            case "Assignments":
                this.setAssignments(C, _);
                break;
            case "Work":
                _ = parseInt(_);
                if (!mini.isNumber(_)) return;
                this.tasks.beginChange();
                this.tasks.updateRecord(C, B, _);
                this.orderProject(C);
                this.tasks.endChange();
                break;
            default:
                this.tasks.updateRecord(C, B, _);
                break
            }
        },
        _updateTask: function (B, A) {
            B = this.getTask(B);
            if (!B || !A) return;
            this.tasks.beginChange();
            this.beginOrder();
            var D = B.Start,
                _ = A.Assignments,
                $ = A.PredecessorLink;
            delete A.Assignments;
            delete A.PredecessorLink;
            try {
                    if ($) this.setLinks(B, $)
                } catch (C) {
                    this.endOrder();
                    this.tasks.endChange();
                    throw C
                }
            this.tasks.updateRecord(B, A);
            if (_) this.setAssignments(B, _);
            if (B.Start && B.Finish && B.Start > B.Finish) B.Finish = B.Start;
            if (B.Start) B.Start = this._Calendar.getWorkingDate(B.Start, true);
            if (B.Finish) B.Finish = this._Calendar.getWorkingDate(B.Finish, false);
            if (B.Start && B.Duration) B.Finish = this._Calendar.getFinish(B.Start, B.Duration);
            if (String(D) != B.Start && B.Start) if (B.ConstraintType != 2 && B.ConstraintType != 3) {
                    B.ConstraintType = 4;
                    B.ConstraintDate = new Date(B.Start.getTime())
                }
            if (B.ConstraintType == 0 || B.ConstraintType == 1) B.ConstraintDate = null;
            if (B.PercentComplete < 0) B.PercentComplete = 0;
            if (B.PercentComplete > 100) B.PercentComplete = 100;
            this._PercentComplete.syncComplete(B);
            this.endOrder(B);
            this.tasks.endChange()
        },
        updateTasks: function (D, _) {
            if (!mini.isArray(D) || typeof _ != "object") return;
            this.beginOrder();
            for (var $ = 0, B = D.length; $ < B; $++) {
                var A = D[$];
                A = this.getTask(A);
                var C = mini.clone(_);
                this._updateTask(A, C)
            }
            this.endOrder(D)
        }
    });
mini.regClass(mini.Project, "project");
MyProject = mini.Project;
PlusProject = mini.Project;
mini.Project.IDColumn = function ($) {
        return mini.copyTo({
            name: "ID",
            header: "",
            field: "ID",
            width: 30,
            cellCls: "mini-indexcolumn",
            align: "center",
            allowDrag: true,
            cellStyle: "cursor:move;"
        }, $)
    };
mini.Project.NameColumn = function ($) {
        return mini.copyTo({
            name: "Name",
            header: mini.Gantt.Name_Text,
            field: "Name",
            width: 200,
            editor: {
                type: "textbox"
            },
            renderer: function ($) {
                if ($.record.Summary) return "<b>" + $.value + "</b>";
                return $.value
            }
        }, $)
    };
mini.Project.PercentCompleteColumn = function ($) {
        return mini.copyTo({
            name: "PercentComplete",
            header: mini.Gantt.PercentComplete_Text,
            field: "PercentComplete",
            width: 60,
            editor: {
                type: "spinner",
                minValue: 0,
                maxValue: 100
            }
        }, $)
    };
mini.Project.PredecessorLinkColumn = function ($) {
        return mini.copyTo({
            name: "PredecessorLink",
            header: mini.Gantt.PredecessorLink_Text,
            field: "PredecessorLink",
            editor: {
                type: "textbox"
            },
            renderer: function (B) {
                var $ = B.source,
                    _ = $.owner,
                    A = B.value;
                return _.getLinkString(A)
            },
            oncellbeginedit: function (B) {
                var $ = B.source,
                    _ = $.owner,
                    A = B.value;
                B.value = _.getLinkString(A)
            }
        }, $)
    };
mini.Project.DurationColumn = function ($) {
        return mini.copyTo({
            name: "Duration",
            header: mini.Gantt.Duration_Text,
            field: "Duration",
            width: 60,
            editor: {
                type: "spinner",
                minValue: 0,
                maxValue: 10000
            }
        }, $)
    };
mini.Project.WorkColumn = function ($) {
        return mini.copyTo({
            name: "Work",
            header: mini.Gantt.Work_Text,
            field: "Work",
            width: 60,
            editor: {
                type: "spinner",
                minValue: 0,
                maxValue: 10000
            }
        }, $)
    };
mini.Project.StartColumn = function ($) {
        return mini.copyTo({
            name: "Start",
            header: mini.Gantt.Start_Text,
            field: "Start",
            renderer: function (_) {
                var $ = _.value;
                if ($) return $.getFullYear() + "-" + ($.getMonth() + 1) + "-" + $.getDate();
                else return ""
            },
            editor: {
                type: "datepicker"
            }
        }, $)
    };
mini.Project.FinishColumn = function ($) {
        return mini.copyTo({
            name: "Finish",
            header: mini.Gantt.Finish_Text,
            field: "Finish",
            renderer: function (_) {
                var $ = _.value;
                if ($) return $.getFullYear() + "-" + ($.getMonth() + 1) + "-" + $.getDate();
                else return ""
            },
            editor: {
                type: "datepicker"
            }
        }, $)
    };
mini.Project.PriorityColumn = function ($) {
        return mini.copyTo({
            name: "Priority",
            header: mini.Gantt.Priority_Text,
            field: "Priority",
            width: 60,
            editor: {
                type: "spinner",
                minValue: 0,
                maxValue: 1000
            }
        }, $)
    };
mini.Project.WeightColumn = function ($) {
        return mini.copyTo({
            name: "Weight",
            header: mini.Gantt.Weight_Text,
            field: "Weight",
            width: 60,
            editor: {
                type: "spinner",
                minValue: 0,
                maxValue: 100
            }
        }, $)
    };
mini.Project.OutlineNumberColumn = function ($) {
        return mini.copyTo({
            header: mini.Gantt.OutlineNumber_Text,
            field: "OutlineNumber",
            width: 150
        }, $)
    };
mini.Project.OutlineLevelColumn = function ($) {
        return mini.copyTo({
            name: "OutlineLevel",
            header: mini.Gantt.OutlineLevel_Text,
            field: "OutlineLevel",
            width: 80
        }, $)
    };
mini.Project.ActualStartColumn = function ($) {
        return mini.copyTo({
            name: "ActualStart",
            header: mini.Gantt.ActualStart_Text,
            field: "ActualStart",
            renderer: function (_) {
                var $ = _.value;
                if ($) return $.getFullYear() + "-" + ($.getMonth() + 1) + "-" + $.getDate();
                else return ""
            },
            editor: {
                type: "datepicker"
            }
        }, $)
    };
mini.Project.ActualFinishColumn = function ($) {
        return mini.copyTo({
            name: "ActualFinish",
            header: mini.Gantt.ActualFinish_Text,
            field: "ActualFinish",
            renderer: function (_) {
                var $ = _.value;
                if ($) return $.getFullYear() + "-" + ($.getMonth() + 1) + "-" + $.getDate();
                else return ""
            },
            editor: {
                type: "datepicker"
            }
        }, $)
    };
mini.Project.WBSColumn = function ($) {
        return mini.copyTo({
            name: "WBS",
            header: mini.Gantt.WBS_Text,
            field: "WBS",
            width: 150,
            editor: {
                type: "textbox"
            }
        }, $)
    };
mini.Project.ConstraintTypeColumn = function ($) {
        return mini.copyTo({
            name: "ConstraintType",
            header: mini.Gantt.ConstraintType_Text,
            field: "ConstraintType",
            width: 120,
            editor: {
                type: "combobox",
                valueField: "ID",
                displayField: "Name",
                data: mini.Gantt.ConstraintType.clone(),
                allowInput:true
            },
            renderer: function (B) {
                var $ = B.source,
                    _ = $.owner,
                    A = mini.Gantt.ConstraintType[B.value];
                return A ? A.Name : ""
            }
        }, $)
    };
mini.Project.ConstraintDateColumn = function ($) {
        return mini.copyTo({
            name: "ConstraintDate",
            header: mini.Gantt.ConstraintDate_Text,
            field: "ConstraintDate",
            renderer: function (_) {
                var $ = _.value;
                if ($) return $.getFullYear() + "-" + ($.getMonth() + 1) + "-" + $.getDate();
                else return ""
            },
            editor: {
                type: "datepicker"
            }
        }, $)
    };
mini.Project.DepartmentColumn = function ($) {
        return mini.copyTo({
            name: "Department",
            header: mini.Gantt.Department_Text,
            field: "Department",
            width: 120,
            editor: {
                type: "combobox",
                valueField: "UID",
               allowInput:true,
                displayField: "Name"
            },
            renderer: function (J) {
                var $ = J.source,
                    G = $.owner,
                    F = G.data.Departments || [],
                    I = [],
                    A = String(J.value),
                    C = mini.isArray(A) ? A : A.split(",");
                for (var E = 0, D = C.length; E < D; E++) {
                        A = C[E];
                        for (var H = 0, B = F.length; H < B; H++) {
                            var _ = F[H];
                            if (_.UID == A) {
                                I.push(_.Name);
                                break
                            }
                        }
                    }
                return I.join(",")
            },
            oncellbeginedit: function (B) {
                var $ = B.source,
                    A = $.owner,
                    _ = A.data.Departments || [];
                B.editor.load(_)
            }
        }, $)
    };
mini.Project.PrincipalColumn = function ($) {
        return mini.copyTo({
            name: "Principal",
            header: mini.Gantt.Principal_Text,
            field: "Principal",
            width: 150,
            editor: {
                type: "combobox",
                valueField: "UID",
                displayField: "Name",
                multiSelect: true,
                showCheckIcon: true,
               allowInput: true
            },
            renderer: function (J) {
                var $ = J.source,
                    G = $.owner,
                    F = G.data.Principals || [],
                    I = [],
                    A = String(J.value),
                    C = mini.isArray(A) ? A : A.split(",");
                for (var E = 0, D = C.length; E < D; E++) {
                        A = C[E];
                        for (var H = 0, B = F.length; H < B; H++) {
                            var _ = F[H];
                            if (_.UID == A) {
                                I.push(_.Name);
                                break
                            }
                        }
                    }
                return I.join(",")
            },
            oncellbeginedit: function (B) {
                var $ = B.source,
                    A = $.owner,
                    _ = A.data.Principals || [];
                B.editor.load(_)
            }
        }, $)
    };
mini.Project.AssignmentsColumn = function ($) {
        return mini.copyTo({
            name: "Assignments",
            header: mini.Gantt.Assignments_Text,
            field: "Assignments",
            width: 150,
            renderer: function (H) {
                var $ = H.source,
                    E = $.owner,
                    F = [],
                    C = H.value;
                if (C) for (var _ = 0, G = C.length; _ < G; _++) {
                        var B = C[_],
                            A = B.ResourceUID,
                            D = E.getResource(A);
                        if (D) F.push(D.Name)
                    }
                return F.join(",")
            }
        }, $)
    };
mini.Project.Critical2Column = function ($) {
        return mini.copyTo({
            name: "Critical2",
            header: "\u5173\u952e\u4efb\u52a1\uff08\u624b\u52a8\uff09",
            field: "Critical2",
            width: 80,
            type: "checkboxcolumn",
            trueValue: 1,
            falseValue: 0
        }, $)
    };
mini.Project.CriticalColumn = function ($) {
        return mini.copyTo({
            name: "Critical",
            header: mini.Gantt.Critical_Text,
            field: "Critical",
            width: 80,
            type: "checkboxcolumn",
            trueValue: 1,
            falseValue: 0,
            readOnly: true
        }, $)
    };
MyProjectSchedule.Order = function ($) {
        this.project = $
    };
MyProjectSchedule.Order.prototype = {
        Tasks: [],
        addDate: function (_, $) {
            return new Date(_.getFullYear(), _.getMonth(), _.getDate() + $, _.getHours(), _.getMinutes(), _.getSeconds())
        },
        createSuccessorTasks: function () {
            var G = this.Tasks;
            if (G == null) return;
            for (var _ = 0, F = G.length; _ < F; _++) {
                var B = G[_];
                B.SuccessorTasks = [];
                delete B.__orderTime;
                B["Conflict"] = 0
            }
            for (_ = 0, F = G.length; _ < F; _++) {
                var B = G[_],
                    $ = B.PredecessorLink;
                if ($ != null && $.length > 0) for (var C = 0, A = $.length; C < A; C++) {
                        var D = $[C],
                            E = this.project.getTask(D.PredecessorUID);
                        if (E != null) E.SuccessorTasks.push(B)
                    }
            }
        },
        clearSuccessorTasks: function () {
            var B = this.Tasks;
            for (var $ = 0, A = B.length; $ < A; $++) {
                var _ = B[$];
                delete _.SuccessorTasks;
                delete _.__orderTime
            }
        },
        getLinkedTasks: function ($) {},
        orderByStart: function (B) {
            this._TaskUIDs = this.project._TaskUIDs;
            this.nodesField = this.project.tasks.nodesField;
            this.Tasks = this.project.getTaskList();
            this.StartDate = this.project.getStartDate();
            this.FinishDate = this.project.getFinishDate();
            this.Calendar = this.project._Calendar;
            var D = this.Tasks,
                H = this.forTasks = {};
            this.ancestorTasks = {};
            this.limitDates = {};
            var $ = {};
            for (var F = 0, C = D.length; F < C; F++) {
                    var J = D[F];
                    $[J.UID] = {
                        Start: J.Start,
                        Finish: J.Finish,
                        Duration: J.Duration,
                        Work: J.Work,
                        Summary: J.Summary
                    };
                    H[J.UID] = 1
                }
            this.createSuccessorTasks();
            this.orderCount = 0;
            var I = new Date();
            for (F = 0, C = D.length; F < C; F++) {
                    J = D[F];
                    if (J.OutlineLevel == 1) {
                        delete H[J.UID];
                        this.orderTaskByStart(J, J.Start)
                    }
                }
            this.syncSummarys();
            this.clearSuccessorTasks();
            this.ancestorTasks = {};
            this.limitDates = {};
            for (F = 0, C = D.length; F < C; F++) {
                    var J = D[F],
                        G = $[J.UID],
                        L = G.Start,
                        _ = G.Finish,
                        K = G.Duration,
                        E = G.Work,
                        A = G.Summary;
                    if ((!L && J.Start) || (L && !J.Start) || (L && J.Start && L.getTime() != J.Start.getTime())) this.project.setTaskModified(J, "Start");
                    if ((!_ && J.Finish) || (_ && !J.Finish) || (_ && J.Finish && _.getTime() != J.Finish.getTime())) this.project.setTaskModified(J, "Finish");
                    if (K != J.Duration) this.project.setTaskModified(J, "Duration");
                    if (E != J.Work) this.project.setTaskModified(J, "Work");
                    if (A != J.Summary) this.project.setTaskModified(J, "Summary")
                }
        },
        orderTaskByStart: function (C, _) {
            if (this.forTasks[C.UID]) return;
            if (C.Summary == 0 && (C.Start == null || C.Finish == null)) {
                C.__orderTime = "ordered";
                return
            }
            _ = this.StartDate;
            if (C.Summary != 1) {
                var A = C.PredecessorLink;
                if (A != null && A.length > 0) {
                    var $ = this.getLastStartDateByPredecessorLink(C);
                    if ($ != null) _ = $
                }
                if (!C.Start || _.getTime() != C.Start.getTime()) {
                    C.Start = this.Calendar.getWorkingDate(_, true);
                    C.Finish = this.Calendar.getFinish(C.Start, C.Duration)
                }
                this.limitTaskByStart(C)
            }
            var B = (C.Start ? C.Start.getTime() : "") + "-" + (C.Finish ? C.Finish.getTime() : "");
            if (C.__orderTime != B) {
                C.__orderTime = B;
                if (C.SuccessorTasks.length > 0) this.syncSuccessorTasks(C);
                var D = C[this.nodesField];
                if (D) this.syncChildrenTasksByStart(C)
            }
        },
        syncChildrenTasksByStart: function (B) {
            var C = B[this.nodesField];
            if (C == null) return;
            for (var $ = 0, A = C.length; $ < A; $++) {
                var _ = C[$];
                delete this.forTasks[_.UID];
                this.orderTaskByStart(_, _.Start)
            }
        },
        syncSuccessorTasks: function (B) {
            var $ = B.SuccessorTasks;
            if (!$) return;
            for (var _ = $.length - 1; _ >= 0; _--) {
                var A = $[_];
                this.orderTaskByStart(A, A.Start)
            }
        },
        getLastStartDateByPredecessorLink: function (G) {
            var H = null,
                A = G.PredecessorLink;
            if (A == null || A.length == 0) return H;
            var F = G.Duration;
            for (var D = 0, C = A.length; D < C; D++) {
                    var B = A[D],
                        $ = this._TaskUIDs[B.PredecessorUID];
                    if ($ == null) continue;
                    if (!$.__orderTime) return null;
                    var _ = $.Start,
                        E = $.Finish,
                        J = $.Duration;
                    if (!_ || !E) continue;
                    switch (B.Type) {
                        case 0:
                            _ = this.Calendar.getStart(E, F);
                            break;
                        case 1:
                            _ = this.Calendar.getWorkingDate(this.addDate(E, 1), true);
                            break;
                        case 2:
                            E = this.Calendar.getWorkingDate(this.addDate(_, -1), false);
                            _ = this.Calendar.getStart(E, F);
                            break;
                        case 3:
                            _ = _;
                            break
                        }
                    var I = B.LinkLag || 0;
                    if (I != 0) _ = this.Calendar.getWorkingStartDate(_, I);
                    if (H == null || H.getTime() < _.getTime()) H = _
                }
            return H
        },
        limitTaskByStart: function (H) {
            if (H.Start == null || H.Finish == null) return;
            var _ = H.Start,
                G = H.Finish,
                J = H.Duration,
                F = H.ConstraintDate,
                A = parseInt(H.ConstraintType);
            if (A != 0 && A != 1 && F == null);
            else switch (A) {
                case 0:
                    break;
                case 1:
                    break;
                case 2:
                    _ = this.Calendar.getWorkingDate(F, true);
                    break;
                case 3:
                    G = this.Calendar.getWorkingDate(F, false);
                    _ = this.Calendar.getStart(G, J);
                    break;
                case 4:
                    if (_.getTime() < F.getTime()) _ = this.Calendar.getWorkingDate(F, true);
                    break;
                case 5:
                    if (_.getTime() > F.getTime()) {
                        _ = this.Calendar.getWorkingDate(F, false);
                        _ = mini.clearTime(_)
                    }
                    break;
                case 6:
                    var B = mini.clearTime(G);
                    if (B.getTime() < F.getTime()) {
                        G = this.Calendar.getWorkingDate(F, true);
                        G = new Date(G.getFullYear(), G.getMonth(), G.getDate(), 23, 59, 59);
                        _ = this.Calendar.getStart(G, J)
                    }
                    break;
                case 7:
                    var D = mini.clearTime(G);
                    if (D.getTime() > F.getTime()) {
                        G = this.Calendar.getWorkingDate(F, false);
                        _ = this.Calendar.getStart(G, J)
                    }
                    break
                }
            G = this.Calendar.getFinish(_, J);
            var $ = this.getSummaryLimitDate(H),
                I = $.Start,
                C = $.Finish;
            if (_.getTime() < I.getTime()) _ = I;
            if (G.getTime() > C.getTime()) {
                    G = C;
                    _ = this.Calendar.getStart(G, J);
                    if (_.getTime() < I.getTime()) {
                        H.Duration = J = this.Calendar.getWorkingDays(I, G);
                        _ = I
                    }
                }
            if (_ != null && G != null) if (H.Start == null || H.Finish == null || H.Start.getTime() != _.getTime() || H.Finish.getTime() != G.getTime()) {
                    H.Start = this.Calendar.getWorkingDate(_, true);
                    H.Finish = this.Calendar.getFinish(H.Start, J);
                    var E = H.PredecessorLink;
                    if (E != null && E.length > 0) H.Conflict = 1
                }
        },
        minDate: new Date(1900, 0, 1),
        maxDate: new Date(9999, 0, 1),
        getSummaryLimitDate: function (J) {
            var I = this.limitDates[J.UID];
            if (I) return I;
            var _ = this.minDate,
                H = this.maxDate,
                E = this.ancestorTasks[J.UID];
            if (!E) {
                    E = this.project.getAncestorTasks(J);
                    E.reverse();
                    this.ancestorTasks[J.UID] = E
                }
            for (var F = 0, D = E.length; F < D; F++) {
                    var C = E[F],
                        A = C.FixedDate;
                    if (A != 0 && C.Start != null && C.Finish != null) {
                            _ = C.Start;
                            H = C.Finish;
                            break
                        } else {
                            var G = mini.clearTime(C.ConstraintDate),
                                B = C.ConstraintType;
                            if (B != 0 && B != 1 && G == null) continue;
                            switch (B) {
                                case 0:
                                    break;
                                case 1:
                                    break;
                                case 2:
                                    _ = this.Calendar.getWorkingDate(G, true);
                                    break;
                                case 3:
                                    H = this.Calendar.getWorkingDate(G, false);
                                    break;
                                case 4:
                                    _ = this.Calendar.getWorkingDate(G, true);
                                    break;
                                case 7:
                                    H = this.Calendar.getWorkingDate(G, false);
                                    break
                                }
                        }
                }
            var $ = {
                    Start: _,
                    Finish: H
                };
            this.limitDates[J.UID] = $;
            return $
        },
        syncSummarys: function () {
            var $ = this.project.tasks.root[this.nodesField];
            this.orderSummarys($)
        },
        orderSummarys: function (G) {
            var A = null,
                D = null,
                I = 0;
            for (var J = 0, H = G.length; J < H; J++) {
                    var N = G[J],
                        $ = N[this.nodesField];
                    if ($ != null && $.length > 0) {
                            var E = this.orderSummarys($),
                                O = E.Start,
                                _ = E.Finish;
                            if (N.FixedDate == 0 && O && _) {
                                    var K = mini.clearTime(N.ConstraintDate),
                                        C = parseInt(N.ConstraintType);
                                    if (C != 0 && C != 1 && K == null);
                                    else switch (C) {
                                        case 2:
                                            O = this.Calendar.getWorkingDate(K, true);
                                            break;
                                        case 3:
                                            _ = this.Calendar.getWorkingDate(K, false);
                                            break;
                                        case 5:
                                            if (O.getTime() > K.getTime()) {
                                                O = this.Calendar.getWorkingDate(K, false);
                                                O = mini.clearTime(O)
                                            }
                                            break;
                                        case 6:
                                            var F = mini.clearTime(_);
                                            if (F.getTime() < K.getTime()) {
                                                _ = this.Calendar.getWorkingDate(K, true);
                                                _ = mini.maxTime(_)
                                            }
                                            break
                                        }
                                    N.Work = E.Work;
                                    N.Start = O;
                                    N.Finish = _
                                }
                            if (N.Start && N.Finish) N.Duration = this.Calendar.getWorkingDays(N.Start, N.Finish);
                            this.limitTaskByStart(N)
                        }
                    if (N.Start != null && N.Finish != null) {
                            var B = N.Start,
                                L = N.Finish;
                            if (A == null || A.getTime() > B.getTime()) A = mini.cloneDate(B);
                            if (D == null || D.getTime() < L.getTime()) D = mini.cloneDate(L)
                        }
                    if (!isNaN(N.Work)) I += parseInt(N.Work)
                }
            var M = {
                    Start: A,
                    Finish: D,
                    Work: I
                };
            return M
        }
    }
